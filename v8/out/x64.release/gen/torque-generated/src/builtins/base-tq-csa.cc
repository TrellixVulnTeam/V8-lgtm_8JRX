#include "src/builtins/builtins-array-gen.h"
#include "src/builtins/builtins-regexp-gen.h"
#include "src/builtins/builtins-utils-gen.h"
#include "src/builtins/builtins.h"
#include "src/codegen/code-factory.h"
#include "src/heap/factory-inl.h"
#include "src/objects/arguments.h"
#include "src/objects/bigint.h"
#include "src/objects/elements-kind.h"
#include "src/objects/free-space.h"
#include "src/objects/js-generator.h"
#include "src/objects/js-promise.h"
#include "src/objects/js-regexp-string-iterator.h"
#include "src/objects/js-weak-refs.h"
#include "src/objects/objects.h"
#include "src/objects/source-text-module.h"
#include "src/objects/stack-frame-info.h"
#include "src/objects/synthetic-module.h"
#include "src/objects/template-objects.h"
#include "src/builtins/builtins-bigint-gen.h"
#include "src/builtins/builtins-collections-gen.h"
#include "src/builtins/builtins-data-view-gen.h"
#include "src/builtins/builtins-regexp-gen.h"
#include "src/builtins/builtins-iterator-gen.h"
#include "src/builtins/builtins-proxy-gen.h"
#include "src/builtins/builtins-proxy-gen.h"
#include "src/builtins/builtins-proxy-gen.h"
#include "src/builtins/builtins-proxy-gen.h"
#include "src/builtins/builtins-proxy-gen.h"
#include "src/builtins/builtins-proxy-gen.h"
#include "src/builtins/builtins-proxy-gen.h"
#include "src/builtins/builtins-proxy-gen.h"
#include "src/builtins/builtins-proxy-gen.h"
#include "src/builtins/builtins-proxy-gen.h"
#include "src/builtins/builtins-proxy-gen.h"
#include "src/builtins/builtins-proxy-gen.h"
#include "src/builtins/builtins-regexp-gen.h"
#include "src/builtins/builtins-regexp-gen.h"
#include "src/builtins/builtins-regexp-gen.h"
#include "src/builtins/builtins-regexp-gen.h"
#include "src/builtins/builtins-regexp-gen.h"
#include "src/builtins/builtins-regexp-gen.h"
#include "src/builtins/builtins-regexp-gen.h"
#include "src/builtins/builtins-regexp-gen.h"
#include "src/builtins/builtins-string-gen.h"
#include "src/builtins/builtins-string-gen.h"
#include "src/builtins/builtins-regexp-gen.h"
#include "src/builtins/builtins-constructor-gen.h"
#include "src/builtins/builtins-typed-array-gen.h"
#include "src/builtins/builtins-typed-array-gen.h"
#include "src/builtins/builtins-typed-array-gen.h"
#include "src/builtins/builtins-typed-array-gen.h"
#include "src/builtins/builtins-typed-array-gen.h"
#include "src/builtins/builtins-typed-array-gen.h"
#include "src/builtins/builtins-typed-array-gen.h"
#include "src/builtins/builtins-typed-array-gen.h"
#include "src/builtins/builtins-typed-array-gen.h"
#include "src/objects/js-break-iterator.h"
#include "src/objects/js-collator.h"
#include "src/objects/js-number-format.h"
#include "src/objects/js-objects.h"
#include "src/objects/js-plural-rules.h"
#include "src/objects/js-relative-time-format.h"
#include "src/objects/js-date-time-format.h"
#include "src/objects/js-list-format.h"
#include "src/objects/js-locale.h"
#include "src/objects/js-segment-iterator.h"
#include "src/objects/js-segmenter.h"
#include "torque-generated/src/builtins/arguments-tq-csa.h"
#include "torque-generated/src/builtins/array-copywithin-tq-csa.h"
#include "torque-generated/src/builtins/array-every-tq-csa.h"
#include "torque-generated/src/builtins/array-filter-tq-csa.h"
#include "torque-generated/src/builtins/array-find-tq-csa.h"
#include "torque-generated/src/builtins/array-findindex-tq-csa.h"
#include "torque-generated/src/builtins/array-foreach-tq-csa.h"
#include "torque-generated/src/builtins/array-join-tq-csa.h"
#include "torque-generated/src/builtins/array-lastindexof-tq-csa.h"
#include "torque-generated/src/builtins/array-map-tq-csa.h"
#include "torque-generated/src/builtins/array-of-tq-csa.h"
#include "torque-generated/src/builtins/array-reduce-right-tq-csa.h"
#include "torque-generated/src/builtins/array-reduce-tq-csa.h"
#include "torque-generated/src/builtins/array-reverse-tq-csa.h"
#include "torque-generated/src/builtins/array-shift-tq-csa.h"
#include "torque-generated/src/builtins/array-slice-tq-csa.h"
#include "torque-generated/src/builtins/array-some-tq-csa.h"
#include "torque-generated/src/builtins/array-splice-tq-csa.h"
#include "torque-generated/src/builtins/array-unshift-tq-csa.h"
#include "torque-generated/src/builtins/array-tq-csa.h"
#include "torque-generated/src/builtins/base-tq-csa.h"
#include "torque-generated/src/builtins/bigint-tq-csa.h"
#include "torque-generated/src/builtins/boolean-tq-csa.h"
#include "torque-generated/src/builtins/collections-tq-csa.h"
#include "torque-generated/src/builtins/data-view-tq-csa.h"
#include "torque-generated/src/builtins/extras-utils-tq-csa.h"
#include "torque-generated/src/builtins/frames-tq-csa.h"
#include "torque-generated/src/builtins/growable-fixed-array-tq-csa.h"
#include "torque-generated/src/builtins/internal-coverage-tq-csa.h"
#include "torque-generated/src/builtins/iterator-tq-csa.h"
#include "torque-generated/src/builtins/math-tq-csa.h"
#include "torque-generated/src/builtins/object-fromentries-tq-csa.h"
#include "torque-generated/src/builtins/object-tq-csa.h"
#include "torque-generated/src/builtins/proxy-constructor-tq-csa.h"
#include "torque-generated/src/builtins/proxy-delete-property-tq-csa.h"
#include "torque-generated/src/builtins/proxy-get-property-tq-csa.h"
#include "torque-generated/src/builtins/proxy-get-prototype-of-tq-csa.h"
#include "torque-generated/src/builtins/proxy-has-property-tq-csa.h"
#include "torque-generated/src/builtins/proxy-is-extensible-tq-csa.h"
#include "torque-generated/src/builtins/proxy-prevent-extensions-tq-csa.h"
#include "torque-generated/src/builtins/proxy-revocable-tq-csa.h"
#include "torque-generated/src/builtins/proxy-revoke-tq-csa.h"
#include "torque-generated/src/builtins/proxy-set-property-tq-csa.h"
#include "torque-generated/src/builtins/proxy-set-prototype-of-tq-csa.h"
#include "torque-generated/src/builtins/proxy-tq-csa.h"
#include "torque-generated/src/builtins/reflect-tq-csa.h"
#include "torque-generated/src/builtins/regexp-exec-tq-csa.h"
#include "torque-generated/src/builtins/regexp-match-tq-csa.h"
#include "torque-generated/src/builtins/regexp-replace-tq-csa.h"
#include "torque-generated/src/builtins/regexp-search-tq-csa.h"
#include "torque-generated/src/builtins/regexp-source-tq-csa.h"
#include "torque-generated/src/builtins/regexp-split-tq-csa.h"
#include "torque-generated/src/builtins/regexp-test-tq-csa.h"
#include "torque-generated/src/builtins/regexp-tq-csa.h"
#include "torque-generated/src/builtins/string-tq-csa.h"
#include "torque-generated/src/builtins/string-endswith-tq-csa.h"
#include "torque-generated/src/builtins/string-html-tq-csa.h"
#include "torque-generated/src/builtins/string-iterator-tq-csa.h"
#include "torque-generated/src/builtins/string-pad-tq-csa.h"
#include "torque-generated/src/builtins/string-repeat-tq-csa.h"
#include "torque-generated/src/builtins/string-slice-tq-csa.h"
#include "torque-generated/src/builtins/string-startswith-tq-csa.h"
#include "torque-generated/src/builtins/string-substring-tq-csa.h"
#include "torque-generated/src/builtins/torque-internal-tq-csa.h"
#include "torque-generated/src/builtins/typed-array-createtypedarray-tq-csa.h"
#include "torque-generated/src/builtins/typed-array-every-tq-csa.h"
#include "torque-generated/src/builtins/typed-array-filter-tq-csa.h"
#include "torque-generated/src/builtins/typed-array-find-tq-csa.h"
#include "torque-generated/src/builtins/typed-array-findindex-tq-csa.h"
#include "torque-generated/src/builtins/typed-array-foreach-tq-csa.h"
#include "torque-generated/src/builtins/typed-array-reduce-tq-csa.h"
#include "torque-generated/src/builtins/typed-array-reduceright-tq-csa.h"
#include "torque-generated/src/builtins/typed-array-slice-tq-csa.h"
#include "torque-generated/src/builtins/typed-array-some-tq-csa.h"
#include "torque-generated/src/builtins/typed-array-subarray-tq-csa.h"
#include "torque-generated/src/builtins/typed-array-tq-csa.h"
#include "torque-generated/src/objects/intl-objects-tq-csa.h"
#include "torque-generated/test/torque/test-torque-tq-csa.h"
#include "torque-generated/third_party/v8/builtins/array-sort-tq-csa.h"

namespace v8 {
namespace internal {

TNode<JSObject> NewJSObject_55(compiler::CodeAssemblerState* state_, TNode<Context> p_context) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Context> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSFunction, HeapObject> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSFunction, HeapObject, Map> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSFunction> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSFunction, Map> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSObject> block6(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_context);

  if (block0.is_used()) {
    TNode<Context> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 365);
    TNode<JSFunction> tmp1;
    USE(tmp1);
    tmp1 = GetObjectFunction_221(state_, TNode<Context>{tmp0});
    ca_.SetSourcePosition("../../src/builtins/base.tq", 366);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSFunction::kPrototypeOrInitialMapOffset);
    USE(tmp2);
    TNode<HeapObject>tmp3 = CodeStubAssembler(state_).LoadReference<HeapObject>(CodeStubAssembler::Reference{tmp1, tmp2});
    TNode<Map> tmp4;
    USE(tmp4);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp4 = Cast3Map_132(state_, TNode<Context>{tmp0}, TNode<HeapObject>{tmp3}, &label0);
    ca_.Goto(&block4, tmp0, tmp1, tmp3, tmp4);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block5, tmp0, tmp1, tmp3);
    }
  }

  if (block5.is_used()) {
    TNode<Context> tmp5;
    TNode<JSFunction> tmp6;
    TNode<HeapObject> tmp7;
    ca_.Bind(&block5, &tmp5, &tmp6, &tmp7);
    ca_.Goto(&block3, tmp5, tmp6);
  }

  if (block4.is_used()) {
    TNode<Context> tmp8;
    TNode<JSFunction> tmp9;
    TNode<HeapObject> tmp10;
    TNode<Map> tmp11;
    ca_.Bind(&block4, &tmp8, &tmp9, &tmp10, &tmp11);
    ca_.Goto(&block2, tmp8, tmp9, tmp11);
  }

  if (block3.is_used()) {
    TNode<Context> tmp12;
    TNode<JSFunction> tmp13;
    ca_.Bind(&block3, &tmp12, &tmp13);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 367);
    CodeStubAssembler(state_).Unreachable();
  }

  if (block2.is_used()) {
    TNode<Context> tmp14;
    TNode<JSFunction> tmp15;
    TNode<Map> tmp16;
    ca_.Bind(&block2, &tmp14, &tmp15, &tmp16);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 366);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 369);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 370);
    TNode<FixedArray> tmp17;
    USE(tmp17);
    tmp17 = kEmptyFixedArray_214(state_);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 371);
    TNode<FixedArray> tmp18;
    USE(tmp18);
    tmp18 = kEmptyFixedArray_214(state_);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 368);
    TNode<IntPtrT> tmp19;
    USE(tmp19);
    tmp19 = CodeStubAssembler(state_).TimesTaggedSize(CodeStubAssembler(state_).LoadMapInstanceSizeInWords((TNode<Map>{tmp16})));
    TNode<JSObject> tmp20;
    USE(tmp20);
    tmp20 = ca_.UncheckedCast<JSObject>(CodeStubAssembler(state_).Allocate(TNode<IntPtrT>{tmp19}));
    CodeStubAssembler(state_).InitializeFieldsWithRoot(tmp20, CodeStubAssembler(state_).IntPtrConstant(24), TNode<IntPtrT>{tmp19}, RootIndex::kUndefinedValue);
    TNode<IntPtrT> tmp21 = ca_.IntPtrConstant(HeapObject::kMapOffset);
    USE(tmp21);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp20, tmp21}, tmp16);
    TNode<IntPtrT> tmp22 = ca_.IntPtrConstant(JSReceiver::kPropertiesOrHashOffset);
    USE(tmp22);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp20, tmp22}, tmp17);
    TNode<IntPtrT> tmp23 = ca_.IntPtrConstant(JSObject::kElementsOffset);
    USE(tmp23);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp20, tmp23}, tmp18);
    ca_.Goto(&block1, tmp14, tmp20);
  }

  if (block1.is_used()) {
    TNode<Context> tmp24;
    TNode<JSObject> tmp25;
    ca_.Bind(&block1, &tmp24, &tmp25);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 364);
    ca_.Goto(&block6, tmp24, tmp25);
  }

    TNode<Context> tmp26;
    TNode<JSObject> tmp27;
    ca_.Bind(&block6, &tmp26, &tmp27);
  return TNode<JSObject>{tmp27};
}

TNode<Map> GetDerivedMap_56(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<JSFunction> p_target, TNode<JSReceiver> p_newTarget) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Context, JSFunction, JSReceiver> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSFunction, JSReceiver, JSReceiver> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSFunction, JSReceiver, JSReceiver, JSFunction> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSFunction, JSReceiver, JSFunction> block6(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSFunction, JSReceiver, JSFunction> block7(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSFunction, JSReceiver, JSFunction, HeapObject> block9(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSFunction, JSReceiver, JSFunction, HeapObject, Map> block8(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSFunction, JSReceiver, JSFunction, Map> block10(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSFunction, JSReceiver, JSFunction, Map> block11(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSFunction, JSReceiver> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSFunction, JSReceiver, Map> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSFunction, JSReceiver, Map> block12(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_context, p_target, p_newTarget);

  if (block0.is_used()) {
    TNode<Context> tmp0;
    TNode<JSFunction> tmp1;
    TNode<JSReceiver> tmp2;
    ca_.Bind(&block0, &tmp0, &tmp1, &tmp2);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 380);
    TNode<JSFunction> tmp3;
    USE(tmp3);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp3 = Cast10JSFunction_143(state_, TNode<Context>{tmp0}, TNode<HeapObject>{tmp2}, &label0);
    ca_.Goto(&block4, tmp0, tmp1, tmp2, tmp2, tmp3);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block5, tmp0, tmp1, tmp2, tmp2);
    }
  }

  if (block5.is_used()) {
    TNode<Context> tmp4;
    TNode<JSFunction> tmp5;
    TNode<JSReceiver> tmp6;
    TNode<JSReceiver> tmp7;
    ca_.Bind(&block5, &tmp4, &tmp5, &tmp6, &tmp7);
    ca_.Goto(&block3, tmp4, tmp5, tmp6);
  }

  if (block4.is_used()) {
    TNode<Context> tmp8;
    TNode<JSFunction> tmp9;
    TNode<JSReceiver> tmp10;
    TNode<JSReceiver> tmp11;
    TNode<JSFunction> tmp12;
    ca_.Bind(&block4, &tmp8, &tmp9, &tmp10, &tmp11, &tmp12);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 381);
    TNode<BoolT> tmp13;
    USE(tmp13);
    tmp13 = CodeStubAssembler(state_).HasPrototypeSlot(TNode<JSFunction>{tmp12});
    TNode<BoolT> tmp14;
    USE(tmp14);
    tmp14 = CodeStubAssembler(state_).Word32BinaryNot(TNode<BoolT>{tmp13});
    ca_.Branch(tmp14, &block6, &block7, tmp8, tmp9, tmp10, tmp12);
  }

  if (block6.is_used()) {
    TNode<Context> tmp15;
    TNode<JSFunction> tmp16;
    TNode<JSReceiver> tmp17;
    TNode<JSFunction> tmp18;
    ca_.Bind(&block6, &tmp15, &tmp16, &tmp17, &tmp18);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 382);
    ca_.Goto(&block3, tmp15, tmp16, tmp17);
  }

  if (block7.is_used()) {
    TNode<Context> tmp19;
    TNode<JSFunction> tmp20;
    TNode<JSReceiver> tmp21;
    TNode<JSFunction> tmp22;
    ca_.Bind(&block7, &tmp19, &tmp20, &tmp21, &tmp22);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 386);
    TNode<IntPtrT> tmp23 = ca_.IntPtrConstant(JSFunction::kPrototypeOrInitialMapOffset);
    USE(tmp23);
    TNode<HeapObject>tmp24 = CodeStubAssembler(state_).LoadReference<HeapObject>(CodeStubAssembler::Reference{tmp22, tmp23});
    TNode<Map> tmp25;
    USE(tmp25);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp25 = Cast3Map_132(state_, TNode<Context>{tmp19}, TNode<HeapObject>{tmp24}, &label0);
    ca_.Goto(&block8, tmp19, tmp20, tmp21, tmp22, tmp24, tmp25);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block9, tmp19, tmp20, tmp21, tmp22, tmp24);
    }
  }

  if (block9.is_used()) {
    TNode<Context> tmp26;
    TNode<JSFunction> tmp27;
    TNode<JSReceiver> tmp28;
    TNode<JSFunction> tmp29;
    TNode<HeapObject> tmp30;
    ca_.Bind(&block9, &tmp26, &tmp27, &tmp28, &tmp29, &tmp30);
    ca_.Goto(&block3, tmp26, tmp27, tmp28);
  }

  if (block8.is_used()) {
    TNode<Context> tmp31;
    TNode<JSFunction> tmp32;
    TNode<JSReceiver> tmp33;
    TNode<JSFunction> tmp34;
    TNode<HeapObject> tmp35;
    TNode<Map> tmp36;
    ca_.Bind(&block8, &tmp31, &tmp32, &tmp33, &tmp34, &tmp35, &tmp36);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 387);
    TNode<Object> tmp37;
    USE(tmp37);
    tmp37 = CodeStubAssembler(state_).LoadConstructorOrBackPointer(TNode<Map>{tmp36});
    TNode<BoolT> tmp38;
    USE(tmp38);
    tmp38 = CodeStubAssembler(state_).TaggedNotEqual(TNode<Object>{tmp37}, TNode<HeapObject>{tmp32});
    ca_.Branch(tmp38, &block10, &block11, tmp31, tmp32, tmp33, tmp34, tmp36);
  }

  if (block10.is_used()) {
    TNode<Context> tmp39;
    TNode<JSFunction> tmp40;
    TNode<JSReceiver> tmp41;
    TNode<JSFunction> tmp42;
    TNode<Map> tmp43;
    ca_.Bind(&block10, &tmp39, &tmp40, &tmp41, &tmp42, &tmp43);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 388);
    ca_.Goto(&block3, tmp39, tmp40, tmp41);
  }

  if (block11.is_used()) {
    TNode<Context> tmp44;
    TNode<JSFunction> tmp45;
    TNode<JSReceiver> tmp46;
    TNode<JSFunction> tmp47;
    TNode<Map> tmp48;
    ca_.Bind(&block11, &tmp44, &tmp45, &tmp46, &tmp47, &tmp48);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 391);
    ca_.Goto(&block1, tmp44, tmp45, tmp46, tmp48);
  }

  if (block3.is_used()) {
    TNode<Context> tmp49;
    TNode<JSFunction> tmp50;
    TNode<JSReceiver> tmp51;
    ca_.Bind(&block3, &tmp49, &tmp50, &tmp51);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 394);
    TNode<Map> tmp52;
    tmp52 = TORQUE_CAST(CodeStubAssembler(state_).CallRuntime(Runtime::kGetDerivedMap, tmp49, tmp50, tmp51)); 
    USE(tmp52);
    ca_.Goto(&block1, tmp49, tmp50, tmp51, tmp52);
  }

  if (block1.is_used()) {
    TNode<Context> tmp53;
    TNode<JSFunction> tmp54;
    TNode<JSReceiver> tmp55;
    TNode<Map> tmp56;
    ca_.Bind(&block1, &tmp53, &tmp54, &tmp55, &tmp56);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 377);
    ca_.Goto(&block12, tmp53, tmp54, tmp55, tmp56);
  }

    TNode<Context> tmp57;
    TNode<JSFunction> tmp58;
    TNode<JSReceiver> tmp59;
    TNode<Map> tmp60;
    ca_.Bind(&block12, &tmp57, &tmp58, &tmp59, &tmp60);
  return TNode<Map>{tmp60};
}

TNode<JSObject> AllocateFastOrSlowJSObjectFromMap_57(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<Map> p_map) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Context, Map> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Map, FixedArray> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Map, FixedArray> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Map, JSObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Map, JSObject> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_context, p_map);

  if (block0.is_used()) {
    TNode<Context> tmp0;
    TNode<Map> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 400);
    TNode<FixedArray> tmp2;
    USE(tmp2);
    tmp2 = kEmptyFixedArray_214(state_);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 401);
    TNode<BoolT> tmp3;
    USE(tmp3);
    tmp3 = ConstructorBuiltinsAssembler(state_).IsDictionaryMap(TNode<Map>{tmp1});
    ca_.Branch(tmp3, &block2, &block3, tmp0, tmp1, tmp2);
  }

  if (block2.is_used()) {
    TNode<Context> tmp4;
    TNode<Map> tmp5;
    TNode<FixedArray> tmp6;
    ca_.Bind(&block2, &tmp4, &tmp5, &tmp6);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 402);
    TNode<FixedArray> tmp7;
    USE(tmp7);
    tmp7 = CodeStubAssembler(state_).AllocateNameDictionary(NameDictionary::kInitialCapacity);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 401);
    ca_.Goto(&block3, tmp4, tmp5, tmp7);
  }

  if (block3.is_used()) {
    TNode<Context> tmp8;
    TNode<Map> tmp9;
    TNode<FixedArray> tmp10;
    ca_.Bind(&block3, &tmp8, &tmp9, &tmp10);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 405);
    TNode<FixedArray> tmp11;
    USE(tmp11);
    tmp11 = kEmptyFixedArray_214(state_);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 404);
    TNode<JSObject> tmp12;
    USE(tmp12);
    tmp12 = CodeStubAssembler(state_).AllocateJSObjectFromMap(TNode<Map>{tmp9}, TNode<HeapObject>{tmp10}, TNode<FixedArray>{tmp11}, CodeStubAssembler::kNone, CodeStubAssembler::SlackTrackingMode::kWithSlackTracking);
    ca_.Goto(&block1, tmp8, tmp9, tmp12);
  }

  if (block1.is_used()) {
    TNode<Context> tmp13;
    TNode<Map> tmp14;
    TNode<JSObject> tmp15;
    ca_.Bind(&block1, &tmp13, &tmp14, &tmp15);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 398);
    ca_.Goto(&block4, tmp13, tmp14, tmp15);
  }

    TNode<Context> tmp16;
    TNode<Map> tmp17;
    TNode<JSObject> tmp18;
    ca_.Bind(&block4, &tmp16, &tmp17, &tmp18);
  return TNode<JSObject>{tmp18};
}

TNode<JSProxyRevocableResult> NewJSProxyRevocableResult_58(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<JSProxy> p_proxy, TNode<JSFunction> p_revoke) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Context, JSProxy, JSFunction> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSProxy, JSFunction, JSProxyRevocableResult> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSProxy, JSFunction, JSProxyRevocableResult> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_context, p_proxy, p_revoke);

  if (block0.is_used()) {
    TNode<Context> tmp0;
    TNode<JSProxy> tmp1;
    TNode<JSFunction> tmp2;
    ca_.Bind(&block0, &tmp0, &tmp1, &tmp2);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 434);
    TNode<Map> tmp3;
    USE(tmp3);
    tmp3 = GetProxyRevocableResultMap_226(state_, TNode<Context>{tmp0});
    ca_.SetSourcePosition("../../src/builtins/base.tq", 435);
    TNode<FixedArray> tmp4;
    USE(tmp4);
    tmp4 = kEmptyFixedArray_214(state_);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 436);
    TNode<FixedArray> tmp5;
    USE(tmp5);
    tmp5 = kEmptyFixedArray_214(state_);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 437);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 438);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 433);
    TNode<IntPtrT> tmp6;
    USE(tmp6);
    tmp6 = CodeStubAssembler(state_).IntPtrConstant(((40)));
    TNode<JSProxyRevocableResult> tmp7;
    USE(tmp7);
    tmp7 = ca_.UncheckedCast<JSProxyRevocableResult>(CodeStubAssembler(state_).Allocate(TNode<IntPtrT>{tmp6}));
    CodeStubAssembler(state_).InitializeFieldsWithRoot(tmp7, CodeStubAssembler(state_).IntPtrConstant(40), TNode<IntPtrT>{tmp6}, RootIndex::kUndefinedValue);
    TNode<IntPtrT> tmp8 = ca_.IntPtrConstant(HeapObject::kMapOffset);
    USE(tmp8);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp7, tmp8}, tmp3);
    TNode<IntPtrT> tmp9 = ca_.IntPtrConstant(JSReceiver::kPropertiesOrHashOffset);
    USE(tmp9);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp7, tmp9}, tmp4);
    TNode<IntPtrT> tmp10 = ca_.IntPtrConstant(JSObject::kElementsOffset);
    USE(tmp10);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp7, tmp10}, tmp5);
    TNode<IntPtrT> tmp11 = ca_.IntPtrConstant(JSProxyRevocableResult::kProxyOffset);
    USE(tmp11);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp7, tmp11}, tmp1);
    TNode<IntPtrT> tmp12 = ca_.IntPtrConstant(JSProxyRevocableResult::kRevokeOffset);
    USE(tmp12);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp7, tmp12}, tmp2);
    ca_.Goto(&block1, tmp0, tmp1, tmp2, tmp7);
  }

  if (block1.is_used()) {
    TNode<Context> tmp13;
    TNode<JSProxy> tmp14;
    TNode<JSFunction> tmp15;
    TNode<JSProxyRevocableResult> tmp16;
    ca_.Bind(&block1, &tmp13, &tmp14, &tmp15, &tmp16);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 431);
    ca_.Goto(&block2, tmp13, tmp14, tmp15, tmp16);
  }

    TNode<Context> tmp17;
    TNode<JSProxy> tmp18;
    TNode<JSFunction> tmp19;
    TNode<JSProxyRevocableResult> tmp20;
    ca_.Bind(&block2, &tmp17, &tmp18, &tmp19, &tmp20);
  return TNode<JSProxyRevocableResult>{tmp20};
}

TNode<JSArray> NewJSArray_59(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<Map> p_map, TNode<FixedArrayBase> p_elements) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Context, Map, FixedArrayBase> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Map, FixedArrayBase, JSArray> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Map, FixedArrayBase, JSArray> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_context, p_map, p_elements);

  if (block0.is_used()) {
    TNode<Context> tmp0;
    TNode<Map> tmp1;
    TNode<FixedArrayBase> tmp2;
    ca_.Bind(&block0, &tmp0, &tmp1, &tmp2);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 493);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 494);
    TNode<FixedArray> tmp3;
    USE(tmp3);
    tmp3 = kEmptyFixedArray_214(state_);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 495);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 496);
    TNode<IntPtrT> tmp4 = ca_.IntPtrConstant(FixedArrayBase::kLengthOffset);
    USE(tmp4);
    TNode<Smi>tmp5 = CodeStubAssembler(state_).LoadReference<Smi>(CodeStubAssembler::Reference{tmp2, tmp4});
    ca_.SetSourcePosition("../../src/builtins/base.tq", 492);
    TNode<IntPtrT> tmp6;
    USE(tmp6);
    tmp6 = CodeStubAssembler(state_).IntPtrConstant(((32)));
    TNode<JSArray> tmp7;
    USE(tmp7);
    tmp7 = ca_.UncheckedCast<JSArray>(CodeStubAssembler(state_).Allocate(TNode<IntPtrT>{tmp6}));
    CodeStubAssembler(state_).InitializeFieldsWithRoot(tmp7, CodeStubAssembler(state_).IntPtrConstant(32), TNode<IntPtrT>{tmp6}, RootIndex::kUndefinedValue);
    TNode<IntPtrT> tmp8 = ca_.IntPtrConstant(HeapObject::kMapOffset);
    USE(tmp8);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp7, tmp8}, tmp1);
    TNode<IntPtrT> tmp9 = ca_.IntPtrConstant(JSReceiver::kPropertiesOrHashOffset);
    USE(tmp9);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp7, tmp9}, tmp3);
    TNode<IntPtrT> tmp10 = ca_.IntPtrConstant(JSObject::kElementsOffset);
    USE(tmp10);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp7, tmp10}, tmp2);
    TNode<IntPtrT> tmp11 = ca_.IntPtrConstant(JSArray::kLengthOffset);
    USE(tmp11);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp7, tmp11}, tmp5);
    ca_.Goto(&block1, tmp0, tmp1, tmp2, tmp7);
  }

  if (block1.is_used()) {
    TNode<Context> tmp12;
    TNode<Map> tmp13;
    TNode<FixedArrayBase> tmp14;
    TNode<JSArray> tmp15;
    ca_.Bind(&block1, &tmp12, &tmp13, &tmp14, &tmp15);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 490);
    ca_.Goto(&block2, tmp12, tmp13, tmp14, tmp15);
  }

    TNode<Context> tmp16;
    TNode<Map> tmp17;
    TNode<FixedArrayBase> tmp18;
    TNode<JSArray> tmp19;
    ca_.Bind(&block2, &tmp16, &tmp17, &tmp18, &tmp19);
  return TNode<JSArray>{tmp19};
}

TNode<JSArray> NewJSArray_60(compiler::CodeAssemblerState* state_, TNode<Context> p_context) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Context> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSArray> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSArray> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_context);

  if (block0.is_used()) {
    TNode<Context> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 502);
    TNode<Map> tmp1;
    USE(tmp1);
    tmp1 = GetFastPackedSmiElementsJSArrayMap_225(state_, TNode<Context>{tmp0});
    ca_.SetSourcePosition("../../src/builtins/base.tq", 503);
    TNode<FixedArray> tmp2;
    USE(tmp2);
    tmp2 = kEmptyFixedArray_214(state_);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 504);
    TNode<FixedArray> tmp3;
    USE(tmp3);
    tmp3 = kEmptyFixedArray_214(state_);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 501);
    TNode<IntPtrT> tmp4;
    USE(tmp4);
    tmp4 = CodeStubAssembler(state_).IntPtrConstant(((32)));
    TNode<JSArray> tmp5;
    USE(tmp5);
    tmp5 = ca_.UncheckedCast<JSArray>(CodeStubAssembler(state_).Allocate(TNode<IntPtrT>{tmp4}));
    CodeStubAssembler(state_).InitializeFieldsWithRoot(tmp5, CodeStubAssembler(state_).IntPtrConstant(32), TNode<IntPtrT>{tmp4}, RootIndex::kUndefinedValue);
    TNode<IntPtrT> tmp6 = ca_.IntPtrConstant(HeapObject::kMapOffset);
    USE(tmp6);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp5, tmp6}, tmp1);
    TNode<IntPtrT> tmp7 = ca_.IntPtrConstant(JSReceiver::kPropertiesOrHashOffset);
    USE(tmp7);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp5, tmp7}, tmp2);
    TNode<IntPtrT> tmp8 = ca_.IntPtrConstant(JSObject::kElementsOffset);
    USE(tmp8);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp5, tmp8}, tmp3);
    TNode<IntPtrT> tmp9 = ca_.IntPtrConstant(JSArray::kLengthOffset);
    USE(tmp9);
    TNode<Number> tmp10;
    USE(tmp10);
    tmp10 = FromConstexpr20UT5ATSmi10HeapNumber17ATconstexpr_int31_160(state_, 0);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp5, tmp9}, tmp10);
    ca_.Goto(&block1, tmp0, tmp5);
  }

  if (block1.is_used()) {
    TNode<Context> tmp11;
    TNode<JSArray> tmp12;
    ca_.Bind(&block1, &tmp11, &tmp12);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 500);
    ca_.Goto(&block2, tmp11, tmp12);
  }

    TNode<Context> tmp13;
    TNode<JSArray> tmp14;
    ca_.Bind(&block2, &tmp13, &tmp14);
  return TNode<JSArray>{tmp14};
}

TNode<UintPtrT> kSmiMax_61(compiler::CodeAssemblerState* state_) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0);

    ca_.Bind(&block0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1290);
    TNode<UintPtrT> tmp0;
    USE(tmp0);
    tmp0 = FromConstexpr9ATuintptr19ATconstexpr_uintptr_153(state_, kSmiMaxValue);
return TNode<UintPtrT>{tmp0};
}

TNode<Oddball> TheHole_62(compiler::CodeAssemblerState* state_) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0);

    ca_.Bind(&block0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1357);
    TNode<Oddball> tmp0;
    USE(tmp0);
    tmp0 = CodeStubAssembler(state_).TheHoleConstant();
return TNode<Oddball>{tmp0};
}

TNode<Oddball> Null_63(compiler::CodeAssemblerState* state_) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0);

    ca_.Bind(&block0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1358);
    TNode<Oddball> tmp0;
    USE(tmp0);
    tmp0 = CodeStubAssembler(state_).NullConstant();
return TNode<Oddball>{tmp0};
}

TNode<Oddball> Undefined_64(compiler::CodeAssemblerState* state_) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0);

    ca_.Bind(&block0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1359);
    TNode<Oddball> tmp0;
    USE(tmp0);
    tmp0 = CodeStubAssembler(state_).UndefinedConstant();
return TNode<Oddball>{tmp0};
}

TNode<Oddball> True_65(compiler::CodeAssemblerState* state_) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0);

    ca_.Bind(&block0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1360);
    TNode<Oddball> tmp0;
    USE(tmp0);
    tmp0 = CodeStubAssembler(state_).TrueConstant();
return TNode<Oddball>{tmp0};
}

TNode<Oddball> False_66(compiler::CodeAssemblerState* state_) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0);

    ca_.Bind(&block0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1361);
    TNode<Oddball> tmp0;
    USE(tmp0);
    tmp0 = CodeStubAssembler(state_).FalseConstant();
return TNode<Oddball>{tmp0};
}

TNode<String> kEmptyString_67(compiler::CodeAssemblerState* state_) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0);

    ca_.Bind(&block0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1362);
    TNode<String> tmp0;
    USE(tmp0);
    tmp0 = CodeStubAssembler(state_).EmptyStringConstant();
return TNode<String>{tmp0};
}

TNode<String> kLengthString_68(compiler::CodeAssemblerState* state_) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0);

    ca_.Bind(&block0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1363);
    TNode<String> tmp0;
    USE(tmp0);
    tmp0 = CodeStubAssembler(state_).LengthStringConstant();
return TNode<String>{tmp0};
}

TNode<HeapNumber> kNaN_69(compiler::CodeAssemblerState* state_) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0);

    ca_.Bind(&block0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1364);
    TNode<HeapNumber> tmp0;
    USE(tmp0);
    tmp0 = CodeStubAssembler(state_).NanConstant();
return TNode<HeapNumber>{tmp0};
}

int31_t GetStartOfCaptureIndex_70(compiler::CodeAssemblerState* state_, int31_t p_captureIndex) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0);

  if (block0.is_used()) {
    ca_.Bind(&block0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1502);
    ca_.Goto(&block1);
  }

  if (block1.is_used()) {
    ca_.Bind(&block1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1501);
    ca_.Goto(&block2);
  }

    ca_.Bind(&block2);
  return (CodeStubAssembler(state_).ConstexprInt31Add(RegExpMatchInfo::kFirstCaptureIndex, (CodeStubAssembler(state_).ConstexprInt31Mul(p_captureIndex, 2))));
}

TF_BUILTIN(ToString, CodeStubAssembler) {
  compiler::CodeAssemblerState* state_ = state();  compiler::CodeAssembler ca_(state());
  TNode<Context> parameter0 = UncheckedCast<Context>(Parameter(Descriptor::kContext));
  USE(parameter0);
  TNode<Object> parameter1 = UncheckedCast<Object>(Parameter(Descriptor::kO));
  USE(parameter1);
  compiler::CodeAssemblerParameterizedLabel<Context, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, parameter0, parameter1);

  if (block0.is_used()) {
    TNode<Context> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1755);
    TNode<String> tmp2;
    USE(tmp2);
    tmp2 = ToStringImpl_253(state_, TNode<Context>{tmp0}, TNode<Object>{tmp1});
    CodeStubAssembler(state_).Return(tmp2);
  }
}

TNode<Object> ToPrimitiveDefault_71(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Context, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, Object, Object> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, Object, Object, JSReceiver> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, Object> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, Object> block6(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_context, p_v);

  if (block0.is_used()) {
    TNode<Context> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1765);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1766);
    TNode<JSReceiver> tmp2;
    USE(tmp2);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp2 = Cast10JSReceiver_1433(state_, TNode<Context>{tmp0}, TNode<Object>{tmp1}, &label0);
    ca_.Goto(&block4, tmp0, tmp1, tmp1, tmp1, tmp2);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block5, tmp0, tmp1, tmp1, tmp1);
    }
  }

  if (block5.is_used()) {
    TNode<Context> tmp3;
    TNode<Object> tmp4;
    TNode<Object> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block5, &tmp3, &tmp4, &tmp5, &tmp6);
    ca_.Goto(&block3, tmp3, tmp4, tmp5);
  }

  if (block4.is_used()) {
    TNode<Context> tmp7;
    TNode<Object> tmp8;
    TNode<Object> tmp9;
    TNode<Object> tmp10;
    TNode<JSReceiver> tmp11;
    ca_.Bind(&block4, &tmp7, &tmp8, &tmp9, &tmp10, &tmp11);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1767);
    TNode<Object> tmp12;
    tmp12 = CodeStubAssembler(state_).CallBuiltin(Builtins::kNonPrimitiveToPrimitive_Default, tmp7, tmp11);
    USE(tmp12);
    ca_.Goto(&block1, tmp7, tmp8, tmp12);
  }

  if (block3.is_used()) {
    TNode<Context> tmp13;
    TNode<Object> tmp14;
    TNode<Object> tmp15;
    ca_.Bind(&block3, &tmp13, &tmp14, &tmp15);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1769);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1770);
    ca_.Goto(&block1, tmp13, tmp14, ca_.UncheckedCast<Object>(tmp15));
  }

  if (block1.is_used()) {
    TNode<Context> tmp16;
    TNode<Object> tmp17;
    TNode<Object> tmp18;
    ca_.Bind(&block1, &tmp16, &tmp17, &tmp18);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1763);
    ca_.Goto(&block6, tmp16, tmp17, tmp18);
  }

    TNode<Context> tmp19;
    TNode<Object> tmp20;
    TNode<Object> tmp21;
    ca_.Bind(&block6, &tmp19, &tmp20, &tmp21);
  return TNode<Object>{tmp21};
}

TNode<BoolT> ElementsKindNotEqual_72(compiler::CodeAssemblerState* state_, TNode<Int32T> p_k1, TNode<Int32T> p_k2) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Int32T, Int32T> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Int32T, Int32T, BoolT> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Int32T, Int32T, BoolT> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_k1, p_k2);

  if (block0.is_used()) {
    TNode<Int32T> tmp0;
    TNode<Int32T> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1820);
    TNode<BoolT> tmp2;
    USE(tmp2);
    tmp2 = CodeStubAssembler(state_).ElementsKindEqual(TNode<Int32T>{tmp0}, TNode<Int32T>{tmp1});
    TNode<BoolT> tmp3;
    USE(tmp3);
    tmp3 = CodeStubAssembler(state_).Word32BinaryNot(TNode<BoolT>{tmp2});
    ca_.Goto(&block1, tmp0, tmp1, tmp3);
  }

  if (block1.is_used()) {
    TNode<Int32T> tmp4;
    TNode<Int32T> tmp5;
    TNode<BoolT> tmp6;
    ca_.Bind(&block1, &tmp4, &tmp5, &tmp6);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1818);
    ca_.Goto(&block2, tmp4, tmp5, tmp6);
  }

    TNode<Int32T> tmp7;
    TNode<Int32T> tmp8;
    TNode<BoolT> tmp9;
    ca_.Bind(&block2, &tmp7, &tmp8, &tmp9);
  return TNode<BoolT>{tmp9};
}

TNode<BoolT> IsNumberEqual_73(compiler::CodeAssemblerState* state_, TNode<Number> p_a, TNode<Number> p_b) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Number, Number> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Number, Number, Number, Number> block6(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Number, Number, Number, Number> block7(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Number, Number> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Number, Number> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Number, Number, BoolT> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Number, Number, BoolT> block8(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_a, p_b);

  if (block0.is_used()) {
    TNode<Number> tmp0;
    TNode<Number> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1862);
    compiler::CodeAssemblerLabel label0(&ca_);
    compiler::CodeAssemblerLabel label1(&ca_);
    CodeStubAssembler(state_).BranchIfNumberEqual(TNode<Number>{tmp0}, TNode<Number>{tmp1}, &label0, &label1);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block6, tmp0, tmp1, tmp0, tmp1);
    }
    if (label1.is_used()) {
      ca_.Bind(&label1);
      ca_.Goto(&block7, tmp0, tmp1, tmp0, tmp1);
    }
  }

  if (block6.is_used()) {
    TNode<Number> tmp2;
    TNode<Number> tmp3;
    TNode<Number> tmp4;
    TNode<Number> tmp5;
    ca_.Bind(&block6, &tmp2, &tmp3, &tmp4, &tmp5);
    ca_.Goto(&block5, tmp2, tmp3);
  }

  if (block7.is_used()) {
    TNode<Number> tmp6;
    TNode<Number> tmp7;
    TNode<Number> tmp8;
    TNode<Number> tmp9;
    ca_.Bind(&block7, &tmp6, &tmp7, &tmp8, &tmp9);
    ca_.Goto(&block3, tmp6, tmp7);
  }

  if (block5.is_used()) {
    TNode<Number> tmp10;
    TNode<Number> tmp11;
    ca_.Bind(&block5, &tmp10, &tmp11);
    TNode<BoolT> tmp12;
    USE(tmp12);
    tmp12 = FromConstexpr6ATbool16ATconstexpr_bool_167(state_, true);
    ca_.Goto(&block1, tmp10, tmp11, tmp12);
  }

  if (block3.is_used()) {
    TNode<Number> tmp13;
    TNode<Number> tmp14;
    ca_.Bind(&block3, &tmp13, &tmp14);
    TNode<BoolT> tmp15;
    USE(tmp15);
    tmp15 = FromConstexpr6ATbool16ATconstexpr_bool_167(state_, false);
    ca_.Goto(&block1, tmp13, tmp14, tmp15);
  }

  if (block1.is_used()) {
    TNode<Number> tmp16;
    TNode<Number> tmp17;
    TNode<BoolT> tmp18;
    ca_.Bind(&block1, &tmp16, &tmp17, &tmp18);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1861);
    ca_.Goto(&block8, tmp16, tmp17, tmp18);
  }

    TNode<Number> tmp19;
    TNode<Number> tmp20;
    TNode<BoolT> tmp21;
    ca_.Bind(&block8, &tmp19, &tmp20, &tmp21);
  return TNode<BoolT>{tmp21};
}

TNode<BoolT> IsNumberNotEqual_74(compiler::CodeAssemblerState* state_, TNode<Number> p_a, TNode<Number> p_b) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Number, Number> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Number, Number, BoolT> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Number, Number, BoolT> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_a, p_b);

  if (block0.is_used()) {
    TNode<Number> tmp0;
    TNode<Number> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1865);
    TNode<BoolT> tmp2;
    USE(tmp2);
    tmp2 = IsNumberEqual_73(state_, TNode<Number>{tmp0}, TNode<Number>{tmp1});
    TNode<BoolT> tmp3;
    USE(tmp3);
    tmp3 = CodeStubAssembler(state_).Word32BinaryNot(TNode<BoolT>{tmp2});
    ca_.Goto(&block1, tmp0, tmp1, tmp3);
  }

  if (block1.is_used()) {
    TNode<Number> tmp4;
    TNode<Number> tmp5;
    TNode<BoolT> tmp6;
    ca_.Bind(&block1, &tmp4, &tmp5, &tmp6);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1864);
    ca_.Goto(&block2, tmp4, tmp5, tmp6);
  }

    TNode<Number> tmp7;
    TNode<Number> tmp8;
    TNode<BoolT> tmp9;
    ca_.Bind(&block2, &tmp7, &tmp8, &tmp9);
  return TNode<BoolT>{tmp9};
}

TNode<BoolT> NumberIsLessThan_75(compiler::CodeAssemblerState* state_, TNode<Number> p_a, TNode<Number> p_b) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Number, Number> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Number, Number, Number, Number> block6(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Number, Number, Number, Number> block7(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Number, Number> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Number, Number> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Number, Number, BoolT> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Number, Number, BoolT> block8(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_a, p_b);

  if (block0.is_used()) {
    TNode<Number> tmp0;
    TNode<Number> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1870);
    compiler::CodeAssemblerLabel label0(&ca_);
    compiler::CodeAssemblerLabel label1(&ca_);
    CodeStubAssembler(state_).BranchIfNumberLessThan(TNode<Number>{tmp0}, TNode<Number>{tmp1}, &label0, &label1);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block6, tmp0, tmp1, tmp0, tmp1);
    }
    if (label1.is_used()) {
      ca_.Bind(&label1);
      ca_.Goto(&block7, tmp0, tmp1, tmp0, tmp1);
    }
  }

  if (block6.is_used()) {
    TNode<Number> tmp2;
    TNode<Number> tmp3;
    TNode<Number> tmp4;
    TNode<Number> tmp5;
    ca_.Bind(&block6, &tmp2, &tmp3, &tmp4, &tmp5);
    ca_.Goto(&block5, tmp2, tmp3);
  }

  if (block7.is_used()) {
    TNode<Number> tmp6;
    TNode<Number> tmp7;
    TNode<Number> tmp8;
    TNode<Number> tmp9;
    ca_.Bind(&block7, &tmp6, &tmp7, &tmp8, &tmp9);
    ca_.Goto(&block3, tmp6, tmp7);
  }

  if (block5.is_used()) {
    TNode<Number> tmp10;
    TNode<Number> tmp11;
    ca_.Bind(&block5, &tmp10, &tmp11);
    TNode<BoolT> tmp12;
    USE(tmp12);
    tmp12 = FromConstexpr6ATbool16ATconstexpr_bool_167(state_, true);
    ca_.Goto(&block1, tmp10, tmp11, tmp12);
  }

  if (block3.is_used()) {
    TNode<Number> tmp13;
    TNode<Number> tmp14;
    ca_.Bind(&block3, &tmp13, &tmp14);
    TNode<BoolT> tmp15;
    USE(tmp15);
    tmp15 = FromConstexpr6ATbool16ATconstexpr_bool_167(state_, false);
    ca_.Goto(&block1, tmp13, tmp14, tmp15);
  }

  if (block1.is_used()) {
    TNode<Number> tmp16;
    TNode<Number> tmp17;
    TNode<BoolT> tmp18;
    ca_.Bind(&block1, &tmp16, &tmp17, &tmp18);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1869);
    ca_.Goto(&block8, tmp16, tmp17, tmp18);
  }

    TNode<Number> tmp19;
    TNode<Number> tmp20;
    TNode<BoolT> tmp21;
    ca_.Bind(&block8, &tmp19, &tmp20, &tmp21);
  return TNode<BoolT>{tmp21};
}

TNode<BoolT> NumberIsLessThanOrEqual_76(compiler::CodeAssemblerState* state_, TNode<Number> p_a, TNode<Number> p_b) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Number, Number> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Number, Number, Number, Number> block6(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Number, Number, Number, Number> block7(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Number, Number> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Number, Number> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Number, Number, BoolT> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Number, Number, BoolT> block8(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_a, p_b);

  if (block0.is_used()) {
    TNode<Number> tmp0;
    TNode<Number> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1875);
    compiler::CodeAssemblerLabel label0(&ca_);
    compiler::CodeAssemblerLabel label1(&ca_);
    CodeStubAssembler(state_).BranchIfNumberLessThanOrEqual(TNode<Number>{tmp0}, TNode<Number>{tmp1}, &label0, &label1);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block6, tmp0, tmp1, tmp0, tmp1);
    }
    if (label1.is_used()) {
      ca_.Bind(&label1);
      ca_.Goto(&block7, tmp0, tmp1, tmp0, tmp1);
    }
  }

  if (block6.is_used()) {
    TNode<Number> tmp2;
    TNode<Number> tmp3;
    TNode<Number> tmp4;
    TNode<Number> tmp5;
    ca_.Bind(&block6, &tmp2, &tmp3, &tmp4, &tmp5);
    ca_.Goto(&block5, tmp2, tmp3);
  }

  if (block7.is_used()) {
    TNode<Number> tmp6;
    TNode<Number> tmp7;
    TNode<Number> tmp8;
    TNode<Number> tmp9;
    ca_.Bind(&block7, &tmp6, &tmp7, &tmp8, &tmp9);
    ca_.Goto(&block3, tmp6, tmp7);
  }

  if (block5.is_used()) {
    TNode<Number> tmp10;
    TNode<Number> tmp11;
    ca_.Bind(&block5, &tmp10, &tmp11);
    TNode<BoolT> tmp12;
    USE(tmp12);
    tmp12 = FromConstexpr6ATbool16ATconstexpr_bool_167(state_, true);
    ca_.Goto(&block1, tmp10, tmp11, tmp12);
  }

  if (block3.is_used()) {
    TNode<Number> tmp13;
    TNode<Number> tmp14;
    ca_.Bind(&block3, &tmp13, &tmp14);
    TNode<BoolT> tmp15;
    USE(tmp15);
    tmp15 = FromConstexpr6ATbool16ATconstexpr_bool_167(state_, false);
    ca_.Goto(&block1, tmp13, tmp14, tmp15);
  }

  if (block1.is_used()) {
    TNode<Number> tmp16;
    TNode<Number> tmp17;
    TNode<BoolT> tmp18;
    ca_.Bind(&block1, &tmp16, &tmp17, &tmp18);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1874);
    ca_.Goto(&block8, tmp16, tmp17, tmp18);
  }

    TNode<Number> tmp19;
    TNode<Number> tmp20;
    TNode<BoolT> tmp21;
    ca_.Bind(&block8, &tmp19, &tmp20, &tmp21);
  return TNode<BoolT>{tmp21};
}

TNode<BoolT> NumberIsGreaterThan_77(compiler::CodeAssemblerState* state_, TNode<Number> p_a, TNode<Number> p_b) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Number, Number> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Number, Number, BoolT> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Number, Number, BoolT> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_a, p_b);

  if (block0.is_used()) {
    TNode<Number> tmp0;
    TNode<Number> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1879);
    TNode<BoolT> tmp2;
    USE(tmp2);
    tmp2 = NumberIsLessThan_75(state_, TNode<Number>{tmp1}, TNode<Number>{tmp0});
    ca_.Goto(&block1, tmp0, tmp1, tmp2);
  }

  if (block1.is_used()) {
    TNode<Number> tmp3;
    TNode<Number> tmp4;
    TNode<BoolT> tmp5;
    ca_.Bind(&block1, &tmp3, &tmp4, &tmp5);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1878);
    ca_.Goto(&block2, tmp3, tmp4, tmp5);
  }

    TNode<Number> tmp6;
    TNode<Number> tmp7;
    TNode<BoolT> tmp8;
    ca_.Bind(&block2, &tmp6, &tmp7, &tmp8);
  return TNode<BoolT>{tmp8};
}

TNode<BoolT> NumberIsGreaterThanOrEqual_78(compiler::CodeAssemblerState* state_, TNode<Number> p_a, TNode<Number> p_b) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Number, Number> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Number, Number, BoolT> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Number, Number, BoolT> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_a, p_b);

  if (block0.is_used()) {
    TNode<Number> tmp0;
    TNode<Number> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1882);
    TNode<BoolT> tmp2;
    USE(tmp2);
    tmp2 = NumberIsLessThanOrEqual_76(state_, TNode<Number>{tmp1}, TNode<Number>{tmp0});
    ca_.Goto(&block1, tmp0, tmp1, tmp2);
  }

  if (block1.is_used()) {
    TNode<Number> tmp3;
    TNode<Number> tmp4;
    TNode<BoolT> tmp5;
    ca_.Bind(&block1, &tmp3, &tmp4, &tmp5);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1881);
    ca_.Goto(&block2, tmp3, tmp4, tmp5);
  }

    TNode<Number> tmp6;
    TNode<Number> tmp7;
    TNode<BoolT> tmp8;
    ca_.Bind(&block2, &tmp6, &tmp7, &tmp8);
  return TNode<BoolT>{tmp8};
}

TNode<BoolT> Float64IsNaN_79(compiler::CodeAssemblerState* state_, TNode<Float64T> p_n) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Float64T> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Float64T, Float64T> block6(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Float64T, Float64T> block7(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Float64T> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Float64T> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Float64T, BoolT> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Float64T, BoolT> block8(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_n);

  if (block0.is_used()) {
    TNode<Float64T> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1888);
    compiler::CodeAssemblerLabel label0(&ca_);
    compiler::CodeAssemblerLabel label1(&ca_);
    CodeStubAssembler(state_).BranchIfFloat64IsNaN(TNode<Float64T>{tmp0}, &label0, &label1);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block6, tmp0, tmp0);
    }
    if (label1.is_used()) {
      ca_.Bind(&label1);
      ca_.Goto(&block7, tmp0, tmp0);
    }
  }

  if (block6.is_used()) {
    TNode<Float64T> tmp1;
    TNode<Float64T> tmp2;
    ca_.Bind(&block6, &tmp1, &tmp2);
    ca_.Goto(&block5, tmp1);
  }

  if (block7.is_used()) {
    TNode<Float64T> tmp3;
    TNode<Float64T> tmp4;
    ca_.Bind(&block7, &tmp3, &tmp4);
    ca_.Goto(&block3, tmp3);
  }

  if (block5.is_used()) {
    TNode<Float64T> tmp5;
    ca_.Bind(&block5, &tmp5);
    TNode<BoolT> tmp6;
    USE(tmp6);
    tmp6 = FromConstexpr6ATbool16ATconstexpr_bool_167(state_, true);
    ca_.Goto(&block1, tmp5, tmp6);
  }

  if (block3.is_used()) {
    TNode<Float64T> tmp7;
    ca_.Bind(&block3, &tmp7);
    TNode<BoolT> tmp8;
    USE(tmp8);
    tmp8 = FromConstexpr6ATbool16ATconstexpr_bool_167(state_, false);
    ca_.Goto(&block1, tmp7, tmp8);
  }

  if (block1.is_used()) {
    TNode<Float64T> tmp9;
    TNode<BoolT> tmp10;
    ca_.Bind(&block1, &tmp9, &tmp10);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1887);
    ca_.Goto(&block8, tmp9, tmp10);
  }

    TNode<Float64T> tmp11;
    TNode<BoolT> tmp12;
    ca_.Bind(&block8, &tmp11, &tmp12);
  return TNode<BoolT>{tmp12};
}

TNode<Number> Min_80(compiler::CodeAssemblerState* state_, TNode<Number> p_x, TNode<Number> p_y) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Number, Number> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Number, Number, Number> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Number, Number, Number> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_x, p_y);

  if (block0.is_used()) {
    TNode<Number> tmp0;
    TNode<Number> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1980);
    TNode<Number> tmp2;
    USE(tmp2);
    tmp2 = CodeStubAssembler(state_).NumberMin(TNode<Number>{tmp0}, TNode<Number>{tmp1});
    ca_.Goto(&block1, tmp0, tmp1, tmp2);
  }

  if (block1.is_used()) {
    TNode<Number> tmp3;
    TNode<Number> tmp4;
    TNode<Number> tmp5;
    ca_.Bind(&block1, &tmp3, &tmp4, &tmp5);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1979);
    ca_.Goto(&block2, tmp3, tmp4, tmp5);
  }

    TNode<Number> tmp6;
    TNode<Number> tmp7;
    TNode<Number> tmp8;
    ca_.Bind(&block2, &tmp6, &tmp7, &tmp8);
  return TNode<Number>{tmp8};
}

TNode<Number> Max_81(compiler::CodeAssemblerState* state_, TNode<Number> p_x, TNode<Number> p_y) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Number, Number> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Number, Number, Number> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Number, Number, Number> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_x, p_y);

  if (block0.is_used()) {
    TNode<Number> tmp0;
    TNode<Number> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1983);
    TNode<Number> tmp2;
    USE(tmp2);
    tmp2 = CodeStubAssembler(state_).NumberMax(TNode<Number>{tmp0}, TNode<Number>{tmp1});
    ca_.Goto(&block1, tmp0, tmp1, tmp2);
  }

  if (block1.is_used()) {
    TNode<Number> tmp3;
    TNode<Number> tmp4;
    TNode<Number> tmp5;
    ca_.Bind(&block1, &tmp3, &tmp4, &tmp5);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1982);
    ca_.Goto(&block2, tmp3, tmp4, tmp5);
  }

    TNode<Number> tmp6;
    TNode<Number> tmp7;
    TNode<Number> tmp8;
    ca_.Bind(&block2, &tmp6, &tmp7, &tmp8);
  return TNode<Number>{tmp8};
}

TNode<String> StringAdd_82(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<String> p_a, TNode<String> p_b) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Context, String, String> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, String, String, String> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, String, String, String> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_context, p_a, p_b);

  if (block0.is_used()) {
    TNode<Context> tmp0;
    TNode<String> tmp1;
    TNode<String> tmp2;
    ca_.Bind(&block0, &tmp0, &tmp1, &tmp2);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2018);
    TNode<String> tmp3;
    tmp3 = TORQUE_CAST(CodeStubAssembler(state_).CallBuiltin(Builtins::kStringAdd_CheckNone, tmp0, tmp1, tmp2));
    USE(tmp3);
    ca_.Goto(&block1, tmp0, tmp1, tmp2, tmp3);
  }

  if (block1.is_used()) {
    TNode<Context> tmp4;
    TNode<String> tmp5;
    TNode<String> tmp6;
    TNode<String> tmp7;
    ca_.Bind(&block1, &tmp4, &tmp5, &tmp6, &tmp7);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2016);
    ca_.Goto(&block2, tmp4, tmp5, tmp6, tmp7);
  }

    TNode<Context> tmp8;
    TNode<String> tmp9;
    TNode<String> tmp10;
    TNode<String> tmp11;
    ca_.Bind(&block2, &tmp8, &tmp9, &tmp10, &tmp11);
  return TNode<String>{tmp11};
}

TNode<Smi> Cast5ATSmi_83(compiler::CodeAssemblerState* state_, TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object, Smi> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Smi> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<Object> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2074);
    TNode<Smi> tmp1;
    USE(tmp1);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp1 = CodeStubAssembler(state_).TaggedToSmi(TNode<Object>{tmp0}, &label0);
    ca_.Goto(&block3, tmp0, tmp0, tmp1);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block4, tmp0, tmp0);
    }
  }

  if (block4.is_used()) {
    TNode<Object> tmp2;
    TNode<Object> tmp3;
    ca_.Bind(&block4, &tmp2, &tmp3);
    ca_.Goto(&block1);
  }

  if (block3.is_used()) {
    TNode<Object> tmp4;
    TNode<Object> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block3, &tmp4, &tmp5, &tmp6);
    ca_.Goto(&block2, tmp4, tmp6);
  }

  if (block2.is_used()) {
    TNode<Object> tmp7;
    TNode<Smi> tmp8;
    ca_.Bind(&block2, &tmp7, &tmp8);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2072);
    ca_.Goto(&block5, tmp7, tmp8);
  }

  if (block1.is_used()) {
    ca_.Bind(&block1);
    ca_.Goto(label_CastError);
  }

    TNode<Object> tmp9;
    TNode<Smi> tmp10;
    ca_.Bind(&block5, &tmp9, &tmp10);
  return TNode<Smi>{tmp10};
}

TNode<Smi> Cast13ATPositiveSmi_84(compiler::CodeAssemblerState* state_, TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object, Smi> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Smi> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<Object> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2079);
    TNode<Smi> tmp1;
    USE(tmp1);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp1 = CodeStubAssembler(state_).TaggedToPositiveSmi(TNode<Object>{tmp0}, &label0);
    ca_.Goto(&block3, tmp0, tmp0, tmp1);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block4, tmp0, tmp0);
    }
  }

  if (block4.is_used()) {
    TNode<Object> tmp2;
    TNode<Object> tmp3;
    ca_.Bind(&block4, &tmp2, &tmp3);
    ca_.Goto(&block1);
  }

  if (block3.is_used()) {
    TNode<Object> tmp4;
    TNode<Object> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block3, &tmp4, &tmp5, &tmp6);
    ca_.Goto(&block2, tmp4, tmp6);
  }

  if (block2.is_used()) {
    TNode<Object> tmp7;
    TNode<Smi> tmp8;
    ca_.Bind(&block2, &tmp7, &tmp8);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2077);
    ca_.Goto(&block5, tmp7, tmp8);
  }

  if (block1.is_used()) {
    ca_.Bind(&block1);
    ca_.Goto(label_CastError);
  }

    TNode<Object> tmp9;
    TNode<Smi> tmp10;
    ca_.Bind(&block5, &tmp9, &tmp10);
  return TNode<Smi>{tmp10};
}

TNode<Number> Cast20UT5ATSmi10HeapNumber_85(compiler::CodeAssemblerState* state_, TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object, Number> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Number> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Number> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<Object> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2084);
    TNode<Number> tmp1;
    USE(tmp1);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp1 = CodeStubAssembler(state_).TaggedToNumber(TNode<Object>{tmp0}, &label0);
    ca_.Goto(&block3, tmp0, tmp0, tmp1);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block4, tmp0, tmp0);
    }
  }

  if (block4.is_used()) {
    TNode<Object> tmp2;
    TNode<Object> tmp3;
    ca_.Bind(&block4, &tmp2, &tmp3);
    ca_.Goto(&block1);
  }

  if (block3.is_used()) {
    TNode<Object> tmp4;
    TNode<Object> tmp5;
    TNode<Number> tmp6;
    ca_.Bind(&block3, &tmp4, &tmp5, &tmp6);
    ca_.Goto(&block2, tmp4, tmp6);
  }

  if (block2.is_used()) {
    TNode<Object> tmp7;
    TNode<Number> tmp8;
    ca_.Bind(&block2, &tmp7, &tmp8);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2082);
    ca_.Goto(&block5, tmp7, tmp8);
  }

  if (block1.is_used()) {
    ca_.Bind(&block1);
    ca_.Goto(label_CastError);
  }

    TNode<Object> tmp9;
    TNode<Number> tmp10;
    ca_.Bind(&block5, &tmp9, &tmp10);
  return TNode<Number>{tmp10};
}

TNode<Oddball> Cast11ATUndefined_86(compiler::CodeAssemblerState* state_, TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Oddball> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Oddball> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<Object> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2089);
    TNode<Oddball> tmp1;
    USE(tmp1);
    tmp1 = Undefined_64(state_);
    TNode<BoolT> tmp2;
    USE(tmp2);
    tmp2 = CodeStubAssembler(state_).TaggedNotEqual(TNode<Object>{tmp0}, TNode<HeapObject>{tmp1});
    ca_.Branch(tmp2, &block3, &block4, tmp0);
  }

  if (block3.is_used()) {
    TNode<Object> tmp3;
    ca_.Bind(&block3, &tmp3);
    ca_.Goto(&block1);
  }

  if (block4.is_used()) {
    TNode<Object> tmp4;
    ca_.Bind(&block4, &tmp4);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2090);
    TNode<Oddball> tmp5;
    USE(tmp5);
    tmp5 = TORQUE_CAST(TNode<Object>{tmp4});
    ca_.Goto(&block2, tmp4, tmp5);
  }

  if (block2.is_used()) {
    TNode<Object> tmp6;
    TNode<Oddball> tmp7;
    ca_.Bind(&block2, &tmp6, &tmp7);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2087);
    ca_.Goto(&block5, tmp6, tmp7);
  }

  if (block1.is_used()) {
    ca_.Bind(&block1);
    ca_.Goto(label_CastError);
  }

    TNode<Object> tmp8;
    TNode<Oddball> tmp9;
    ca_.Bind(&block5, &tmp8, &tmp9);
  return TNode<Oddball>{tmp9};
}

TNode<Numeric> Cast29UT8ATBigInt5ATSmi10HeapNumber_87(compiler::CodeAssemblerState* state_, TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object, Object> block6(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object, Object, Number> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object, HeapObject> block10(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object, HeapObject, BigInt> block9(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object> block8(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Numeric> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Numeric> block11(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<Object> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2094);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2095);
    TNode<Number> tmp1;
    USE(tmp1);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp1 = Cast20UT5ATSmi10HeapNumber_85(state_, TNode<Object>{tmp0}, &label0);
    ca_.Goto(&block5, tmp0, tmp0, tmp0, tmp1);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block6, tmp0, tmp0, tmp0);
    }
  }

  if (block6.is_used()) {
    TNode<Object> tmp2;
    TNode<Object> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block6, &tmp2, &tmp3, &tmp4);
    ca_.Goto(&block4, tmp2, tmp3);
  }

  if (block5.is_used()) {
    TNode<Object> tmp5;
    TNode<Object> tmp6;
    TNode<Object> tmp7;
    TNode<Number> tmp8;
    ca_.Bind(&block5, &tmp5, &tmp6, &tmp7, &tmp8);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2096);
    ca_.Goto(&block2, tmp5, tmp8);
  }

  if (block4.is_used()) {
    TNode<Object> tmp9;
    TNode<Object> tmp10;
    ca_.Bind(&block4, &tmp9, &tmp10);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2098);
    TNode<BigInt> tmp11;
    USE(tmp11);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp11 = Cast8ATBigInt_129(state_, TNode<HeapObject>{ca_.UncheckedCast<HeapObject>(tmp10)}, &label0);
    ca_.Goto(&block9, tmp9, tmp10, ca_.UncheckedCast<HeapObject>(tmp10), tmp11);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block10, tmp9, tmp10, ca_.UncheckedCast<HeapObject>(tmp10));
    }
  }

  if (block10.is_used()) {
    TNode<Object> tmp12;
    TNode<Object> tmp13;
    TNode<HeapObject> tmp14;
    ca_.Bind(&block10, &tmp12, &tmp13, &tmp14);
    ca_.Goto(&block8, tmp12, tmp13);
  }

  if (block9.is_used()) {
    TNode<Object> tmp15;
    TNode<Object> tmp16;
    TNode<HeapObject> tmp17;
    TNode<BigInt> tmp18;
    ca_.Bind(&block9, &tmp15, &tmp16, &tmp17, &tmp18);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2099);
    ca_.Goto(&block2, tmp15, tmp18);
  }

  if (block8.is_used()) {
    TNode<Object> tmp19;
    TNode<Object> tmp20;
    ca_.Bind(&block8, &tmp19, &tmp20);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2101);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2102);
    ca_.Goto(&block1);
  }

  if (block2.is_used()) {
    TNode<Object> tmp21;
    TNode<Numeric> tmp22;
    ca_.Bind(&block2, &tmp21, &tmp22);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2093);
    ca_.Goto(&block11, tmp21, tmp22);
  }

  if (block1.is_used()) {
    ca_.Bind(&block1);
    ca_.Goto(label_CastError);
  }

    TNode<Object> tmp23;
    TNode<Numeric> tmp24;
    ca_.Bind(&block11, &tmp23, &tmp24);
  return TNode<Numeric>{tmp24};
}

TNode<Oddball> Cast9ATTheHole_88(compiler::CodeAssemblerState* state_, TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Oddball> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Oddball> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<Object> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2108);
    TNode<Oddball> tmp1;
    USE(tmp1);
    tmp1 = TheHole_62(state_);
    TNode<BoolT> tmp2;
    USE(tmp2);
    tmp2 = CodeStubAssembler(state_).TaggedEqual(TNode<Object>{tmp0}, TNode<HeapObject>{tmp1});
    ca_.Branch(tmp2, &block3, &block4, tmp0);
  }

  if (block3.is_used()) {
    TNode<Object> tmp3;
    ca_.Bind(&block3, &tmp3);
    TNode<Oddball> tmp4;
    USE(tmp4);
    tmp4 = TORQUE_CAST(TNode<Object>{tmp3});
    ca_.Goto(&block2, tmp3, tmp4);
  }

  if (block4.is_used()) {
    TNode<Object> tmp5;
    ca_.Bind(&block4, &tmp5);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2109);
    ca_.Goto(&block1);
  }

  if (block2.is_used()) {
    TNode<Object> tmp6;
    TNode<Oddball> tmp7;
    ca_.Bind(&block2, &tmp6, &tmp7);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2107);
    ca_.Goto(&block5, tmp6, tmp7);
  }

  if (block1.is_used()) {
    ca_.Bind(&block1);
    ca_.Goto(label_CastError);
  }

    TNode<Object> tmp8;
    TNode<Oddball> tmp9;
    ca_.Bind(&block5, &tmp8, &tmp9);
  return TNode<Oddball>{tmp9};
}

TNode<Oddball> Cast9ATTheHole_89(compiler::CodeAssemblerState* state_, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, Object, Object> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, Object, Object, Oddball> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, Oddball> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, Oddball> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<HeapObject> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2113);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2114);
    TNode<Oddball> tmp1;
    USE(tmp1);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp1 = Cast9ATTheHole_88(state_, TNode<Object>{tmp0}, &label0);
    ca_.Goto(&block3, tmp0, tmp0, tmp0, tmp1);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block4, tmp0, tmp0, tmp0);
    }
  }

  if (block4.is_used()) {
    TNode<HeapObject> tmp2;
    TNode<Object> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block4, &tmp2, &tmp3, &tmp4);
    ca_.Goto(&block1);
  }

  if (block3.is_used()) {
    TNode<HeapObject> tmp5;
    TNode<Object> tmp6;
    TNode<Object> tmp7;
    TNode<Oddball> tmp8;
    ca_.Bind(&block3, &tmp5, &tmp6, &tmp7, &tmp8);
    ca_.Goto(&block2, tmp5, tmp8);
  }

  if (block2.is_used()) {
    TNode<HeapObject> tmp9;
    TNode<Oddball> tmp10;
    ca_.Bind(&block2, &tmp9, &tmp10);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2112);
    ca_.Goto(&block5, tmp9, tmp10);
  }

  if (block1.is_used()) {
    ca_.Bind(&block1);
    ca_.Goto(label_CastError);
  }

    TNode<HeapObject> tmp11;
    TNode<Oddball> tmp12;
    ca_.Bind(&block5, &tmp11, &tmp12);
  return TNode<Oddball>{tmp12};
}

TNode<Oddball> Cast6ATTrue_90(compiler::CodeAssemblerState* state_, TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Oddball> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Oddball> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<Object> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2118);
    TNode<Oddball> tmp1;
    USE(tmp1);
    tmp1 = True_65(state_);
    TNode<BoolT> tmp2;
    USE(tmp2);
    tmp2 = CodeStubAssembler(state_).TaggedEqual(TNode<Object>{tmp0}, TNode<HeapObject>{tmp1});
    ca_.Branch(tmp2, &block3, &block4, tmp0);
  }

  if (block3.is_used()) {
    TNode<Object> tmp3;
    ca_.Bind(&block3, &tmp3);
    TNode<Oddball> tmp4;
    USE(tmp4);
    tmp4 = TORQUE_CAST(TNode<Object>{tmp3});
    ca_.Goto(&block2, tmp3, tmp4);
  }

  if (block4.is_used()) {
    TNode<Object> tmp5;
    ca_.Bind(&block4, &tmp5);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2119);
    ca_.Goto(&block1);
  }

  if (block2.is_used()) {
    TNode<Object> tmp6;
    TNode<Oddball> tmp7;
    ca_.Bind(&block2, &tmp6, &tmp7);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2117);
    ca_.Goto(&block5, tmp6, tmp7);
  }

  if (block1.is_used()) {
    ca_.Bind(&block1);
    ca_.Goto(label_CastError);
  }

    TNode<Object> tmp8;
    TNode<Oddball> tmp9;
    ca_.Bind(&block5, &tmp8, &tmp9);
  return TNode<Oddball>{tmp9};
}

TNode<Oddball> Cast6ATTrue_91(compiler::CodeAssemblerState* state_, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, Object, Object> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, Object, Object, Oddball> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, Oddball> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, Oddball> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<HeapObject> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2123);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2124);
    TNode<Oddball> tmp1;
    USE(tmp1);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp1 = Cast6ATTrue_90(state_, TNode<Object>{tmp0}, &label0);
    ca_.Goto(&block3, tmp0, tmp0, tmp0, tmp1);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block4, tmp0, tmp0, tmp0);
    }
  }

  if (block4.is_used()) {
    TNode<HeapObject> tmp2;
    TNode<Object> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block4, &tmp2, &tmp3, &tmp4);
    ca_.Goto(&block1);
  }

  if (block3.is_used()) {
    TNode<HeapObject> tmp5;
    TNode<Object> tmp6;
    TNode<Object> tmp7;
    TNode<Oddball> tmp8;
    ca_.Bind(&block3, &tmp5, &tmp6, &tmp7, &tmp8);
    ca_.Goto(&block2, tmp5, tmp8);
  }

  if (block2.is_used()) {
    TNode<HeapObject> tmp9;
    TNode<Oddball> tmp10;
    ca_.Bind(&block2, &tmp9, &tmp10);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2122);
    ca_.Goto(&block5, tmp9, tmp10);
  }

  if (block1.is_used()) {
    ca_.Bind(&block1);
    ca_.Goto(label_CastError);
  }

    TNode<HeapObject> tmp11;
    TNode<Oddball> tmp12;
    ca_.Bind(&block5, &tmp11, &tmp12);
  return TNode<Oddball>{tmp12};
}

TNode<Oddball> Cast7ATFalse_92(compiler::CodeAssemblerState* state_, TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Oddball> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Oddball> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<Object> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2128);
    TNode<Oddball> tmp1;
    USE(tmp1);
    tmp1 = False_66(state_);
    TNode<BoolT> tmp2;
    USE(tmp2);
    tmp2 = CodeStubAssembler(state_).TaggedEqual(TNode<Object>{tmp0}, TNode<HeapObject>{tmp1});
    ca_.Branch(tmp2, &block3, &block4, tmp0);
  }

  if (block3.is_used()) {
    TNode<Object> tmp3;
    ca_.Bind(&block3, &tmp3);
    TNode<Oddball> tmp4;
    USE(tmp4);
    tmp4 = TORQUE_CAST(TNode<Object>{tmp3});
    ca_.Goto(&block2, tmp3, tmp4);
  }

  if (block4.is_used()) {
    TNode<Object> tmp5;
    ca_.Bind(&block4, &tmp5);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2129);
    ca_.Goto(&block1);
  }

  if (block2.is_used()) {
    TNode<Object> tmp6;
    TNode<Oddball> tmp7;
    ca_.Bind(&block2, &tmp6, &tmp7);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2127);
    ca_.Goto(&block5, tmp6, tmp7);
  }

  if (block1.is_used()) {
    ca_.Bind(&block1);
    ca_.Goto(label_CastError);
  }

    TNode<Object> tmp8;
    TNode<Oddball> tmp9;
    ca_.Bind(&block5, &tmp8, &tmp9);
  return TNode<Oddball>{tmp9};
}

TNode<Oddball> Cast7ATFalse_93(compiler::CodeAssemblerState* state_, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, Object, Object> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, Object, Object, Oddball> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, Oddball> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, Oddball> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<HeapObject> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2133);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2134);
    TNode<Oddball> tmp1;
    USE(tmp1);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp1 = Cast7ATFalse_92(state_, TNode<Object>{tmp0}, &label0);
    ca_.Goto(&block3, tmp0, tmp0, tmp0, tmp1);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block4, tmp0, tmp0, tmp0);
    }
  }

  if (block4.is_used()) {
    TNode<HeapObject> tmp2;
    TNode<Object> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block4, &tmp2, &tmp3, &tmp4);
    ca_.Goto(&block1);
  }

  if (block3.is_used()) {
    TNode<HeapObject> tmp5;
    TNode<Object> tmp6;
    TNode<Object> tmp7;
    TNode<Oddball> tmp8;
    ca_.Bind(&block3, &tmp5, &tmp6, &tmp7, &tmp8);
    ca_.Goto(&block2, tmp5, tmp8);
  }

  if (block2.is_used()) {
    TNode<HeapObject> tmp9;
    TNode<Oddball> tmp10;
    ca_.Bind(&block2, &tmp9, &tmp10);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2132);
    ca_.Goto(&block5, tmp9, tmp10);
  }

  if (block1.is_used()) {
    ca_.Bind(&block1);
    ca_.Goto(label_CastError);
  }

    TNode<HeapObject> tmp11;
    TNode<Oddball> tmp12;
    ca_.Bind(&block5, &tmp11, &tmp12);
  return TNode<Oddball>{tmp12};
}

TNode<Oddball> Cast17UT7ATFalse6ATTrue_94(compiler::CodeAssemblerState* state_, TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object, Object> block6(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object, Object, Oddball> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object, Object> block10(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object, Object, Oddball> block9(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object> block8(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Oddball> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Oddball> block11(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<Object> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2138);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2139);
    TNode<Oddball> tmp1;
    USE(tmp1);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp1 = Cast6ATTrue_90(state_, TNode<Object>{tmp0}, &label0);
    ca_.Goto(&block5, tmp0, tmp0, tmp0, tmp1);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block6, tmp0, tmp0, tmp0);
    }
  }

  if (block6.is_used()) {
    TNode<Object> tmp2;
    TNode<Object> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block6, &tmp2, &tmp3, &tmp4);
    ca_.Goto(&block4, tmp2, tmp3);
  }

  if (block5.is_used()) {
    TNode<Object> tmp5;
    TNode<Object> tmp6;
    TNode<Object> tmp7;
    TNode<Oddball> tmp8;
    ca_.Bind(&block5, &tmp5, &tmp6, &tmp7, &tmp8);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2140);
    ca_.Goto(&block2, tmp5, tmp8);
  }

  if (block4.is_used()) {
    TNode<Object> tmp9;
    TNode<Object> tmp10;
    ca_.Bind(&block4, &tmp9, &tmp10);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2142);
    TNode<Oddball> tmp11;
    USE(tmp11);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp11 = Cast7ATFalse_92(state_, TNode<Object>{ca_.UncheckedCast<Object>(tmp10)}, &label0);
    ca_.Goto(&block9, tmp9, tmp10, ca_.UncheckedCast<Object>(tmp10), tmp11);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block10, tmp9, tmp10, ca_.UncheckedCast<Object>(tmp10));
    }
  }

  if (block10.is_used()) {
    TNode<Object> tmp12;
    TNode<Object> tmp13;
    TNode<Object> tmp14;
    ca_.Bind(&block10, &tmp12, &tmp13, &tmp14);
    ca_.Goto(&block8, tmp12, tmp13);
  }

  if (block9.is_used()) {
    TNode<Object> tmp15;
    TNode<Object> tmp16;
    TNode<Object> tmp17;
    TNode<Oddball> tmp18;
    ca_.Bind(&block9, &tmp15, &tmp16, &tmp17, &tmp18);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2143);
    ca_.Goto(&block2, tmp15, tmp18);
  }

  if (block8.is_used()) {
    TNode<Object> tmp19;
    TNode<Object> tmp20;
    ca_.Bind(&block8, &tmp19, &tmp20);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2145);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2146);
    ca_.Goto(&block1);
  }

  if (block2.is_used()) {
    TNode<Object> tmp21;
    TNode<Oddball> tmp22;
    ca_.Bind(&block2, &tmp21, &tmp22);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2137);
    ca_.Goto(&block11, tmp21, tmp22);
  }

  if (block1.is_used()) {
    ca_.Bind(&block1);
    ca_.Goto(label_CastError);
  }

    TNode<Object> tmp23;
    TNode<Oddball> tmp24;
    ca_.Bind(&block11, &tmp23, &tmp24);
  return TNode<Oddball>{tmp24};
}

TNode<Oddball> Cast17UT7ATFalse6ATTrue_95(compiler::CodeAssemblerState* state_, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, Object, Object> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, Object, Object, Oddball> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, Oddball> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, Oddball> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<HeapObject> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2152);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2153);
    TNode<Oddball> tmp1;
    USE(tmp1);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp1 = Cast17UT7ATFalse6ATTrue_94(state_, TNode<Object>{tmp0}, &label0);
    ca_.Goto(&block3, tmp0, tmp0, tmp0, tmp1);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block4, tmp0, tmp0, tmp0);
    }
  }

  if (block4.is_used()) {
    TNode<HeapObject> tmp2;
    TNode<Object> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block4, &tmp2, &tmp3, &tmp4);
    ca_.Goto(&block1);
  }

  if (block3.is_used()) {
    TNode<HeapObject> tmp5;
    TNode<Object> tmp6;
    TNode<Object> tmp7;
    TNode<Oddball> tmp8;
    ca_.Bind(&block3, &tmp5, &tmp6, &tmp7, &tmp8);
    ca_.Goto(&block2, tmp5, tmp8);
  }

  if (block2.is_used()) {
    TNode<HeapObject> tmp9;
    TNode<Oddball> tmp10;
    ca_.Bind(&block2, &tmp9, &tmp10);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2151);
    ca_.Goto(&block5, tmp9, tmp10);
  }

  if (block1.is_used()) {
    ca_.Bind(&block1);
    ca_.Goto(label_CastError);
  }

    TNode<HeapObject> tmp11;
    TNode<Oddball> tmp12;
    ca_.Bind(&block5, &tmp11, &tmp12);
  return TNode<Oddball>{tmp12};
}

TNode<Object> Cast78UT8ATBigInt7ATFalse6ATNull5ATSmi6ATTrue11ATUndefined10HeapNumber6String6Symbol_96(compiler::CodeAssemblerState* state_, TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object, Object> block6(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object, Object, Numeric> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object, HeapObject> block10(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object, HeapObject, String> block9(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object> block8(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object, HeapObject> block14(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object, HeapObject, Symbol> block13(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object> block12(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object, HeapObject> block18(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object, HeapObject, Oddball> block17(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object> block16(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object, HeapObject> block22(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object, HeapObject, Oddball> block21(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object> block20(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object, HeapObject> block26(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object, HeapObject, Oddball> block25(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object> block24(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object> block27(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<Object> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2160);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2161);
    TNode<Numeric> tmp1;
    USE(tmp1);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp1 = Cast29UT8ATBigInt5ATSmi10HeapNumber_87(state_, TNode<Object>{tmp0}, &label0);
    ca_.Goto(&block5, tmp0, tmp0, tmp0, tmp1);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block6, tmp0, tmp0, tmp0);
    }
  }

  if (block6.is_used()) {
    TNode<Object> tmp2;
    TNode<Object> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block6, &tmp2, &tmp3, &tmp4);
    ca_.Goto(&block4, tmp2, tmp3);
  }

  if (block5.is_used()) {
    TNode<Object> tmp5;
    TNode<Object> tmp6;
    TNode<Object> tmp7;
    TNode<Numeric> tmp8;
    ca_.Bind(&block5, &tmp5, &tmp6, &tmp7, &tmp8);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2162);
    ca_.Goto(&block2, tmp5, tmp8);
  }

  if (block4.is_used()) {
    TNode<Object> tmp9;
    TNode<Object> tmp10;
    ca_.Bind(&block4, &tmp9, &tmp10);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2164);
    TNode<String> tmp11;
    USE(tmp11);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp11 = Cast6String_119(state_, TNode<HeapObject>{ca_.UncheckedCast<HeapObject>(tmp10)}, &label0);
    ca_.Goto(&block9, tmp9, tmp10, ca_.UncheckedCast<HeapObject>(tmp10), tmp11);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block10, tmp9, tmp10, ca_.UncheckedCast<HeapObject>(tmp10));
    }
  }

  if (block10.is_used()) {
    TNode<Object> tmp12;
    TNode<Object> tmp13;
    TNode<HeapObject> tmp14;
    ca_.Bind(&block10, &tmp12, &tmp13, &tmp14);
    ca_.Goto(&block8, tmp12, tmp13);
  }

  if (block9.is_used()) {
    TNode<Object> tmp15;
    TNode<Object> tmp16;
    TNode<HeapObject> tmp17;
    TNode<String> tmp18;
    ca_.Bind(&block9, &tmp15, &tmp16, &tmp17, &tmp18);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2165);
    ca_.Goto(&block2, tmp15, tmp18);
  }

  if (block8.is_used()) {
    TNode<Object> tmp19;
    TNode<Object> tmp20;
    ca_.Bind(&block8, &tmp19, &tmp20);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2167);
    TNode<Symbol> tmp21;
    USE(tmp21);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp21 = Cast6Symbol_121(state_, TNode<HeapObject>{ca_.UncheckedCast<HeapObject>(tmp20)}, &label0);
    ca_.Goto(&block13, tmp19, tmp20, ca_.UncheckedCast<HeapObject>(tmp20), tmp21);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block14, tmp19, tmp20, ca_.UncheckedCast<HeapObject>(tmp20));
    }
  }

  if (block14.is_used()) {
    TNode<Object> tmp22;
    TNode<Object> tmp23;
    TNode<HeapObject> tmp24;
    ca_.Bind(&block14, &tmp22, &tmp23, &tmp24);
    ca_.Goto(&block12, tmp22, tmp23);
  }

  if (block13.is_used()) {
    TNode<Object> tmp25;
    TNode<Object> tmp26;
    TNode<HeapObject> tmp27;
    TNode<Symbol> tmp28;
    ca_.Bind(&block13, &tmp25, &tmp26, &tmp27, &tmp28);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2168);
    ca_.Goto(&block2, tmp25, tmp28);
  }

  if (block12.is_used()) {
    TNode<Object> tmp29;
    TNode<Object> tmp30;
    ca_.Bind(&block12, &tmp29, &tmp30);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2170);
    TNode<Oddball> tmp31;
    USE(tmp31);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp31 = Cast17UT7ATFalse6ATTrue_95(state_, TNode<HeapObject>{ca_.UncheckedCast<HeapObject>(tmp30)}, &label0);
    ca_.Goto(&block17, tmp29, tmp30, ca_.UncheckedCast<HeapObject>(tmp30), tmp31);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block18, tmp29, tmp30, ca_.UncheckedCast<HeapObject>(tmp30));
    }
  }

  if (block18.is_used()) {
    TNode<Object> tmp32;
    TNode<Object> tmp33;
    TNode<HeapObject> tmp34;
    ca_.Bind(&block18, &tmp32, &tmp33, &tmp34);
    ca_.Goto(&block16, tmp32, tmp33);
  }

  if (block17.is_used()) {
    TNode<Object> tmp35;
    TNode<Object> tmp36;
    TNode<HeapObject> tmp37;
    TNode<Oddball> tmp38;
    ca_.Bind(&block17, &tmp35, &tmp36, &tmp37, &tmp38);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2171);
    ca_.Goto(&block2, tmp35, tmp38);
  }

  if (block16.is_used()) {
    TNode<Object> tmp39;
    TNode<Object> tmp40;
    ca_.Bind(&block16, &tmp39, &tmp40);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2173);
    TNode<Oddball> tmp41;
    USE(tmp41);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp41 = Cast11ATUndefined_102(state_, TNode<HeapObject>{ca_.UncheckedCast<HeapObject>(tmp40)}, &label0);
    ca_.Goto(&block21, tmp39, tmp40, ca_.UncheckedCast<HeapObject>(tmp40), tmp41);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block22, tmp39, tmp40, ca_.UncheckedCast<HeapObject>(tmp40));
    }
  }

  if (block22.is_used()) {
    TNode<Object> tmp42;
    TNode<Object> tmp43;
    TNode<HeapObject> tmp44;
    ca_.Bind(&block22, &tmp42, &tmp43, &tmp44);
    ca_.Goto(&block20, tmp42, tmp43);
  }

  if (block21.is_used()) {
    TNode<Object> tmp45;
    TNode<Object> tmp46;
    TNode<HeapObject> tmp47;
    TNode<Oddball> tmp48;
    ca_.Bind(&block21, &tmp45, &tmp46, &tmp47, &tmp48);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2174);
    ca_.Goto(&block2, tmp45, tmp48);
  }

  if (block20.is_used()) {
    TNode<Object> tmp49;
    TNode<Object> tmp50;
    ca_.Bind(&block20, &tmp49, &tmp50);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2176);
    TNode<Oddball> tmp51;
    USE(tmp51);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp51 = Cast6ATNull_101(state_, TNode<HeapObject>{ca_.UncheckedCast<HeapObject>(tmp50)}, &label0);
    ca_.Goto(&block25, tmp49, tmp50, ca_.UncheckedCast<HeapObject>(tmp50), tmp51);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block26, tmp49, tmp50, ca_.UncheckedCast<HeapObject>(tmp50));
    }
  }

  if (block26.is_used()) {
    TNode<Object> tmp52;
    TNode<Object> tmp53;
    TNode<HeapObject> tmp54;
    ca_.Bind(&block26, &tmp52, &tmp53, &tmp54);
    ca_.Goto(&block24, tmp52, tmp53);
  }

  if (block25.is_used()) {
    TNode<Object> tmp55;
    TNode<Object> tmp56;
    TNode<HeapObject> tmp57;
    TNode<Oddball> tmp58;
    ca_.Bind(&block25, &tmp55, &tmp56, &tmp57, &tmp58);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2177);
    ca_.Goto(&block2, tmp55, tmp58);
  }

  if (block24.is_used()) {
    TNode<Object> tmp59;
    TNode<Object> tmp60;
    ca_.Bind(&block24, &tmp59, &tmp60);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2179);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2180);
    ca_.Goto(&block1);
  }

  if (block2.is_used()) {
    TNode<Object> tmp61;
    TNode<Object> tmp62;
    ca_.Bind(&block2, &tmp61, &tmp62);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2159);
    ca_.Goto(&block27, tmp61, tmp62);
  }

  if (block1.is_used()) {
    ca_.Bind(&block1);
    ca_.Goto(label_CastError);
  }

    TNode<Object> tmp63;
    TNode<Object> tmp64;
    ca_.Bind(&block27, &tmp63, &tmp64);
  return TNode<Object>{tmp64};
}

TNode<Object> Cast90UT8ATBigInt7ATFalse6ATNull5ATSmi6ATTrue11ATUndefined10HeapNumber10JSReceiver6String6Symbol_97(compiler::CodeAssemblerState* state_, TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object, Object> block6(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object, Object, Object> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object, HeapObject> block10(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object, HeapObject, JSReceiver> block9(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object> block8(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object> block11(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<Object> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2186);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2187);
    TNode<Object> tmp1;
    USE(tmp1);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp1 = Cast78UT8ATBigInt7ATFalse6ATNull5ATSmi6ATTrue11ATUndefined10HeapNumber6String6Symbol_96(state_, TNode<Object>{tmp0}, &label0);
    ca_.Goto(&block5, tmp0, tmp0, tmp0, tmp1);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block6, tmp0, tmp0, tmp0);
    }
  }

  if (block6.is_used()) {
    TNode<Object> tmp2;
    TNode<Object> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block6, &tmp2, &tmp3, &tmp4);
    ca_.Goto(&block4, tmp2, tmp3);
  }

  if (block5.is_used()) {
    TNode<Object> tmp5;
    TNode<Object> tmp6;
    TNode<Object> tmp7;
    TNode<Object> tmp8;
    ca_.Bind(&block5, &tmp5, &tmp6, &tmp7, &tmp8);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2188);
    ca_.Goto(&block2, tmp5, tmp8);
  }

  if (block4.is_used()) {
    TNode<Object> tmp9;
    TNode<Object> tmp10;
    ca_.Bind(&block4, &tmp9, &tmp10);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2190);
    TNode<JSReceiver> tmp11;
    USE(tmp11);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp11 = Cast10JSReceiver_142(state_, TNode<HeapObject>{ca_.UncheckedCast<HeapObject>(tmp10)}, &label0);
    ca_.Goto(&block9, tmp9, tmp10, ca_.UncheckedCast<HeapObject>(tmp10), tmp11);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block10, tmp9, tmp10, ca_.UncheckedCast<HeapObject>(tmp10));
    }
  }

  if (block10.is_used()) {
    TNode<Object> tmp12;
    TNode<Object> tmp13;
    TNode<HeapObject> tmp14;
    ca_.Bind(&block10, &tmp12, &tmp13, &tmp14);
    ca_.Goto(&block8, tmp12, tmp13);
  }

  if (block9.is_used()) {
    TNode<Object> tmp15;
    TNode<Object> tmp16;
    TNode<HeapObject> tmp17;
    TNode<JSReceiver> tmp18;
    ca_.Bind(&block9, &tmp15, &tmp16, &tmp17, &tmp18);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2191);
    ca_.Goto(&block2, tmp15, tmp18);
  }

  if (block8.is_used()) {
    TNode<Object> tmp19;
    TNode<Object> tmp20;
    ca_.Bind(&block8, &tmp19, &tmp20);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2193);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2194);
    ca_.Goto(&block1);
  }

  if (block2.is_used()) {
    TNode<Object> tmp21;
    TNode<Object> tmp22;
    ca_.Bind(&block2, &tmp21, &tmp22);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2185);
    ca_.Goto(&block11, tmp21, tmp22);
  }

  if (block1.is_used()) {
    ca_.Bind(&block1);
    ca_.Goto(label_CastError);
  }

    TNode<Object> tmp23;
    TNode<Object> tmp24;
    ca_.Bind(&block11, &tmp23, &tmp24);
  return TNode<Object>{tmp24};
}

TNode<Object> Cast100UT8ATBigInt7ATFalse6ATNull5ATSmi9ATTheHole6ATTrue11ATUndefined10HeapNumber10JSReceiver6String6Symbol_98(compiler::CodeAssemblerState* state_, TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object, Object> block6(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object, Object, Object> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object, HeapObject> block10(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object, HeapObject, Oddball> block9(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object> block8(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object> block11(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<Object> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2200);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2201);
    TNode<Object> tmp1;
    USE(tmp1);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp1 = Cast90UT8ATBigInt7ATFalse6ATNull5ATSmi6ATTrue11ATUndefined10HeapNumber10JSReceiver6String6Symbol_97(state_, TNode<Object>{tmp0}, &label0);
    ca_.Goto(&block5, tmp0, tmp0, tmp0, tmp1);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block6, tmp0, tmp0, tmp0);
    }
  }

  if (block6.is_used()) {
    TNode<Object> tmp2;
    TNode<Object> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block6, &tmp2, &tmp3, &tmp4);
    ca_.Goto(&block4, tmp2, tmp3);
  }

  if (block5.is_used()) {
    TNode<Object> tmp5;
    TNode<Object> tmp6;
    TNode<Object> tmp7;
    TNode<Object> tmp8;
    ca_.Bind(&block5, &tmp5, &tmp6, &tmp7, &tmp8);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2202);
    ca_.Goto(&block2, tmp5, tmp8);
  }

  if (block4.is_used()) {
    TNode<Object> tmp9;
    TNode<Object> tmp10;
    ca_.Bind(&block4, &tmp9, &tmp10);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2204);
    TNode<Oddball> tmp11;
    USE(tmp11);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp11 = Cast9ATTheHole_89(state_, TNode<HeapObject>{ca_.UncheckedCast<HeapObject>(tmp10)}, &label0);
    ca_.Goto(&block9, tmp9, tmp10, ca_.UncheckedCast<HeapObject>(tmp10), tmp11);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block10, tmp9, tmp10, ca_.UncheckedCast<HeapObject>(tmp10));
    }
  }

  if (block10.is_used()) {
    TNode<Object> tmp12;
    TNode<Object> tmp13;
    TNode<HeapObject> tmp14;
    ca_.Bind(&block10, &tmp12, &tmp13, &tmp14);
    ca_.Goto(&block8, tmp12, tmp13);
  }

  if (block9.is_used()) {
    TNode<Object> tmp15;
    TNode<Object> tmp16;
    TNode<HeapObject> tmp17;
    TNode<Oddball> tmp18;
    ca_.Bind(&block9, &tmp15, &tmp16, &tmp17, &tmp18);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2205);
    ca_.Goto(&block2, tmp15, tmp18);
  }

  if (block8.is_used()) {
    TNode<Object> tmp19;
    TNode<Object> tmp20;
    ca_.Bind(&block8, &tmp19, &tmp20);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2207);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2208);
    ca_.Goto(&block1);
  }

  if (block2.is_used()) {
    TNode<Object> tmp21;
    TNode<Object> tmp22;
    ca_.Bind(&block2, &tmp21, &tmp22);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2199);
    ca_.Goto(&block11, tmp21, tmp22);
  }

  if (block1.is_used()) {
    ca_.Bind(&block1);
    ca_.Goto(label_CastError);
  }

    TNode<Object> tmp23;
    TNode<Object> tmp24;
    ca_.Bind(&block11, &tmp23, &tmp24);
  return TNode<Object>{tmp24};
}

TNode<Object> Cast30UT5ATSmi9ATTheHole10HeapNumber_99(compiler::CodeAssemblerState* state_, TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object, Object> block6(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object, Object, Number> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object, HeapObject> block10(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object, HeapObject, Oddball> block9(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object> block8(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object> block11(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<Object> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2214);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2215);
    TNode<Number> tmp1;
    USE(tmp1);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp1 = Cast20UT5ATSmi10HeapNumber_85(state_, TNode<Object>{tmp0}, &label0);
    ca_.Goto(&block5, tmp0, tmp0, tmp0, tmp1);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block6, tmp0, tmp0, tmp0);
    }
  }

  if (block6.is_used()) {
    TNode<Object> tmp2;
    TNode<Object> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block6, &tmp2, &tmp3, &tmp4);
    ca_.Goto(&block4, tmp2, tmp3);
  }

  if (block5.is_used()) {
    TNode<Object> tmp5;
    TNode<Object> tmp6;
    TNode<Object> tmp7;
    TNode<Number> tmp8;
    ca_.Bind(&block5, &tmp5, &tmp6, &tmp7, &tmp8);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2216);
    ca_.Goto(&block2, tmp5, tmp8);
  }

  if (block4.is_used()) {
    TNode<Object> tmp9;
    TNode<Object> tmp10;
    ca_.Bind(&block4, &tmp9, &tmp10);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2218);
    TNode<Oddball> tmp11;
    USE(tmp11);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp11 = Cast9ATTheHole_89(state_, TNode<HeapObject>{ca_.UncheckedCast<HeapObject>(tmp10)}, &label0);
    ca_.Goto(&block9, tmp9, tmp10, ca_.UncheckedCast<HeapObject>(tmp10), tmp11);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block10, tmp9, tmp10, ca_.UncheckedCast<HeapObject>(tmp10));
    }
  }

  if (block10.is_used()) {
    TNode<Object> tmp12;
    TNode<Object> tmp13;
    TNode<HeapObject> tmp14;
    ca_.Bind(&block10, &tmp12, &tmp13, &tmp14);
    ca_.Goto(&block8, tmp12, tmp13);
  }

  if (block9.is_used()) {
    TNode<Object> tmp15;
    TNode<Object> tmp16;
    TNode<HeapObject> tmp17;
    TNode<Oddball> tmp18;
    ca_.Bind(&block9, &tmp15, &tmp16, &tmp17, &tmp18);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2219);
    ca_.Goto(&block2, tmp15, tmp18);
  }

  if (block8.is_used()) {
    TNode<Object> tmp19;
    TNode<Object> tmp20;
    ca_.Bind(&block8, &tmp19, &tmp20);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2221);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2222);
    ca_.Goto(&block1);
  }

  if (block2.is_used()) {
    TNode<Object> tmp21;
    TNode<Object> tmp22;
    ca_.Bind(&block2, &tmp21, &tmp22);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2213);
    ca_.Goto(&block11, tmp21, tmp22);
  }

  if (block1.is_used()) {
    ca_.Bind(&block1);
    ca_.Goto(label_CastError);
  }

    TNode<Object> tmp23;
    TNode<Object> tmp24;
    ca_.Bind(&block11, &tmp23, &tmp24);
  return TNode<Object>{tmp24};
}

TNode<HeapObject> Cast10HeapObject_100(compiler::CodeAssemblerState* state_, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label__CastError) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, HeapObject> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<HeapObject> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2232);
    ca_.Goto(&block2, tmp0, tmp0);
  }

  if (block2.is_used()) {
    TNode<HeapObject> tmp1;
    TNode<HeapObject> tmp2;
    ca_.Bind(&block2, &tmp1, &tmp2);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2230);
    ca_.Goto(&block3, tmp1, tmp2);
  }

  if (block1.is_used()) {
    ca_.Bind(&block1);
    ca_.Goto(label__CastError);
  }

    TNode<HeapObject> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block3, &tmp3, &tmp4);
  return TNode<HeapObject>{tmp4};
}

TNode<Oddball> Cast6ATNull_101(compiler::CodeAssemblerState* state_, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, Oddball> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, Oddball> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<HeapObject> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2237);
    TNode<Oddball> tmp1;
    USE(tmp1);
    tmp1 = Null_63(state_);
    TNode<BoolT> tmp2;
    USE(tmp2);
    tmp2 = CodeStubAssembler(state_).TaggedNotEqual(TNode<Object>{tmp0}, TNode<HeapObject>{tmp1});
    ca_.Branch(tmp2, &block3, &block4, tmp0);
  }

  if (block3.is_used()) {
    TNode<HeapObject> tmp3;
    ca_.Bind(&block3, &tmp3);
    ca_.Goto(&block1);
  }

  if (block4.is_used()) {
    TNode<HeapObject> tmp4;
    ca_.Bind(&block4, &tmp4);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2238);
    TNode<Oddball> tmp5;
    USE(tmp5);
    tmp5 = TORQUE_CAST(TNode<HeapObject>{tmp4});
    ca_.Goto(&block2, tmp4, tmp5);
  }

  if (block2.is_used()) {
    TNode<HeapObject> tmp6;
    TNode<Oddball> tmp7;
    ca_.Bind(&block2, &tmp6, &tmp7);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2235);
    ca_.Goto(&block5, tmp6, tmp7);
  }

  if (block1.is_used()) {
    ca_.Bind(&block1);
    ca_.Goto(label_CastError);
  }

    TNode<HeapObject> tmp8;
    TNode<Oddball> tmp9;
    ca_.Bind(&block5, &tmp8, &tmp9);
  return TNode<Oddball>{tmp9};
}

TNode<Oddball> Cast11ATUndefined_102(compiler::CodeAssemblerState* state_, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, Object, Object> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, Object, Object, Oddball> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, Oddball> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, Oddball> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<HeapObject> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2243);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2244);
    TNode<Oddball> tmp1;
    USE(tmp1);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp1 = Cast11ATUndefined_86(state_, TNode<Object>{tmp0}, &label0);
    ca_.Goto(&block3, tmp0, tmp0, tmp0, tmp1);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block4, tmp0, tmp0, tmp0);
    }
  }

  if (block4.is_used()) {
    TNode<HeapObject> tmp2;
    TNode<Object> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block4, &tmp2, &tmp3, &tmp4);
    ca_.Goto(&block1);
  }

  if (block3.is_used()) {
    TNode<HeapObject> tmp5;
    TNode<Object> tmp6;
    TNode<Object> tmp7;
    TNode<Oddball> tmp8;
    ca_.Bind(&block3, &tmp5, &tmp6, &tmp7, &tmp8);
    ca_.Goto(&block2, tmp5, tmp8);
  }

  if (block2.is_used()) {
    TNode<HeapObject> tmp9;
    TNode<Oddball> tmp10;
    ca_.Bind(&block2, &tmp9, &tmp10);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2241);
    ca_.Goto(&block5, tmp9, tmp10);
  }

  if (block1.is_used()) {
    ca_.Bind(&block1);
    ca_.Goto(label_CastError);
  }

    TNode<HeapObject> tmp11;
    TNode<Oddball> tmp12;
    ca_.Bind(&block5, &tmp11, &tmp12);
  return TNode<Oddball>{tmp12};
}

TNode<FixedArray> Cast10FixedArray_103(compiler::CodeAssemblerState* state_, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, HeapObject> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, HeapObject, FixedArray> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, FixedArray> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, FixedArray> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<HeapObject> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2249);
    TNode<FixedArray> tmp1;
    USE(tmp1);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp1 = CodeStubAssembler(state_).HeapObjectToFixedArray(TNode<HeapObject>{tmp0}, &label0);
    ca_.Goto(&block3, tmp0, tmp0, tmp1);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block4, tmp0, tmp0);
    }
  }

  if (block4.is_used()) {
    TNode<HeapObject> tmp2;
    TNode<HeapObject> tmp3;
    ca_.Bind(&block4, &tmp2, &tmp3);
    ca_.Goto(&block1);
  }

  if (block3.is_used()) {
    TNode<HeapObject> tmp4;
    TNode<HeapObject> tmp5;
    TNode<FixedArray> tmp6;
    ca_.Bind(&block3, &tmp4, &tmp5, &tmp6);
    ca_.Goto(&block2, tmp4, tmp6);
  }

  if (block2.is_used()) {
    TNode<HeapObject> tmp7;
    TNode<FixedArray> tmp8;
    ca_.Bind(&block2, &tmp7, &tmp8);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2247);
    ca_.Goto(&block5, tmp7, tmp8);
  }

  if (block1.is_used()) {
    ca_.Bind(&block1);
    ca_.Goto(label_CastError);
  }

    TNode<HeapObject> tmp9;
    TNode<FixedArray> tmp10;
    ca_.Bind(&block5, &tmp9, &tmp10);
  return TNode<FixedArray>{tmp10};
}

TNode<FixedDoubleArray> Cast16FixedDoubleArray_104(compiler::CodeAssemblerState* state_, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, HeapObject> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, HeapObject, FixedDoubleArray> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, FixedDoubleArray> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, FixedDoubleArray> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<HeapObject> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2254);
    TNode<FixedDoubleArray> tmp1;
    USE(tmp1);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp1 = CodeStubAssembler(state_).HeapObjectToFixedDoubleArray(TNode<HeapObject>{tmp0}, &label0);
    ca_.Goto(&block3, tmp0, tmp0, tmp1);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block4, tmp0, tmp0);
    }
  }

  if (block4.is_used()) {
    TNode<HeapObject> tmp2;
    TNode<HeapObject> tmp3;
    ca_.Bind(&block4, &tmp2, &tmp3);
    ca_.Goto(&block1);
  }

  if (block3.is_used()) {
    TNode<HeapObject> tmp4;
    TNode<HeapObject> tmp5;
    TNode<FixedDoubleArray> tmp6;
    ca_.Bind(&block3, &tmp4, &tmp5, &tmp6);
    ca_.Goto(&block2, tmp4, tmp6);
  }

  if (block2.is_used()) {
    TNode<HeapObject> tmp7;
    TNode<FixedDoubleArray> tmp8;
    ca_.Bind(&block2, &tmp7, &tmp8);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2252);
    ca_.Goto(&block5, tmp7, tmp8);
  }

  if (block1.is_used()) {
    ca_.Bind(&block1);
    ca_.Goto(label_CastError);
  }

    TNode<HeapObject> tmp9;
    TNode<FixedDoubleArray> tmp10;
    ca_.Bind(&block5, &tmp9, &tmp10);
  return TNode<FixedDoubleArray>{tmp10};
}

TNode<FixedArray> Cast25ATSloppyArgumentsElements_105(compiler::CodeAssemblerState* state_, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, HeapObject> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, HeapObject, FixedArray> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, FixedArray> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, FixedArray> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<HeapObject> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2259);
    TNode<FixedArray> tmp1;
    USE(tmp1);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp1 = CodeStubAssembler(state_).HeapObjectToSloppyArgumentsElements(TNode<HeapObject>{tmp0}, &label0);
    ca_.Goto(&block3, tmp0, tmp0, tmp1);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block4, tmp0, tmp0);
    }
  }

  if (block4.is_used()) {
    TNode<HeapObject> tmp2;
    TNode<HeapObject> tmp3;
    ca_.Bind(&block4, &tmp2, &tmp3);
    ca_.Goto(&block1);
  }

  if (block3.is_used()) {
    TNode<HeapObject> tmp4;
    TNode<HeapObject> tmp5;
    TNode<FixedArray> tmp6;
    ca_.Bind(&block3, &tmp4, &tmp5, &tmp6);
    ca_.Goto(&block2, tmp4, tmp6);
  }

  if (block2.is_used()) {
    TNode<HeapObject> tmp7;
    TNode<FixedArray> tmp8;
    ca_.Bind(&block2, &tmp7, &tmp8);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2257);
    ca_.Goto(&block5, tmp7, tmp8);
  }

  if (block1.is_used()) {
    ca_.Bind(&block1);
    ca_.Goto(label_CastError);
  }

    TNode<HeapObject> tmp9;
    TNode<FixedArray> tmp10;
    ca_.Bind(&block5, &tmp9, &tmp10);
  return TNode<FixedArray>{tmp10};
}

TNode<JSDataView> Cast10JSDataView_106(compiler::CodeAssemblerState* state_, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, HeapObject> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, HeapObject, JSDataView> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, JSDataView> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, JSDataView> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<HeapObject> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2264);
    TNode<JSDataView> tmp1;
    USE(tmp1);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp1 = CodeStubAssembler(state_).HeapObjectToJSDataView(TNode<HeapObject>{tmp0}, &label0);
    ca_.Goto(&block3, tmp0, tmp0, tmp1);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block4, tmp0, tmp0);
    }
  }

  if (block4.is_used()) {
    TNode<HeapObject> tmp2;
    TNode<HeapObject> tmp3;
    ca_.Bind(&block4, &tmp2, &tmp3);
    ca_.Goto(&block1);
  }

  if (block3.is_used()) {
    TNode<HeapObject> tmp4;
    TNode<HeapObject> tmp5;
    TNode<JSDataView> tmp6;
    ca_.Bind(&block3, &tmp4, &tmp5, &tmp6);
    ca_.Goto(&block2, tmp4, tmp6);
  }

  if (block2.is_used()) {
    TNode<HeapObject> tmp7;
    TNode<JSDataView> tmp8;
    ca_.Bind(&block2, &tmp7, &tmp8);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2262);
    ca_.Goto(&block5, tmp7, tmp8);
  }

  if (block1.is_used()) {
    ca_.Bind(&block1);
    ca_.Goto(label_CastError);
  }

    TNode<HeapObject> tmp9;
    TNode<JSDataView> tmp10;
    ca_.Bind(&block5, &tmp9, &tmp10);
  return TNode<JSDataView>{tmp10};
}

TNode<JSProxy> Cast7JSProxy_107(compiler::CodeAssemblerState* state_, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, HeapObject> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, HeapObject, JSProxy> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, JSProxy> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, JSProxy> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<HeapObject> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2269);
    TNode<JSProxy> tmp1;
    USE(tmp1);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp1 = CodeStubAssembler(state_).HeapObjectToJSProxy(TNode<HeapObject>{tmp0}, &label0);
    ca_.Goto(&block3, tmp0, tmp0, tmp1);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block4, tmp0, tmp0);
    }
  }

  if (block4.is_used()) {
    TNode<HeapObject> tmp2;
    TNode<HeapObject> tmp3;
    ca_.Bind(&block4, &tmp2, &tmp3);
    ca_.Goto(&block1);
  }

  if (block3.is_used()) {
    TNode<HeapObject> tmp4;
    TNode<HeapObject> tmp5;
    TNode<JSProxy> tmp6;
    ca_.Bind(&block3, &tmp4, &tmp5, &tmp6);
    ca_.Goto(&block2, tmp4, tmp6);
  }

  if (block2.is_used()) {
    TNode<HeapObject> tmp7;
    TNode<JSProxy> tmp8;
    ca_.Bind(&block2, &tmp7, &tmp8);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2267);
    ca_.Goto(&block5, tmp7, tmp8);
  }

  if (block1.is_used()) {
    ca_.Bind(&block1);
    ca_.Goto(label_CastError);
  }

    TNode<HeapObject> tmp9;
    TNode<JSProxy> tmp10;
    ca_.Bind(&block5, &tmp9, &tmp10);
  return TNode<JSProxy>{tmp10};
}

TNode<JSStringIterator> Cast16JSStringIterator_108(compiler::CodeAssemblerState* state_, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, HeapObject> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, HeapObject, JSStringIterator> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, JSStringIterator> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, JSStringIterator> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<HeapObject> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2274);
    TNode<JSStringIterator> tmp1;
    USE(tmp1);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp1 = CodeStubAssembler(state_).HeapObjectToJSStringIterator(TNode<HeapObject>{tmp0}, &label0);
    ca_.Goto(&block3, tmp0, tmp0, tmp1);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block4, tmp0, tmp0);
    }
  }

  if (block4.is_used()) {
    TNode<HeapObject> tmp2;
    TNode<HeapObject> tmp3;
    ca_.Bind(&block4, &tmp2, &tmp3);
    ca_.Goto(&block1);
  }

  if (block3.is_used()) {
    TNode<HeapObject> tmp4;
    TNode<HeapObject> tmp5;
    TNode<JSStringIterator> tmp6;
    ca_.Bind(&block3, &tmp4, &tmp5, &tmp6);
    ca_.Goto(&block2, tmp4, tmp6);
  }

  if (block2.is_used()) {
    TNode<HeapObject> tmp7;
    TNode<JSStringIterator> tmp8;
    ca_.Bind(&block2, &tmp7, &tmp8);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2272);
    ca_.Goto(&block5, tmp7, tmp8);
  }

  if (block1.is_used()) {
    ca_.Bind(&block1);
    ca_.Goto(label_CastError);
  }

    TNode<HeapObject> tmp9;
    TNode<JSStringIterator> tmp10;
    ca_.Bind(&block5, &tmp9, &tmp10);
  return TNode<JSStringIterator>{tmp10};
}

TNode<JSTypedArray> Cast12JSTypedArray_109(compiler::CodeAssemblerState* state_, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, JSTypedArray> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, JSTypedArray> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<HeapObject> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2279);
    TNode<BoolT> tmp1;
    USE(tmp1);
    tmp1 = CodeStubAssembler(state_).IsJSTypedArray(TNode<HeapObject>{tmp0});
    ca_.Branch(tmp1, &block3, &block4, tmp0);
  }

  if (block3.is_used()) {
    TNode<HeapObject> tmp2;
    ca_.Bind(&block3, &tmp2);
    TNode<JSTypedArray> tmp3;
    USE(tmp3);
    tmp3 = TORQUE_CAST(TNode<HeapObject>{tmp2});
    ca_.Goto(&block2, tmp2, tmp3);
  }

  if (block4.is_used()) {
    TNode<HeapObject> tmp4;
    ca_.Bind(&block4, &tmp4);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2280);
    ca_.Goto(&block1);
  }

  if (block2.is_used()) {
    TNode<HeapObject> tmp5;
    TNode<JSTypedArray> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2277);
    ca_.Goto(&block5, tmp5, tmp6);
  }

  if (block1.is_used()) {
    ca_.Bind(&block1);
    ca_.Goto(label_CastError);
  }

    TNode<HeapObject> tmp7;
    TNode<JSTypedArray> tmp8;
    ca_.Bind(&block5, &tmp7, &tmp8);
  return TNode<JSTypedArray>{tmp8};
}

TNode<JSTypedArray> Cast12JSTypedArray_110(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Context, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, Object> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, Object, HeapObject> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, HeapObject, HeapObject> block6(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, HeapObject, HeapObject, JSTypedArray> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, JSTypedArray> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, JSTypedArray> block7(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_context, p_o);

  if (block0.is_used()) {
    TNode<Context> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2285);
    TNode<HeapObject> tmp2;
    USE(tmp2);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp2 = Cast10HeapObject_1470(state_, TNode<Context>{tmp0}, TNode<Object>{tmp1}, &label0);
    ca_.Goto(&block3, tmp0, tmp1, tmp1, tmp2);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block4, tmp0, tmp1, tmp1);
    }
  }

  if (block4.is_used()) {
    TNode<Context> tmp3;
    TNode<Object> tmp4;
    TNode<Object> tmp5;
    ca_.Bind(&block4, &tmp3, &tmp4, &tmp5);
    ca_.Goto(&block1);
  }

  if (block3.is_used()) {
    TNode<Context> tmp6;
    TNode<Object> tmp7;
    TNode<Object> tmp8;
    TNode<HeapObject> tmp9;
    ca_.Bind(&block3, &tmp6, &tmp7, &tmp8, &tmp9);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2286);
    TNode<JSTypedArray> tmp10;
    USE(tmp10);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp10 = Cast12JSTypedArray_109(state_, TNode<HeapObject>{tmp9}, &label0);
    ca_.Goto(&block5, tmp6, tmp7, tmp9, tmp9, tmp10);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block6, tmp6, tmp7, tmp9, tmp9);
    }
  }

  if (block6.is_used()) {
    TNode<Context> tmp11;
    TNode<Object> tmp12;
    TNode<HeapObject> tmp13;
    TNode<HeapObject> tmp14;
    ca_.Bind(&block6, &tmp11, &tmp12, &tmp13, &tmp14);
    ca_.Goto(&block1);
  }

  if (block5.is_used()) {
    TNode<Context> tmp15;
    TNode<Object> tmp16;
    TNode<HeapObject> tmp17;
    TNode<HeapObject> tmp18;
    TNode<JSTypedArray> tmp19;
    ca_.Bind(&block5, &tmp15, &tmp16, &tmp17, &tmp18, &tmp19);
    ca_.Goto(&block2, tmp15, tmp16, tmp19);
  }

  if (block2.is_used()) {
    TNode<Context> tmp20;
    TNode<Object> tmp21;
    TNode<JSTypedArray> tmp22;
    ca_.Bind(&block2, &tmp20, &tmp21, &tmp22);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2283);
    ca_.Goto(&block7, tmp20, tmp21, tmp22);
  }

  if (block1.is_used()) {
    ca_.Bind(&block1);
    ca_.Goto(label_CastError);
  }

    TNode<Context> tmp23;
    TNode<Object> tmp24;
    TNode<JSTypedArray> tmp25;
    ca_.Bind(&block7, &tmp23, &tmp24, &tmp25);
  return TNode<JSTypedArray>{tmp25};
}

TNode<JSReceiver> Cast71UT19ATCallableApiObject17ATCallableJSProxy15JSBoundFunction10JSFunction_111(compiler::CodeAssemblerState* state_, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, HeapObject> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, HeapObject, JSReceiver> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, JSReceiver> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, JSReceiver> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<HeapObject> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2291);
    TNode<JSReceiver> tmp1;
    USE(tmp1);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp1 = CodeStubAssembler(state_).HeapObjectToCallable(TNode<HeapObject>{tmp0}, &label0);
    ca_.Goto(&block3, tmp0, tmp0, tmp1);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block4, tmp0, tmp0);
    }
  }

  if (block4.is_used()) {
    TNode<HeapObject> tmp2;
    TNode<HeapObject> tmp3;
    ca_.Bind(&block4, &tmp2, &tmp3);
    ca_.Goto(&block1);
  }

  if (block3.is_used()) {
    TNode<HeapObject> tmp4;
    TNode<HeapObject> tmp5;
    TNode<JSReceiver> tmp6;
    ca_.Bind(&block3, &tmp4, &tmp5, &tmp6);
    ca_.Goto(&block2, tmp4, tmp6);
  }

  if (block2.is_used()) {
    TNode<HeapObject> tmp7;
    TNode<JSReceiver> tmp8;
    ca_.Bind(&block2, &tmp7, &tmp8);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2289);
    ca_.Goto(&block5, tmp7, tmp8);
  }

  if (block1.is_used()) {
    ca_.Bind(&block1);
    ca_.Goto(label_CastError);
  }

    TNode<HeapObject> tmp9;
    TNode<JSReceiver> tmp10;
    ca_.Bind(&block5, &tmp9, &tmp10);
  return TNode<JSReceiver>{tmp10};
}

TNode<HeapObject> Cast84UT19ATCallableApiObject17ATCallableJSProxy11ATUndefined15JSBoundFunction10JSFunction_112(compiler::CodeAssemblerState* state_, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, HeapObject> block6(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, HeapObject, JSReceiver> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, HeapObject> block7(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<HeapObject> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2296);
    TNode<Oddball> tmp1;
    USE(tmp1);
    tmp1 = Undefined_64(state_);
    TNode<BoolT> tmp2;
    USE(tmp2);
    tmp2 = CodeStubAssembler(state_).TaggedEqual(TNode<Object>{tmp0}, TNode<HeapObject>{tmp1});
    ca_.Branch(tmp2, &block3, &block4, tmp0);
  }

  if (block3.is_used()) {
    TNode<HeapObject> tmp3;
    ca_.Bind(&block3, &tmp3);
    TNode<Oddball> tmp4;
    USE(tmp4);
    tmp4 = Undefined_64(state_);
    ca_.Goto(&block2, tmp3, tmp4);
  }

  if (block4.is_used()) {
    TNode<HeapObject> tmp5;
    ca_.Bind(&block4, &tmp5);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2297);
    TNode<JSReceiver> tmp6;
    USE(tmp6);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp6 = CodeStubAssembler(state_).HeapObjectToCallable(TNode<HeapObject>{tmp5}, &label0);
    ca_.Goto(&block5, tmp5, tmp5, tmp6);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block6, tmp5, tmp5);
    }
  }

  if (block6.is_used()) {
    TNode<HeapObject> tmp7;
    TNode<HeapObject> tmp8;
    ca_.Bind(&block6, &tmp7, &tmp8);
    ca_.Goto(&block1);
  }

  if (block5.is_used()) {
    TNode<HeapObject> tmp9;
    TNode<HeapObject> tmp10;
    TNode<JSReceiver> tmp11;
    ca_.Bind(&block5, &tmp9, &tmp10, &tmp11);
    ca_.Goto(&block2, tmp9, tmp11);
  }

  if (block2.is_used()) {
    TNode<HeapObject> tmp12;
    TNode<HeapObject> tmp13;
    ca_.Bind(&block2, &tmp12, &tmp13);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2294);
    ca_.Goto(&block7, tmp12, tmp13);
  }

  if (block1.is_used()) {
    ca_.Bind(&block1);
    ca_.Goto(label_CastError);
  }

    TNode<HeapObject> tmp14;
    TNode<HeapObject> tmp15;
    ca_.Bind(&block7, &tmp14, &tmp15);
  return TNode<HeapObject>{tmp15};
}

TNode<JSArray> Cast7JSArray_113(compiler::CodeAssemblerState* state_, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, HeapObject> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, HeapObject, JSArray> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, JSArray> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, JSArray> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<HeapObject> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2302);
    TNode<JSArray> tmp1;
    USE(tmp1);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp1 = CodeStubAssembler(state_).HeapObjectToJSArray(TNode<HeapObject>{tmp0}, &label0);
    ca_.Goto(&block3, tmp0, tmp0, tmp1);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block4, tmp0, tmp0);
    }
  }

  if (block4.is_used()) {
    TNode<HeapObject> tmp2;
    TNode<HeapObject> tmp3;
    ca_.Bind(&block4, &tmp2, &tmp3);
    ca_.Goto(&block1);
  }

  if (block3.is_used()) {
    TNode<HeapObject> tmp4;
    TNode<HeapObject> tmp5;
    TNode<JSArray> tmp6;
    ca_.Bind(&block3, &tmp4, &tmp5, &tmp6);
    ca_.Goto(&block2, tmp4, tmp6);
  }

  if (block2.is_used()) {
    TNode<HeapObject> tmp7;
    TNode<JSArray> tmp8;
    ca_.Bind(&block2, &tmp7, &tmp8);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2300);
    ca_.Goto(&block5, tmp7, tmp8);
  }

  if (block1.is_used()) {
    ca_.Bind(&block1);
    ca_.Goto(label_CastError);
  }

    TNode<HeapObject> tmp9;
    TNode<JSArray> tmp10;
    ca_.Bind(&block5, &tmp9, &tmp10);
  return TNode<JSArray>{tmp10};
}

TNode<JSArrayBuffer> Cast13JSArrayBuffer_114(compiler::CodeAssemblerState* state_, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, HeapObject> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, HeapObject, JSArrayBuffer> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, JSArrayBuffer> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, JSArrayBuffer> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<HeapObject> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2307);
    TNode<JSArrayBuffer> tmp1;
    USE(tmp1);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp1 = CodeStubAssembler(state_).HeapObjectToJSArrayBuffer(TNode<HeapObject>{tmp0}, &label0);
    ca_.Goto(&block3, tmp0, tmp0, tmp1);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block4, tmp0, tmp0);
    }
  }

  if (block4.is_used()) {
    TNode<HeapObject> tmp2;
    TNode<HeapObject> tmp3;
    ca_.Bind(&block4, &tmp2, &tmp3);
    ca_.Goto(&block1);
  }

  if (block3.is_used()) {
    TNode<HeapObject> tmp4;
    TNode<HeapObject> tmp5;
    TNode<JSArrayBuffer> tmp6;
    ca_.Bind(&block3, &tmp4, &tmp5, &tmp6);
    ca_.Goto(&block2, tmp4, tmp6);
  }

  if (block2.is_used()) {
    TNode<HeapObject> tmp7;
    TNode<JSArrayBuffer> tmp8;
    ca_.Bind(&block2, &tmp7, &tmp8);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2305);
    ca_.Goto(&block5, tmp7, tmp8);
  }

  if (block1.is_used()) {
    ca_.Bind(&block1);
    ca_.Goto(label_CastError);
  }

    TNode<HeapObject> tmp9;
    TNode<JSArrayBuffer> tmp10;
    ca_.Bind(&block5, &tmp9, &tmp10);
  return TNode<JSArrayBuffer>{tmp10};
}

TNode<Context> Cast7Context_115(compiler::CodeAssemblerState* state_, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, Context> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, Context> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<HeapObject> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2312);
    TNode<BoolT> tmp1;
    USE(tmp1);
    tmp1 = CodeStubAssembler(state_).IsContext(TNode<HeapObject>{tmp0});
    ca_.Branch(tmp1, &block3, &block4, tmp0);
  }

  if (block3.is_used()) {
    TNode<HeapObject> tmp2;
    ca_.Bind(&block3, &tmp2);
    TNode<Context> tmp3;
    USE(tmp3);
    tmp3 = TORQUE_CAST(TNode<HeapObject>{tmp2});
    ca_.Goto(&block2, tmp2, tmp3);
  }

  if (block4.is_used()) {
    TNode<HeapObject> tmp4;
    ca_.Bind(&block4, &tmp4);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2313);
    ca_.Goto(&block1);
  }

  if (block2.is_used()) {
    TNode<HeapObject> tmp5;
    TNode<Context> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2310);
    ca_.Goto(&block5, tmp5, tmp6);
  }

  if (block1.is_used()) {
    ca_.Bind(&block1);
    ca_.Goto(label_CastError);
  }

    TNode<HeapObject> tmp7;
    TNode<Context> tmp8;
    ca_.Bind(&block5, &tmp7, &tmp8);
  return TNode<Context>{tmp8};
}

TNode<NativeContext> Cast15ATNativeContext_116(compiler::CodeAssemblerState* state_, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, NativeContext> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, NativeContext> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<HeapObject> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2318);
    TNode<BoolT> tmp1;
    USE(tmp1);
    tmp1 = CodeStubAssembler(state_).IsNativeContext(TNode<HeapObject>{tmp0});
    ca_.Branch(tmp1, &block3, &block4, tmp0);
  }

  if (block3.is_used()) {
    TNode<HeapObject> tmp2;
    ca_.Bind(&block3, &tmp2);
    TNode<NativeContext> tmp3;
    USE(tmp3);
    tmp3 = TORQUE_CAST(TNode<HeapObject>{tmp2});
    ca_.Goto(&block2, tmp2, tmp3);
  }

  if (block4.is_used()) {
    TNode<HeapObject> tmp4;
    ca_.Bind(&block4, &tmp4);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2319);
    ca_.Goto(&block1);
  }

  if (block2.is_used()) {
    TNode<HeapObject> tmp5;
    TNode<NativeContext> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2316);
    ca_.Goto(&block5, tmp5, tmp6);
  }

  if (block1.is_used()) {
    ca_.Bind(&block1);
    ca_.Goto(label_CastError);
  }

    TNode<HeapObject> tmp7;
    TNode<NativeContext> tmp8;
    ca_.Bind(&block5, &tmp7, &tmp8);
  return TNode<NativeContext>{tmp8};
}

TNode<JSObject> Cast8JSObject_117(compiler::CodeAssemblerState* state_, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, JSObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, JSObject> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<HeapObject> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2324);
    TNode<BoolT> tmp1;
    USE(tmp1);
    tmp1 = CodeStubAssembler(state_).IsJSObject(TNode<HeapObject>{tmp0});
    ca_.Branch(tmp1, &block3, &block4, tmp0);
  }

  if (block3.is_used()) {
    TNode<HeapObject> tmp2;
    ca_.Bind(&block3, &tmp2);
    TNode<JSObject> tmp3;
    USE(tmp3);
    tmp3 = TORQUE_CAST(TNode<HeapObject>{tmp2});
    ca_.Goto(&block2, tmp2, tmp3);
  }

  if (block4.is_used()) {
    TNode<HeapObject> tmp4;
    ca_.Bind(&block4, &tmp4);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2325);
    ca_.Goto(&block1);
  }

  if (block2.is_used()) {
    TNode<HeapObject> tmp5;
    TNode<JSObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2322);
    ca_.Goto(&block5, tmp5, tmp6);
  }

  if (block1.is_used()) {
    ca_.Bind(&block1);
    ca_.Goto(label_CastError);
  }

    TNode<HeapObject> tmp7;
    TNode<JSObject> tmp8;
    ca_.Bind(&block5, &tmp7, &tmp8);
  return TNode<JSObject>{tmp8};
}

TNode<NumberDictionary> Cast18ATNumberDictionary_118(compiler::CodeAssemblerState* state_, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, NumberDictionary> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, NumberDictionary> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<HeapObject> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2330);
    TNode<BoolT> tmp1;
    USE(tmp1);
    tmp1 = CodeStubAssembler(state_).IsNumberDictionary(TNode<HeapObject>{tmp0});
    ca_.Branch(tmp1, &block3, &block4, tmp0);
  }

  if (block3.is_used()) {
    TNode<HeapObject> tmp2;
    ca_.Bind(&block3, &tmp2);
    TNode<NumberDictionary> tmp3;
    USE(tmp3);
    tmp3 = TORQUE_CAST(TNode<HeapObject>{tmp2});
    ca_.Goto(&block2, tmp2, tmp3);
  }

  if (block4.is_used()) {
    TNode<HeapObject> tmp4;
    ca_.Bind(&block4, &tmp4);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2331);
    ca_.Goto(&block1);
  }

  if (block2.is_used()) {
    TNode<HeapObject> tmp5;
    TNode<NumberDictionary> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2328);
    ca_.Goto(&block5, tmp5, tmp6);
  }

  if (block1.is_used()) {
    ca_.Bind(&block1);
    ca_.Goto(label_CastError);
  }

    TNode<HeapObject> tmp7;
    TNode<NumberDictionary> tmp8;
    ca_.Bind(&block5, &tmp7, &tmp8);
  return TNode<NumberDictionary>{tmp8};
}

TNode<String> Cast6String_119(compiler::CodeAssemblerState* state_, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, HeapObject> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, HeapObject, String> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, String> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, String> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<HeapObject> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2336);
    TNode<String> tmp1;
    USE(tmp1);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp1 = CodeStubAssembler(state_).HeapObjectToString(TNode<HeapObject>{tmp0}, &label0);
    ca_.Goto(&block3, tmp0, tmp0, tmp1);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block4, tmp0, tmp0);
    }
  }

  if (block4.is_used()) {
    TNode<HeapObject> tmp2;
    TNode<HeapObject> tmp3;
    ca_.Bind(&block4, &tmp2, &tmp3);
    ca_.Goto(&block1);
  }

  if (block3.is_used()) {
    TNode<HeapObject> tmp4;
    TNode<HeapObject> tmp5;
    TNode<String> tmp6;
    ca_.Bind(&block3, &tmp4, &tmp5, &tmp6);
    ca_.Goto(&block2, tmp4, tmp6);
  }

  if (block2.is_used()) {
    TNode<HeapObject> tmp7;
    TNode<String> tmp8;
    ca_.Bind(&block2, &tmp7, &tmp8);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2334);
    ca_.Goto(&block5, tmp7, tmp8);
  }

  if (block1.is_used()) {
    ca_.Bind(&block1);
    ca_.Goto(label_CastError);
  }

    TNode<HeapObject> tmp9;
    TNode<String> tmp10;
    ca_.Bind(&block5, &tmp9, &tmp10);
  return TNode<String>{tmp10};
}

TNode<Oddball> Cast7Oddball_120(compiler::CodeAssemblerState* state_, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, Oddball> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, Oddball> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<HeapObject> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2341);
    TNode<BoolT> tmp1;
    USE(tmp1);
    tmp1 = CodeStubAssembler(state_).IsOddball(TNode<HeapObject>{tmp0});
    ca_.Branch(tmp1, &block3, &block4, tmp0);
  }

  if (block3.is_used()) {
    TNode<HeapObject> tmp2;
    ca_.Bind(&block3, &tmp2);
    TNode<Oddball> tmp3;
    USE(tmp3);
    tmp3 = TORQUE_CAST(TNode<HeapObject>{tmp2});
    ca_.Goto(&block2, tmp2, tmp3);
  }

  if (block4.is_used()) {
    TNode<HeapObject> tmp4;
    ca_.Bind(&block4, &tmp4);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2342);
    ca_.Goto(&block1);
  }

  if (block2.is_used()) {
    TNode<HeapObject> tmp5;
    TNode<Oddball> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2339);
    ca_.Goto(&block5, tmp5, tmp6);
  }

  if (block1.is_used()) {
    ca_.Bind(&block1);
    ca_.Goto(label_CastError);
  }

    TNode<HeapObject> tmp7;
    TNode<Oddball> tmp8;
    ca_.Bind(&block5, &tmp7, &tmp8);
  return TNode<Oddball>{tmp8};
}

TNode<Symbol> Cast6Symbol_121(compiler::CodeAssemblerState* state_, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, Symbol> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, Symbol> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<HeapObject> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2347);
    TNode<BoolT> tmp1;
    USE(tmp1);
    tmp1 = CodeStubAssembler(state_).IsSymbol(TNode<HeapObject>{tmp0});
    ca_.Branch(tmp1, &block3, &block4, tmp0);
  }

  if (block3.is_used()) {
    TNode<HeapObject> tmp2;
    ca_.Bind(&block3, &tmp2);
    TNode<Symbol> tmp3;
    USE(tmp3);
    tmp3 = TORQUE_CAST(TNode<HeapObject>{tmp2});
    ca_.Goto(&block2, tmp2, tmp3);
  }

  if (block4.is_used()) {
    TNode<HeapObject> tmp4;
    ca_.Bind(&block4, &tmp4);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2348);
    ca_.Goto(&block1);
  }

  if (block2.is_used()) {
    TNode<HeapObject> tmp5;
    TNode<Symbol> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2345);
    ca_.Goto(&block5, tmp5, tmp6);
  }

  if (block1.is_used()) {
    ca_.Bind(&block1);
    ca_.Goto(label_CastError);
  }

    TNode<HeapObject> tmp7;
    TNode<Symbol> tmp8;
    ca_.Bind(&block5, &tmp7, &tmp8);
  return TNode<Symbol>{tmp8};
}

TNode<Symbol> Cast14ATPublicSymbol_122(compiler::CodeAssemblerState* state_, TNode<Symbol> p_o, compiler::CodeAssemblerLabel* label_CastError) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Symbol> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Symbol> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Symbol> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Symbol, Symbol> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Symbol, Symbol> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<Symbol> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2353);
    TNode<BoolT> tmp1;
    USE(tmp1);
    tmp1 = CodeStubAssembler(state_).IsPrivateSymbol(TNode<HeapObject>{tmp0});
    ca_.Branch(tmp1, &block3, &block4, tmp0);
  }

  if (block3.is_used()) {
    TNode<Symbol> tmp2;
    ca_.Bind(&block3, &tmp2);
    ca_.Goto(&block1);
  }

  if (block4.is_used()) {
    TNode<Symbol> tmp3;
    ca_.Bind(&block4, &tmp3);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2354);
    TNode<Symbol> tmp4;
    USE(tmp4);
    tmp4 = (TNode<Symbol>{tmp3});
    ca_.Goto(&block2, tmp3, tmp4);
  }

  if (block2.is_used()) {
    TNode<Symbol> tmp5;
    TNode<Symbol> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2352);
    ca_.Goto(&block5, tmp5, tmp6);
  }

  if (block1.is_used()) {
    ca_.Bind(&block1);
    ca_.Goto(label_CastError);
  }

    TNode<Symbol> tmp7;
    TNode<Symbol> tmp8;
    ca_.Bind(&block5, &tmp7, &tmp8);
  return TNode<Symbol>{tmp8};
}

TNode<Symbol> Cast15ATPrivateSymbol_123(compiler::CodeAssemblerState* state_, TNode<Symbol> p_o, compiler::CodeAssemblerLabel* label_CastError) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Symbol> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Symbol> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Symbol> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Symbol, Symbol> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Symbol, Symbol> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<Symbol> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2357);
    TNode<BoolT> tmp1;
    USE(tmp1);
    tmp1 = CodeStubAssembler(state_).IsPrivateSymbol(TNode<HeapObject>{tmp0});
    ca_.Branch(tmp1, &block3, &block4, tmp0);
  }

  if (block3.is_used()) {
    TNode<Symbol> tmp2;
    ca_.Bind(&block3, &tmp2);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2358);
    TNode<Symbol> tmp3;
    USE(tmp3);
    tmp3 = (TNode<Symbol>{tmp2});
    ca_.Goto(&block2, tmp2, tmp3);
  }

  if (block4.is_used()) {
    TNode<Symbol> tmp4;
    ca_.Bind(&block4, &tmp4);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2360);
    ca_.Goto(&block1);
  }

  if (block2.is_used()) {
    TNode<Symbol> tmp5;
    TNode<Symbol> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2356);
    ca_.Goto(&block5, tmp5, tmp6);
  }

  if (block1.is_used()) {
    ca_.Bind(&block1);
    ca_.Goto(label_CastError);
  }

    TNode<Symbol> tmp7;
    TNode<Symbol> tmp8;
    ca_.Bind(&block5, &tmp7, &tmp8);
  return TNode<Symbol>{tmp8};
}

TNode<Symbol> Cast14ATPublicSymbol_124(compiler::CodeAssemblerState* state_, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, HeapObject> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, HeapObject, Symbol> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, Symbol, Symbol> block6(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, Symbol, Symbol, Symbol> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, Symbol> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, Symbol> block7(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<HeapObject> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2364);
    TNode<Symbol> tmp1;
    USE(tmp1);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp1 = Cast6Symbol_121(state_, TNode<HeapObject>{tmp0}, &label0);
    ca_.Goto(&block3, tmp0, tmp0, tmp1);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block4, tmp0, tmp0);
    }
  }

  if (block4.is_used()) {
    TNode<HeapObject> tmp2;
    TNode<HeapObject> tmp3;
    ca_.Bind(&block4, &tmp2, &tmp3);
    ca_.Goto(&block1);
  }

  if (block3.is_used()) {
    TNode<HeapObject> tmp4;
    TNode<HeapObject> tmp5;
    TNode<Symbol> tmp6;
    ca_.Bind(&block3, &tmp4, &tmp5, &tmp6);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2365);
    TNode<Symbol> tmp7;
    USE(tmp7);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp7 = Cast14ATPublicSymbol_122(state_, TNode<Symbol>{tmp6}, &label0);
    ca_.Goto(&block5, tmp4, tmp6, tmp6, tmp7);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block6, tmp4, tmp6, tmp6);
    }
  }

  if (block6.is_used()) {
    TNode<HeapObject> tmp8;
    TNode<Symbol> tmp9;
    TNode<Symbol> tmp10;
    ca_.Bind(&block6, &tmp8, &tmp9, &tmp10);
    ca_.Goto(&block1);
  }

  if (block5.is_used()) {
    TNode<HeapObject> tmp11;
    TNode<Symbol> tmp12;
    TNode<Symbol> tmp13;
    TNode<Symbol> tmp14;
    ca_.Bind(&block5, &tmp11, &tmp12, &tmp13, &tmp14);
    ca_.Goto(&block2, tmp11, tmp14);
  }

  if (block2.is_used()) {
    TNode<HeapObject> tmp15;
    TNode<Symbol> tmp16;
    ca_.Bind(&block2, &tmp15, &tmp16);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2363);
    ca_.Goto(&block7, tmp15, tmp16);
  }

  if (block1.is_used()) {
    ca_.Bind(&block1);
    ca_.Goto(label_CastError);
  }

    TNode<HeapObject> tmp17;
    TNode<Symbol> tmp18;
    ca_.Bind(&block7, &tmp17, &tmp18);
  return TNode<Symbol>{tmp18};
}

TNode<Symbol> Cast15ATPrivateSymbol_125(compiler::CodeAssemblerState* state_, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, HeapObject> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, HeapObject, Symbol> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, Symbol, Symbol> block6(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, Symbol, Symbol, Symbol> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, Symbol> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, Symbol> block7(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<HeapObject> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2368);
    TNode<Symbol> tmp1;
    USE(tmp1);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp1 = Cast6Symbol_121(state_, TNode<HeapObject>{tmp0}, &label0);
    ca_.Goto(&block3, tmp0, tmp0, tmp1);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block4, tmp0, tmp0);
    }
  }

  if (block4.is_used()) {
    TNode<HeapObject> tmp2;
    TNode<HeapObject> tmp3;
    ca_.Bind(&block4, &tmp2, &tmp3);
    ca_.Goto(&block1);
  }

  if (block3.is_used()) {
    TNode<HeapObject> tmp4;
    TNode<HeapObject> tmp5;
    TNode<Symbol> tmp6;
    ca_.Bind(&block3, &tmp4, &tmp5, &tmp6);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2369);
    TNode<Symbol> tmp7;
    USE(tmp7);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp7 = Cast15ATPrivateSymbol_123(state_, TNode<Symbol>{tmp6}, &label0);
    ca_.Goto(&block5, tmp4, tmp6, tmp6, tmp7);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block6, tmp4, tmp6, tmp6);
    }
  }

  if (block6.is_used()) {
    TNode<HeapObject> tmp8;
    TNode<Symbol> tmp9;
    TNode<Symbol> tmp10;
    ca_.Bind(&block6, &tmp8, &tmp9, &tmp10);
    ca_.Goto(&block1);
  }

  if (block5.is_used()) {
    TNode<HeapObject> tmp11;
    TNode<Symbol> tmp12;
    TNode<Symbol> tmp13;
    TNode<Symbol> tmp14;
    ca_.Bind(&block5, &tmp11, &tmp12, &tmp13, &tmp14);
    ca_.Goto(&block2, tmp11, tmp14);
  }

  if (block2.is_used()) {
    TNode<HeapObject> tmp15;
    TNode<Symbol> tmp16;
    ca_.Bind(&block2, &tmp15, &tmp16);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2367);
    ca_.Goto(&block7, tmp15, tmp16);
  }

  if (block1.is_used()) {
    ca_.Bind(&block1);
    ca_.Goto(label_CastError);
  }

    TNode<HeapObject> tmp17;
    TNode<Symbol> tmp18;
    ca_.Bind(&block7, &tmp17, &tmp18);
  return TNode<Symbol>{tmp18};
}

TNode<String> Cast14ATDirectString_126(compiler::CodeAssemblerState* state_, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, HeapObject> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, HeapObject, String> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, String> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, String> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<HeapObject> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2374);
    TNode<String> tmp1;
    USE(tmp1);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp1 = CodeStubAssembler(state_).TaggedToDirectString(TNode<Object>{tmp0}, &label0);
    ca_.Goto(&block3, tmp0, tmp0, tmp1);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block4, tmp0, tmp0);
    }
  }

  if (block4.is_used()) {
    TNode<HeapObject> tmp2;
    TNode<HeapObject> tmp3;
    ca_.Bind(&block4, &tmp2, &tmp3);
    ca_.Goto(&block1);
  }

  if (block3.is_used()) {
    TNode<HeapObject> tmp4;
    TNode<HeapObject> tmp5;
    TNode<String> tmp6;
    ca_.Bind(&block3, &tmp4, &tmp5, &tmp6);
    ca_.Goto(&block2, tmp4, tmp6);
  }

  if (block2.is_used()) {
    TNode<HeapObject> tmp7;
    TNode<String> tmp8;
    ca_.Bind(&block2, &tmp7, &tmp8);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2372);
    ca_.Goto(&block5, tmp7, tmp8);
  }

  if (block1.is_used()) {
    ca_.Bind(&block1);
    ca_.Goto(label_CastError);
  }

    TNode<HeapObject> tmp9;
    TNode<String> tmp10;
    ca_.Bind(&block5, &tmp9, &tmp10);
  return TNode<String>{tmp10};
}

TNode<JSReceiver> Cast13ATConstructor_127(compiler::CodeAssemblerState* state_, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, HeapObject> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, HeapObject, JSReceiver> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, JSReceiver> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, JSReceiver> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<HeapObject> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2379);
    TNode<JSReceiver> tmp1;
    USE(tmp1);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp1 = CodeStubAssembler(state_).HeapObjectToConstructor(TNode<HeapObject>{tmp0}, &label0);
    ca_.Goto(&block3, tmp0, tmp0, tmp1);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block4, tmp0, tmp0);
    }
  }

  if (block4.is_used()) {
    TNode<HeapObject> tmp2;
    TNode<HeapObject> tmp3;
    ca_.Bind(&block4, &tmp2, &tmp3);
    ca_.Goto(&block1);
  }

  if (block3.is_used()) {
    TNode<HeapObject> tmp4;
    TNode<HeapObject> tmp5;
    TNode<JSReceiver> tmp6;
    ca_.Bind(&block3, &tmp4, &tmp5, &tmp6);
    ca_.Goto(&block2, tmp4, tmp6);
  }

  if (block2.is_used()) {
    TNode<HeapObject> tmp7;
    TNode<JSReceiver> tmp8;
    ca_.Bind(&block2, &tmp7, &tmp8);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2377);
    ca_.Goto(&block5, tmp7, tmp8);
  }

  if (block1.is_used()) {
    ca_.Bind(&block1);
    ca_.Goto(label_CastError);
  }

    TNode<HeapObject> tmp9;
    TNode<JSReceiver> tmp10;
    ca_.Bind(&block5, &tmp9, &tmp10);
  return TNode<JSReceiver>{tmp10};
}

TNode<HeapNumber> Cast10HeapNumber_128(compiler::CodeAssemblerState* state_, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, HeapNumber> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, HeapNumber> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<HeapObject> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2384);
    TNode<BoolT> tmp1;
    USE(tmp1);
    tmp1 = CodeStubAssembler(state_).IsHeapNumber(TNode<HeapObject>{tmp0});
    ca_.Branch(tmp1, &block3, &block4, tmp0);
  }

  if (block3.is_used()) {
    TNode<HeapObject> tmp2;
    ca_.Bind(&block3, &tmp2);
    TNode<HeapNumber> tmp3;
    USE(tmp3);
    tmp3 = TORQUE_CAST(TNode<HeapObject>{tmp2});
    ca_.Goto(&block2, tmp2, tmp3);
  }

  if (block4.is_used()) {
    TNode<HeapObject> tmp4;
    ca_.Bind(&block4, &tmp4);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2385);
    ca_.Goto(&block1);
  }

  if (block2.is_used()) {
    TNode<HeapObject> tmp5;
    TNode<HeapNumber> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2382);
    ca_.Goto(&block5, tmp5, tmp6);
  }

  if (block1.is_used()) {
    ca_.Bind(&block1);
    ca_.Goto(label_CastError);
  }

    TNode<HeapObject> tmp7;
    TNode<HeapNumber> tmp8;
    ca_.Bind(&block5, &tmp7, &tmp8);
  return TNode<HeapNumber>{tmp8};
}

TNode<BigInt> Cast8ATBigInt_129(compiler::CodeAssemblerState* state_, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, BigInt> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, BigInt> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<HeapObject> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2389);
    TNode<BoolT> tmp1;
    USE(tmp1);
    tmp1 = CodeStubAssembler(state_).IsBigInt(TNode<HeapObject>{tmp0});
    ca_.Branch(tmp1, &block3, &block4, tmp0);
  }

  if (block3.is_used()) {
    TNode<HeapObject> tmp2;
    ca_.Bind(&block3, &tmp2);
    TNode<BigInt> tmp3;
    USE(tmp3);
    tmp3 = TORQUE_CAST(TNode<HeapObject>{tmp2});
    ca_.Goto(&block2, tmp2, tmp3);
  }

  if (block4.is_used()) {
    TNode<HeapObject> tmp4;
    ca_.Bind(&block4, &tmp4);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2390);
    ca_.Goto(&block1);
  }

  if (block2.is_used()) {
    TNode<HeapObject> tmp5;
    TNode<BigInt> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2388);
    ca_.Goto(&block5, tmp5, tmp6);
  }

  if (block1.is_used()) {
    ca_.Bind(&block1);
    ca_.Goto(label_CastError);
  }

    TNode<HeapObject> tmp7;
    TNode<BigInt> tmp8;
    ca_.Bind(&block5, &tmp7, &tmp8);
  return TNode<BigInt>{tmp8};
}

TNode<JSRegExp> Cast8JSRegExp_130(compiler::CodeAssemblerState* state_, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, JSRegExp> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, JSRegExp> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<HeapObject> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2395);
    TNode<BoolT> tmp1;
    USE(tmp1);
    tmp1 = CodeStubAssembler(state_).IsJSRegExp(TNode<HeapObject>{tmp0});
    ca_.Branch(tmp1, &block3, &block4, tmp0);
  }

  if (block3.is_used()) {
    TNode<HeapObject> tmp2;
    ca_.Bind(&block3, &tmp2);
    TNode<JSRegExp> tmp3;
    USE(tmp3);
    tmp3 = TORQUE_CAST(TNode<HeapObject>{tmp2});
    ca_.Goto(&block2, tmp2, tmp3);
  }

  if (block4.is_used()) {
    TNode<HeapObject> tmp4;
    ca_.Bind(&block4, &tmp4);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2396);
    ca_.Goto(&block1);
  }

  if (block2.is_used()) {
    TNode<HeapObject> tmp5;
    TNode<JSRegExp> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2393);
    ca_.Goto(&block5, tmp5, tmp6);
  }

  if (block1.is_used()) {
    ca_.Bind(&block1);
    ca_.Goto(label_CastError);
  }

    TNode<HeapObject> tmp7;
    TNode<JSRegExp> tmp8;
    ca_.Bind(&block5, &tmp7, &tmp8);
  return TNode<JSRegExp>{tmp8};
}

TNode<JSRegExpResult> Cast20ATFastJSRegExpResult_131(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject, JSRegExpResult> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject, JSRegExpResult> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_context, p_o);

  if (block0.is_used()) {
    TNode<Context> tmp0;
    TNode<HeapObject> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2402);
    TNode<BoolT> tmp2;
    USE(tmp2);
    tmp2 = IsFastRegExpResult_331(state_, TNode<Context>{tmp0}, TNode<HeapObject>{tmp1});
    ca_.Branch(tmp2, &block3, &block4, tmp0, tmp1);
  }

  if (block3.is_used()) {
    TNode<Context> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block3, &tmp3, &tmp4);
    TNode<JSRegExpResult> tmp5;
    USE(tmp5);
    tmp5 = TORQUE_CAST(TNode<HeapObject>{tmp4});
    ca_.Goto(&block2, tmp3, tmp4, tmp5);
  }

  if (block4.is_used()) {
    TNode<Context> tmp6;
    TNode<HeapObject> tmp7;
    ca_.Bind(&block4, &tmp6, &tmp7);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2403);
    ca_.Goto(&block1);
  }

  if (block2.is_used()) {
    TNode<Context> tmp8;
    TNode<HeapObject> tmp9;
    TNode<JSRegExpResult> tmp10;
    ca_.Bind(&block2, &tmp8, &tmp9, &tmp10);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2399);
    ca_.Goto(&block5, tmp8, tmp9, tmp10);
  }

  if (block1.is_used()) {
    ca_.Bind(&block1);
    ca_.Goto(label_CastError);
  }

    TNode<Context> tmp11;
    TNode<HeapObject> tmp12;
    TNode<JSRegExpResult> tmp13;
    ca_.Bind(&block5, &tmp11, &tmp12, &tmp13);
  return TNode<JSRegExpResult>{tmp13};
}

TNode<Map> Cast3Map_132(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject, Map> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject, Map> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_context, p_o);

  if (block0.is_used()) {
    TNode<Context> tmp0;
    TNode<HeapObject> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2408);
    TNode<BoolT> tmp2;
    USE(tmp2);
    tmp2 = CodeStubAssembler(state_).IsMap(TNode<HeapObject>{tmp1});
    ca_.Branch(tmp2, &block3, &block4, tmp0, tmp1);
  }

  if (block3.is_used()) {
    TNode<Context> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block3, &tmp3, &tmp4);
    TNode<Map> tmp5;
    USE(tmp5);
    tmp5 = TORQUE_CAST(TNode<HeapObject>{tmp4});
    ca_.Goto(&block2, tmp3, tmp4, tmp5);
  }

  if (block4.is_used()) {
    TNode<Context> tmp6;
    TNode<HeapObject> tmp7;
    ca_.Bind(&block4, &tmp6, &tmp7);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2409);
    ca_.Goto(&block1);
  }

  if (block2.is_used()) {
    TNode<Context> tmp8;
    TNode<HeapObject> tmp9;
    TNode<Map> tmp10;
    ca_.Bind(&block2, &tmp8, &tmp9, &tmp10);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2406);
    ca_.Goto(&block5, tmp8, tmp9, tmp10);
  }

  if (block1.is_used()) {
    ca_.Bind(&block1);
    ca_.Goto(label_CastError);
  }

    TNode<Context> tmp11;
    TNode<HeapObject> tmp12;
    TNode<Map> tmp13;
    ca_.Bind(&block5, &tmp11, &tmp12, &tmp13);
  return TNode<Map>{tmp13};
}

TNode<FeedbackVector> Cast14FeedbackVector_133(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject, FeedbackVector> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject, FeedbackVector> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_context, p_o);

  if (block0.is_used()) {
    TNode<Context> tmp0;
    TNode<HeapObject> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2414);
    TNode<BoolT> tmp2;
    USE(tmp2);
    tmp2 = CodeStubAssembler(state_).IsFeedbackVector(TNode<HeapObject>{tmp1});
    ca_.Branch(tmp2, &block3, &block4, tmp0, tmp1);
  }

  if (block3.is_used()) {
    TNode<Context> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block3, &tmp3, &tmp4);
    TNode<FeedbackVector> tmp5;
    USE(tmp5);
    tmp5 = TORQUE_CAST(TNode<HeapObject>{tmp4});
    ca_.Goto(&block2, tmp3, tmp4, tmp5);
  }

  if (block4.is_used()) {
    TNode<Context> tmp6;
    TNode<HeapObject> tmp7;
    ca_.Bind(&block4, &tmp6, &tmp7);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2415);
    ca_.Goto(&block1);
  }

  if (block2.is_used()) {
    TNode<Context> tmp8;
    TNode<HeapObject> tmp9;
    TNode<FeedbackVector> tmp10;
    ca_.Bind(&block2, &tmp8, &tmp9, &tmp10);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2412);
    ca_.Goto(&block5, tmp8, tmp9, tmp10);
  }

  if (block1.is_used()) {
    ca_.Bind(&block1);
    ca_.Goto(label_CastError);
  }

    TNode<Context> tmp11;
    TNode<HeapObject> tmp12;
    TNode<FeedbackVector> tmp13;
    ca_.Bind(&block5, &tmp11, &tmp12, &tmp13);
  return TNode<FeedbackVector>{tmp13};
}

TNode<JSPrimitiveWrapper> Cast18JSPrimitiveWrapper_134(compiler::CodeAssemblerState* state_, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, JSPrimitiveWrapper> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, JSPrimitiveWrapper> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<HeapObject> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2420);
    TNode<BoolT> tmp1;
    USE(tmp1);
    tmp1 = CodeStubAssembler(state_).IsJSPrimitiveWrapper(TNode<HeapObject>{tmp0});
    ca_.Branch(tmp1, &block3, &block4, tmp0);
  }

  if (block3.is_used()) {
    TNode<HeapObject> tmp2;
    ca_.Bind(&block3, &tmp2);
    TNode<JSPrimitiveWrapper> tmp3;
    USE(tmp3);
    tmp3 = TORQUE_CAST(TNode<HeapObject>{tmp2});
    ca_.Goto(&block2, tmp2, tmp3);
  }

  if (block4.is_used()) {
    TNode<HeapObject> tmp4;
    ca_.Bind(&block4, &tmp4);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2421);
    ca_.Goto(&block1);
  }

  if (block2.is_used()) {
    TNode<HeapObject> tmp5;
    TNode<JSPrimitiveWrapper> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2418);
    ca_.Goto(&block5, tmp5, tmp6);
  }

  if (block1.is_used()) {
    ca_.Bind(&block1);
    ca_.Goto(label_CastError);
  }

    TNode<HeapObject> tmp7;
    TNode<JSPrimitiveWrapper> tmp8;
    ca_.Bind(&block5, &tmp7, &tmp8);
  return TNode<JSPrimitiveWrapper>{tmp8};
}

TNode<JSArgumentsObjectWithLength> Cast27JSArgumentsObjectWithLength_135(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject, Map> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject, Map> block6(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject, Map> block7(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject, Map> block8(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject, Map> block9(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject, Map> block10(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject, Map> block11(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject, Map> block12(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject, Map> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject, JSArgumentsObjectWithLength> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject, JSArgumentsObjectWithLength> block13(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_context, p_o);

  if (block0.is_used()) {
    TNode<Context> tmp0;
    TNode<HeapObject> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2427);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(HeapObject::kMapOffset);
    USE(tmp2);
    TNode<Map>tmp3 = CodeStubAssembler(state_).LoadReference<Map>(CodeStubAssembler::Reference{tmp1, tmp2});
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2429);
    TNode<BoolT> tmp4;
    USE(tmp4);
    tmp4 = CodeStubAssembler(state_).IsFastAliasedArgumentsMap(TNode<Context>{tmp0}, TNode<Map>{tmp3});
    ca_.Branch(tmp4, &block5, &block6, tmp0, tmp1, tmp3);
  }

  if (block5.is_used()) {
    TNode<Context> tmp5;
    TNode<HeapObject> tmp6;
    TNode<Map> tmp7;
    ca_.Bind(&block5, &tmp5, &tmp6, &tmp7);
    ca_.Goto(&block4, tmp5, tmp6, tmp7);
  }

  if (block6.is_used()) {
    TNode<Context> tmp8;
    TNode<HeapObject> tmp9;
    TNode<Map> tmp10;
    ca_.Bind(&block6, &tmp8, &tmp9, &tmp10);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2430);
    TNode<BoolT> tmp11;
    USE(tmp11);
    tmp11 = CodeStubAssembler(state_).IsSloppyArgumentsMap(TNode<Context>{tmp8}, TNode<Map>{tmp10});
    ca_.Branch(tmp11, &block7, &block8, tmp8, tmp9, tmp10);
  }

  if (block7.is_used()) {
    TNode<Context> tmp12;
    TNode<HeapObject> tmp13;
    TNode<Map> tmp14;
    ca_.Bind(&block7, &tmp12, &tmp13, &tmp14);
    ca_.Goto(&block4, tmp12, tmp13, tmp14);
  }

  if (block8.is_used()) {
    TNode<Context> tmp15;
    TNode<HeapObject> tmp16;
    TNode<Map> tmp17;
    ca_.Bind(&block8, &tmp15, &tmp16, &tmp17);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2431);
    TNode<BoolT> tmp18;
    USE(tmp18);
    tmp18 = CodeStubAssembler(state_).IsStrictArgumentsMap(TNode<Context>{tmp15}, TNode<Map>{tmp17});
    ca_.Branch(tmp18, &block9, &block10, tmp15, tmp16, tmp17);
  }

  if (block9.is_used()) {
    TNode<Context> tmp19;
    TNode<HeapObject> tmp20;
    TNode<Map> tmp21;
    ca_.Bind(&block9, &tmp19, &tmp20, &tmp21);
    ca_.Goto(&block4, tmp19, tmp20, tmp21);
  }

  if (block10.is_used()) {
    TNode<Context> tmp22;
    TNode<HeapObject> tmp23;
    TNode<Map> tmp24;
    ca_.Bind(&block10, &tmp22, &tmp23, &tmp24);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2432);
    TNode<BoolT> tmp25;
    USE(tmp25);
    tmp25 = CodeStubAssembler(state_).IsSlowAliasedArgumentsMap(TNode<Context>{tmp22}, TNode<Map>{tmp24});
    ca_.Branch(tmp25, &block11, &block12, tmp22, tmp23, tmp24);
  }

  if (block11.is_used()) {
    TNode<Context> tmp26;
    TNode<HeapObject> tmp27;
    TNode<Map> tmp28;
    ca_.Bind(&block11, &tmp26, &tmp27, &tmp28);
    ca_.Goto(&block4, tmp26, tmp27, tmp28);
  }

  if (block12.is_used()) {
    TNode<Context> tmp29;
    TNode<HeapObject> tmp30;
    TNode<Map> tmp31;
    ca_.Bind(&block12, &tmp29, &tmp30, &tmp31);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2433);
    ca_.Goto(&block1);
  }

  if (block4.is_used()) {
    TNode<Context> tmp32;
    TNode<HeapObject> tmp33;
    TNode<Map> tmp34;
    ca_.Bind(&block4, &tmp32, &tmp33, &tmp34);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2436);
    TNode<JSArgumentsObjectWithLength> tmp35;
    USE(tmp35);
    tmp35 = TORQUE_CAST(TNode<HeapObject>{tmp33});
    ca_.Goto(&block2, tmp32, tmp33, tmp35);
  }

  if (block2.is_used()) {
    TNode<Context> tmp36;
    TNode<HeapObject> tmp37;
    TNode<JSArgumentsObjectWithLength> tmp38;
    ca_.Bind(&block2, &tmp36, &tmp37, &tmp38);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2424);
    ca_.Goto(&block13, tmp36, tmp37, tmp38);
  }

  if (block1.is_used()) {
    ca_.Bind(&block1);
    ca_.Goto(label_CastError);
  }

    TNode<Context> tmp39;
    TNode<HeapObject> tmp40;
    TNode<JSArgumentsObjectWithLength> tmp41;
    ca_.Bind(&block13, &tmp39, &tmp40, &tmp41);
  return TNode<JSArgumentsObjectWithLength>{tmp41};
}

TNode<JSRegExp> Cast14ATFastJSRegExp_136(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject, JSRegExp> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject, JSRegExp> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_context, p_o);

  if (block0.is_used()) {
    TNode<Context> tmp0;
    TNode<HeapObject> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2446);
    TNode<BoolT> tmp2;
    USE(tmp2);
    tmp2 = IsFastRegExpStrict_333(state_, TNode<Context>{tmp0}, TNode<HeapObject>{tmp1});
    ca_.Branch(tmp2, &block3, &block4, tmp0, tmp1);
  }

  if (block3.is_used()) {
    TNode<Context> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block3, &tmp3, &tmp4);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2447);
    TNode<JSRegExp> tmp5;
    USE(tmp5);
    tmp5 = TORQUE_CAST(TNode<HeapObject>{tmp4});
    ca_.Goto(&block2, tmp3, tmp4, tmp5);
  }

  if (block4.is_used()) {
    TNode<Context> tmp6;
    TNode<HeapObject> tmp7;
    ca_.Bind(&block4, &tmp6, &tmp7);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2449);
    ca_.Goto(&block1);
  }

  if (block2.is_used()) {
    TNode<Context> tmp8;
    TNode<HeapObject> tmp9;
    TNode<JSRegExp> tmp10;
    ca_.Bind(&block2, &tmp8, &tmp9, &tmp10);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2440);
    ca_.Goto(&block5, tmp8, tmp9, tmp10);
  }

  if (block1.is_used()) {
    ca_.Bind(&block1);
    ca_.Goto(label_CastError);
  }

    TNode<Context> tmp11;
    TNode<HeapObject> tmp12;
    TNode<JSRegExp> tmp13;
    ca_.Bind(&block5, &tmp11, &tmp12, &tmp13);
  return TNode<JSRegExp>{tmp13};
}

TNode<JSArray> Cast13ATFastJSArray_137(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject, Map> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject, Map> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject, Map, Int32T> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject, Map, Int32T> block6(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject, Map, Int32T> block7(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject, Map, Int32T> block8(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject, Map, Int32T> block9(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject, Map, Int32T> block10(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject, JSArray> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject, JSArray> block11(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_context, p_o);

  if (block0.is_used()) {
    TNode<Context> tmp0;
    TNode<HeapObject> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2454);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(HeapObject::kMapOffset);
    USE(tmp2);
    TNode<Map>tmp3 = CodeStubAssembler(state_).LoadReference<Map>(CodeStubAssembler::Reference{tmp1, tmp2});
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2455);
    TNode<BoolT> tmp4;
    USE(tmp4);
    tmp4 = CodeStubAssembler(state_).IsJSArrayMap(TNode<Map>{tmp3});
    TNode<BoolT> tmp5;
    USE(tmp5);
    tmp5 = CodeStubAssembler(state_).Word32BinaryNot(TNode<BoolT>{tmp4});
    ca_.Branch(tmp5, &block3, &block4, tmp0, tmp1, tmp3);
  }

  if (block3.is_used()) {
    TNode<Context> tmp6;
    TNode<HeapObject> tmp7;
    TNode<Map> tmp8;
    ca_.Bind(&block3, &tmp6, &tmp7, &tmp8);
    ca_.Goto(&block1);
  }

  if (block4.is_used()) {
    TNode<Context> tmp9;
    TNode<HeapObject> tmp10;
    TNode<Map> tmp11;
    ca_.Bind(&block4, &tmp9, &tmp10, &tmp11);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2458);
    TNode<Int32T> tmp12;
    USE(tmp12);
    tmp12 = CodeStubAssembler(state_).LoadMapElementsKind(TNode<Map>{tmp11});
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2459);
    TNode<BoolT> tmp13;
    USE(tmp13);
    tmp13 = CodeStubAssembler(state_).IsFastElementsKind(TNode<Int32T>{tmp12});
    TNode<BoolT> tmp14;
    USE(tmp14);
    tmp14 = CodeStubAssembler(state_).Word32BinaryNot(TNode<BoolT>{tmp13});
    ca_.Branch(tmp14, &block5, &block6, tmp9, tmp10, tmp11, tmp12);
  }

  if (block5.is_used()) {
    TNode<Context> tmp15;
    TNode<HeapObject> tmp16;
    TNode<Map> tmp17;
    TNode<Int32T> tmp18;
    ca_.Bind(&block5, &tmp15, &tmp16, &tmp17, &tmp18);
    ca_.Goto(&block1);
  }

  if (block6.is_used()) {
    TNode<Context> tmp19;
    TNode<HeapObject> tmp20;
    TNode<Map> tmp21;
    TNode<Int32T> tmp22;
    ca_.Bind(&block6, &tmp19, &tmp20, &tmp21, &tmp22);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2462);
    TNode<BoolT> tmp23;
    USE(tmp23);
    tmp23 = CodeStubAssembler(state_).IsPrototypeInitialArrayPrototype(TNode<Context>{tmp19}, TNode<Map>{tmp21});
    TNode<BoolT> tmp24;
    USE(tmp24);
    tmp24 = CodeStubAssembler(state_).Word32BinaryNot(TNode<BoolT>{tmp23});
    ca_.Branch(tmp24, &block7, &block8, tmp19, tmp20, tmp21, tmp22);
  }

  if (block7.is_used()) {
    TNode<Context> tmp25;
    TNode<HeapObject> tmp26;
    TNode<Map> tmp27;
    TNode<Int32T> tmp28;
    ca_.Bind(&block7, &tmp25, &tmp26, &tmp27, &tmp28);
    ca_.Goto(&block1);
  }

  if (block8.is_used()) {
    TNode<Context> tmp29;
    TNode<HeapObject> tmp30;
    TNode<Map> tmp31;
    TNode<Int32T> tmp32;
    ca_.Bind(&block8, &tmp29, &tmp30, &tmp31, &tmp32);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2464);
    TNode<BoolT> tmp33;
    USE(tmp33);
    tmp33 = CodeStubAssembler(state_).IsNoElementsProtectorCellInvalid();
    ca_.Branch(tmp33, &block9, &block10, tmp29, tmp30, tmp31, tmp32);
  }

  if (block9.is_used()) {
    TNode<Context> tmp34;
    TNode<HeapObject> tmp35;
    TNode<Map> tmp36;
    TNode<Int32T> tmp37;
    ca_.Bind(&block9, &tmp34, &tmp35, &tmp36, &tmp37);
    ca_.Goto(&block1);
  }

  if (block10.is_used()) {
    TNode<Context> tmp38;
    TNode<HeapObject> tmp39;
    TNode<Map> tmp40;
    TNode<Int32T> tmp41;
    ca_.Bind(&block10, &tmp38, &tmp39, &tmp40, &tmp41);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2465);
    TNode<JSArray> tmp42;
    USE(tmp42);
    tmp42 = TORQUE_CAST(TNode<HeapObject>{tmp39});
    ca_.Goto(&block2, tmp38, tmp39, tmp42);
  }

  if (block2.is_used()) {
    TNode<Context> tmp43;
    TNode<HeapObject> tmp44;
    TNode<JSArray> tmp45;
    ca_.Bind(&block2, &tmp43, &tmp44, &tmp45);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2452);
    ca_.Goto(&block11, tmp43, tmp44, tmp45);
  }

  if (block1.is_used()) {
    ca_.Bind(&block1);
    ca_.Goto(label_CastError);
  }

    TNode<Context> tmp46;
    TNode<HeapObject> tmp47;
    TNode<JSArray> tmp48;
    ca_.Bind(&block11, &tmp46, &tmp47, &tmp48);
  return TNode<JSArray>{tmp48};
}

TNode<JSArray> Cast20ATFastJSArrayForRead_138(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject, Map> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject, Map> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject, Map, Int32T> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject, Map, Int32T> block6(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject, Map, Int32T> block7(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject, Map, Int32T> block8(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject, Map, Int32T> block9(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject, Map, Int32T> block10(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject, JSArray> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject, JSArray> block11(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_context, p_o);

  if (block0.is_used()) {
    TNode<Context> tmp0;
    TNode<HeapObject> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2471);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(HeapObject::kMapOffset);
    USE(tmp2);
    TNode<Map>tmp3 = CodeStubAssembler(state_).LoadReference<Map>(CodeStubAssembler::Reference{tmp1, tmp2});
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2472);
    TNode<BoolT> tmp4;
    USE(tmp4);
    tmp4 = CodeStubAssembler(state_).IsJSArrayMap(TNode<Map>{tmp3});
    TNode<BoolT> tmp5;
    USE(tmp5);
    tmp5 = CodeStubAssembler(state_).Word32BinaryNot(TNode<BoolT>{tmp4});
    ca_.Branch(tmp5, &block3, &block4, tmp0, tmp1, tmp3);
  }

  if (block3.is_used()) {
    TNode<Context> tmp6;
    TNode<HeapObject> tmp7;
    TNode<Map> tmp8;
    ca_.Bind(&block3, &tmp6, &tmp7, &tmp8);
    ca_.Goto(&block1);
  }

  if (block4.is_used()) {
    TNode<Context> tmp9;
    TNode<HeapObject> tmp10;
    TNode<Map> tmp11;
    ca_.Bind(&block4, &tmp9, &tmp10, &tmp11);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2475);
    TNode<Int32T> tmp12;
    USE(tmp12);
    tmp12 = CodeStubAssembler(state_).LoadMapElementsKind(TNode<Map>{tmp11});
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2477);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2476);
    TNode<BoolT> tmp13;
    USE(tmp13);
    tmp13 = CodeStubAssembler(state_).IsElementsKindLessThanOrEqual(TNode<Int32T>{tmp12}, LAST_ANY_NONEXTENSIBLE_ELEMENTS_KIND);
    TNode<BoolT> tmp14;
    USE(tmp14);
    tmp14 = CodeStubAssembler(state_).Word32BinaryNot(TNode<BoolT>{tmp13});
    ca_.Branch(tmp14, &block5, &block6, tmp9, tmp10, tmp11, tmp12);
  }

  if (block5.is_used()) {
    TNode<Context> tmp15;
    TNode<HeapObject> tmp16;
    TNode<Map> tmp17;
    TNode<Int32T> tmp18;
    ca_.Bind(&block5, &tmp15, &tmp16, &tmp17, &tmp18);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2478);
    ca_.Goto(&block1);
  }

  if (block6.is_used()) {
    TNode<Context> tmp19;
    TNode<HeapObject> tmp20;
    TNode<Map> tmp21;
    TNode<Int32T> tmp22;
    ca_.Bind(&block6, &tmp19, &tmp20, &tmp21, &tmp22);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2481);
    TNode<BoolT> tmp23;
    USE(tmp23);
    tmp23 = CodeStubAssembler(state_).IsPrototypeInitialArrayPrototype(TNode<Context>{tmp19}, TNode<Map>{tmp21});
    TNode<BoolT> tmp24;
    USE(tmp24);
    tmp24 = CodeStubAssembler(state_).Word32BinaryNot(TNode<BoolT>{tmp23});
    ca_.Branch(tmp24, &block7, &block8, tmp19, tmp20, tmp21, tmp22);
  }

  if (block7.is_used()) {
    TNode<Context> tmp25;
    TNode<HeapObject> tmp26;
    TNode<Map> tmp27;
    TNode<Int32T> tmp28;
    ca_.Bind(&block7, &tmp25, &tmp26, &tmp27, &tmp28);
    ca_.Goto(&block1);
  }

  if (block8.is_used()) {
    TNode<Context> tmp29;
    TNode<HeapObject> tmp30;
    TNode<Map> tmp31;
    TNode<Int32T> tmp32;
    ca_.Bind(&block8, &tmp29, &tmp30, &tmp31, &tmp32);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2483);
    TNode<BoolT> tmp33;
    USE(tmp33);
    tmp33 = CodeStubAssembler(state_).IsNoElementsProtectorCellInvalid();
    ca_.Branch(tmp33, &block9, &block10, tmp29, tmp30, tmp31, tmp32);
  }

  if (block9.is_used()) {
    TNode<Context> tmp34;
    TNode<HeapObject> tmp35;
    TNode<Map> tmp36;
    TNode<Int32T> tmp37;
    ca_.Bind(&block9, &tmp34, &tmp35, &tmp36, &tmp37);
    ca_.Goto(&block1);
  }

  if (block10.is_used()) {
    TNode<Context> tmp38;
    TNode<HeapObject> tmp39;
    TNode<Map> tmp40;
    TNode<Int32T> tmp41;
    ca_.Bind(&block10, &tmp38, &tmp39, &tmp40, &tmp41);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2484);
    TNode<JSArray> tmp42;
    USE(tmp42);
    tmp42 = TORQUE_CAST(TNode<HeapObject>{tmp39});
    ca_.Goto(&block2, tmp38, tmp39, tmp42);
  }

  if (block2.is_used()) {
    TNode<Context> tmp43;
    TNode<HeapObject> tmp44;
    TNode<JSArray> tmp45;
    ca_.Bind(&block2, &tmp43, &tmp44, &tmp45);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2468);
    ca_.Goto(&block11, tmp43, tmp44, tmp45);
  }

  if (block1.is_used()) {
    ca_.Bind(&block1);
    ca_.Goto(label_CastError);
  }

    TNode<Context> tmp46;
    TNode<HeapObject> tmp47;
    TNode<JSArray> tmp48;
    ca_.Bind(&block11, &tmp46, &tmp47, &tmp48);
  return TNode<JSArray>{tmp48};
}

TNode<JSArray> Cast20ATFastJSArrayForCopy_139(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject, HeapObject> block6(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject, HeapObject, JSArray> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject, JSArray> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject, JSArray> block7(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_context, p_o);

  if (block0.is_used()) {
    TNode<Context> tmp0;
    TNode<HeapObject> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2490);
    TNode<BoolT> tmp2;
    USE(tmp2);
    tmp2 = CodeStubAssembler(state_).IsArraySpeciesProtectorCellInvalid();
    ca_.Branch(tmp2, &block3, &block4, tmp0, tmp1);
  }

  if (block3.is_used()) {
    TNode<Context> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block3, &tmp3, &tmp4);
    ca_.Goto(&block1);
  }

  if (block4.is_used()) {
    TNode<Context> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block4, &tmp5, &tmp6);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2491);
    TNode<JSArray> tmp7;
    USE(tmp7);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp7 = Cast13ATFastJSArray_137(state_, TNode<Context>{tmp5}, TNode<HeapObject>{tmp6}, &label0);
    ca_.Goto(&block5, tmp5, tmp6, tmp6, tmp7);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block6, tmp5, tmp6, tmp6);
    }
  }

  if (block6.is_used()) {
    TNode<Context> tmp8;
    TNode<HeapObject> tmp9;
    TNode<HeapObject> tmp10;
    ca_.Bind(&block6, &tmp8, &tmp9, &tmp10);
    ca_.Goto(&block1);
  }

  if (block5.is_used()) {
    TNode<Context> tmp11;
    TNode<HeapObject> tmp12;
    TNode<HeapObject> tmp13;
    TNode<JSArray> tmp14;
    ca_.Bind(&block5, &tmp11, &tmp12, &tmp13, &tmp14);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2492);
    TNode<JSArray> tmp15;
    USE(tmp15);
    tmp15 = (TNode<JSArray>{tmp14});
    ca_.Goto(&block2, tmp11, tmp12, tmp15);
  }

  if (block2.is_used()) {
    TNode<Context> tmp16;
    TNode<HeapObject> tmp17;
    TNode<JSArray> tmp18;
    ca_.Bind(&block2, &tmp16, &tmp17, &tmp18);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2487);
    ca_.Goto(&block7, tmp16, tmp17, tmp18);
  }

  if (block1.is_used()) {
    ca_.Bind(&block1);
    ca_.Goto(label_CastError);
  }

    TNode<Context> tmp19;
    TNode<HeapObject> tmp20;
    TNode<JSArray> tmp21;
    ca_.Bind(&block7, &tmp19, &tmp20, &tmp21);
  return TNode<JSArray>{tmp21};
}

TNode<JSArray> Cast34ATFastJSArrayWithNoCustomIteration_140(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject, HeapObject> block6(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject, HeapObject, JSArray> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject, JSArray> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject, JSArray> block7(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_context, p_o);

  if (block0.is_used()) {
    TNode<Context> tmp0;
    TNode<HeapObject> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2498);
    TNode<BoolT> tmp2;
    USE(tmp2);
    tmp2 = CodeStubAssembler(state_).IsArrayIteratorProtectorCellInvalid();
    ca_.Branch(tmp2, &block3, &block4, tmp0, tmp1);
  }

  if (block3.is_used()) {
    TNode<Context> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block3, &tmp3, &tmp4);
    ca_.Goto(&block1);
  }

  if (block4.is_used()) {
    TNode<Context> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block4, &tmp5, &tmp6);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2499);
    TNode<JSArray> tmp7;
    USE(tmp7);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp7 = Cast13ATFastJSArray_137(state_, TNode<Context>{tmp5}, TNode<HeapObject>{tmp6}, &label0);
    ca_.Goto(&block5, tmp5, tmp6, tmp6, tmp7);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block6, tmp5, tmp6, tmp6);
    }
  }

  if (block6.is_used()) {
    TNode<Context> tmp8;
    TNode<HeapObject> tmp9;
    TNode<HeapObject> tmp10;
    ca_.Bind(&block6, &tmp8, &tmp9, &tmp10);
    ca_.Goto(&block1);
  }

  if (block5.is_used()) {
    TNode<Context> tmp11;
    TNode<HeapObject> tmp12;
    TNode<HeapObject> tmp13;
    TNode<JSArray> tmp14;
    ca_.Bind(&block5, &tmp11, &tmp12, &tmp13, &tmp14);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2500);
    TNode<JSArray> tmp15;
    USE(tmp15);
    tmp15 = (TNode<JSArray>{tmp14});
    ca_.Goto(&block2, tmp11, tmp12, tmp15);
  }

  if (block2.is_used()) {
    TNode<Context> tmp16;
    TNode<HeapObject> tmp17;
    TNode<JSArray> tmp18;
    ca_.Bind(&block2, &tmp16, &tmp17, &tmp18);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2495);
    ca_.Goto(&block7, tmp16, tmp17, tmp18);
  }

  if (block1.is_used()) {
    ca_.Bind(&block1);
    ca_.Goto(label_CastError);
  }

    TNode<Context> tmp19;
    TNode<HeapObject> tmp20;
    TNode<JSArray> tmp21;
    ca_.Bind(&block7, &tmp19, &tmp20, &tmp21);
  return TNode<JSArray>{tmp21};
}

TNode<JSArray> Cast41ATFastJSArrayForReadWithNoCustomIteration_141(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject, HeapObject> block6(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject, HeapObject, JSArray> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject, JSArray> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject, JSArray> block7(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_context, p_o);

  if (block0.is_used()) {
    TNode<Context> tmp0;
    TNode<HeapObject> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2506);
    TNode<BoolT> tmp2;
    USE(tmp2);
    tmp2 = CodeStubAssembler(state_).IsArrayIteratorProtectorCellInvalid();
    ca_.Branch(tmp2, &block3, &block4, tmp0, tmp1);
  }

  if (block3.is_used()) {
    TNode<Context> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block3, &tmp3, &tmp4);
    ca_.Goto(&block1);
  }

  if (block4.is_used()) {
    TNode<Context> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block4, &tmp5, &tmp6);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2507);
    TNode<JSArray> tmp7;
    USE(tmp7);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp7 = Cast20ATFastJSArrayForRead_138(state_, TNode<Context>{tmp5}, TNode<HeapObject>{tmp6}, &label0);
    ca_.Goto(&block5, tmp5, tmp6, tmp6, tmp7);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block6, tmp5, tmp6, tmp6);
    }
  }

  if (block6.is_used()) {
    TNode<Context> tmp8;
    TNode<HeapObject> tmp9;
    TNode<HeapObject> tmp10;
    ca_.Bind(&block6, &tmp8, &tmp9, &tmp10);
    ca_.Goto(&block1);
  }

  if (block5.is_used()) {
    TNode<Context> tmp11;
    TNode<HeapObject> tmp12;
    TNode<HeapObject> tmp13;
    TNode<JSArray> tmp14;
    ca_.Bind(&block5, &tmp11, &tmp12, &tmp13, &tmp14);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2508);
    TNode<JSArray> tmp15;
    USE(tmp15);
    tmp15 = (TNode<JSArray>{tmp14});
    ca_.Goto(&block2, tmp11, tmp12, tmp15);
  }

  if (block2.is_used()) {
    TNode<Context> tmp16;
    TNode<HeapObject> tmp17;
    TNode<JSArray> tmp18;
    ca_.Bind(&block2, &tmp16, &tmp17, &tmp18);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2503);
    ca_.Goto(&block7, tmp16, tmp17, tmp18);
  }

  if (block1.is_used()) {
    ca_.Bind(&block1);
    ca_.Goto(label_CastError);
  }

    TNode<Context> tmp19;
    TNode<HeapObject> tmp20;
    TNode<JSArray> tmp21;
    ca_.Bind(&block7, &tmp19, &tmp20, &tmp21);
  return TNode<JSArray>{tmp21};
}

TNode<JSReceiver> Cast10JSReceiver_142(compiler::CodeAssemblerState* state_, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, JSReceiver> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, JSReceiver> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<HeapObject> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2513);
    TNode<BoolT> tmp1;
    USE(tmp1);
    tmp1 = CodeStubAssembler(state_).IsJSReceiver(TNode<HeapObject>{tmp0});
    ca_.Branch(tmp1, &block3, &block4, tmp0);
  }

  if (block3.is_used()) {
    TNode<HeapObject> tmp2;
    ca_.Bind(&block3, &tmp2);
    TNode<JSReceiver> tmp3;
    USE(tmp3);
    tmp3 = TORQUE_CAST(TNode<HeapObject>{tmp2});
    ca_.Goto(&block2, tmp2, tmp3);
  }

  if (block4.is_used()) {
    TNode<HeapObject> tmp4;
    ca_.Bind(&block4, &tmp4);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2514);
    ca_.Goto(&block1);
  }

  if (block2.is_used()) {
    TNode<HeapObject> tmp5;
    TNode<JSReceiver> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2511);
    ca_.Goto(&block5, tmp5, tmp6);
  }

  if (block1.is_used()) {
    ca_.Bind(&block1);
    ca_.Goto(label_CastError);
  }

    TNode<HeapObject> tmp7;
    TNode<JSReceiver> tmp8;
    ca_.Bind(&block5, &tmp7, &tmp8);
  return TNode<JSReceiver>{tmp8};
}

TNode<JSFunction> Cast10JSFunction_143(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject, JSFunction> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject, JSFunction> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_context, p_o);

  if (block0.is_used()) {
    TNode<Context> tmp0;
    TNode<HeapObject> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2519);
    TNode<BoolT> tmp2;
    USE(tmp2);
    tmp2 = CodeStubAssembler(state_).IsJSFunction(TNode<HeapObject>{tmp1});
    ca_.Branch(tmp2, &block3, &block4, tmp0, tmp1);
  }

  if (block3.is_used()) {
    TNode<Context> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block3, &tmp3, &tmp4);
    TNode<JSFunction> tmp5;
    USE(tmp5);
    tmp5 = TORQUE_CAST(TNode<HeapObject>{tmp4});
    ca_.Goto(&block2, tmp3, tmp4, tmp5);
  }

  if (block4.is_used()) {
    TNode<Context> tmp6;
    TNode<HeapObject> tmp7;
    ca_.Bind(&block4, &tmp6, &tmp7);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2520);
    ca_.Goto(&block1);
  }

  if (block2.is_used()) {
    TNode<Context> tmp8;
    TNode<HeapObject> tmp9;
    TNode<JSFunction> tmp10;
    ca_.Bind(&block2, &tmp8, &tmp9, &tmp10);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2517);
    ca_.Goto(&block5, tmp8, tmp9, tmp10);
  }

  if (block1.is_used()) {
    ca_.Bind(&block1);
    ca_.Goto(label_CastError);
  }

    TNode<Context> tmp11;
    TNode<HeapObject> tmp12;
    TNode<JSFunction> tmp13;
    ca_.Bind(&block5, &tmp11, &tmp12, &tmp13);
  return TNode<JSFunction>{tmp13};
}

TNode<DebugInfo> Cast9DebugInfo_144(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject, DebugInfo> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject, DebugInfo> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_context, p_o);

  if (block0.is_used()) {
    TNode<Context> tmp0;
    TNode<HeapObject> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2526);
    TNode<BoolT> tmp2;
    USE(tmp2);
    tmp2 = CodeStubAssembler(state_).IsDebugInfo(TNode<HeapObject>{tmp1});
    ca_.Branch(tmp2, &block3, &block4, tmp0, tmp1);
  }

  if (block3.is_used()) {
    TNode<Context> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block3, &tmp3, &tmp4);
    TNode<DebugInfo> tmp5;
    USE(tmp5);
    tmp5 = TORQUE_CAST(TNode<HeapObject>{tmp4});
    ca_.Goto(&block2, tmp3, tmp4, tmp5);
  }

  if (block4.is_used()) {
    TNode<Context> tmp6;
    TNode<HeapObject> tmp7;
    ca_.Bind(&block4, &tmp6, &tmp7);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2527);
    ca_.Goto(&block1);
  }

  if (block2.is_used()) {
    TNode<Context> tmp8;
    TNode<HeapObject> tmp9;
    TNode<DebugInfo> tmp10;
    ca_.Bind(&block2, &tmp8, &tmp9, &tmp10);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2524);
    ca_.Goto(&block5, tmp8, tmp9, tmp10);
  }

  if (block1.is_used()) {
    ca_.Bind(&block1);
    ca_.Goto(label_CastError);
  }

    TNode<Context> tmp11;
    TNode<HeapObject> tmp12;
    TNode<DebugInfo> tmp13;
    ca_.Bind(&block5, &tmp11, &tmp12, &tmp13);
  return TNode<DebugInfo>{tmp13};
}

TNode<FixedArray> Cast14ATCoverageInfo_145(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject, FixedArray> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, HeapObject, FixedArray> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_context, p_o);

  if (block0.is_used()) {
    TNode<Context> tmp0;
    TNode<HeapObject> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2534);
    TNode<BoolT> tmp2;
    USE(tmp2);
    tmp2 = CodeStubAssembler(state_).IsFixedArray(TNode<HeapObject>{tmp1});
    ca_.Branch(tmp2, &block3, &block4, tmp0, tmp1);
  }

  if (block3.is_used()) {
    TNode<Context> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block3, &tmp3, &tmp4);
    TNode<FixedArray> tmp5;
    USE(tmp5);
    tmp5 = TORQUE_CAST(TNode<HeapObject>{tmp4});
    ca_.Goto(&block2, tmp3, tmp4, tmp5);
  }

  if (block4.is_used()) {
    TNode<Context> tmp6;
    TNode<HeapObject> tmp7;
    ca_.Bind(&block4, &tmp6, &tmp7);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2535);
    ca_.Goto(&block1);
  }

  if (block2.is_used()) {
    TNode<Context> tmp8;
    TNode<HeapObject> tmp9;
    TNode<FixedArray> tmp10;
    ca_.Bind(&block2, &tmp8, &tmp9, &tmp10);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2531);
    ca_.Goto(&block5, tmp8, tmp9, tmp10);
  }

  if (block1.is_used()) {
    ca_.Bind(&block1);
    ca_.Goto(label_CastError);
  }

    TNode<Context> tmp11;
    TNode<HeapObject> tmp12;
    TNode<FixedArray> tmp13;
    ca_.Bind(&block5, &tmp11, &tmp12, &tmp13);
  return TNode<FixedArray>{tmp13};
}

TNode<HeapObject> Cast21UT6ATNull10JSReceiver_146(compiler::CodeAssemblerState* state_, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, HeapObject, HeapObject> block6(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, HeapObject, HeapObject, Oddball> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, HeapObject> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, HeapObject, HeapObject> block10(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, HeapObject, HeapObject, JSReceiver> block9(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, HeapObject> block8(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, HeapObject> block11(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<HeapObject> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2540);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2541);
    TNode<Oddball> tmp1;
    USE(tmp1);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp1 = Cast6ATNull_101(state_, TNode<HeapObject>{tmp0}, &label0);
    ca_.Goto(&block5, tmp0, tmp0, tmp0, tmp1);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block6, tmp0, tmp0, tmp0);
    }
  }

  if (block6.is_used()) {
    TNode<HeapObject> tmp2;
    TNode<HeapObject> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block6, &tmp2, &tmp3, &tmp4);
    ca_.Goto(&block4, tmp2, tmp3);
  }

  if (block5.is_used()) {
    TNode<HeapObject> tmp5;
    TNode<HeapObject> tmp6;
    TNode<HeapObject> tmp7;
    TNode<Oddball> tmp8;
    ca_.Bind(&block5, &tmp5, &tmp6, &tmp7, &tmp8);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2542);
    ca_.Goto(&block2, tmp5, tmp8);
  }

  if (block4.is_used()) {
    TNode<HeapObject> tmp9;
    TNode<HeapObject> tmp10;
    ca_.Bind(&block4, &tmp9, &tmp10);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2544);
    TNode<JSReceiver> tmp11;
    USE(tmp11);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp11 = Cast10JSReceiver_142(state_, TNode<HeapObject>{ca_.UncheckedCast<HeapObject>(tmp10)}, &label0);
    ca_.Goto(&block9, tmp9, tmp10, ca_.UncheckedCast<HeapObject>(tmp10), tmp11);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block10, tmp9, tmp10, ca_.UncheckedCast<HeapObject>(tmp10));
    }
  }

  if (block10.is_used()) {
    TNode<HeapObject> tmp12;
    TNode<HeapObject> tmp13;
    TNode<HeapObject> tmp14;
    ca_.Bind(&block10, &tmp12, &tmp13, &tmp14);
    ca_.Goto(&block8, tmp12, tmp13);
  }

  if (block9.is_used()) {
    TNode<HeapObject> tmp15;
    TNode<HeapObject> tmp16;
    TNode<HeapObject> tmp17;
    TNode<JSReceiver> tmp18;
    ca_.Bind(&block9, &tmp15, &tmp16, &tmp17, &tmp18);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2545);
    ca_.Goto(&block2, tmp15, tmp18);
  }

  if (block8.is_used()) {
    TNode<HeapObject> tmp19;
    TNode<HeapObject> tmp20;
    ca_.Bind(&block8, &tmp19, &tmp20);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2547);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2548);
    ca_.Goto(&block1);
  }

  if (block2.is_used()) {
    TNode<HeapObject> tmp21;
    TNode<HeapObject> tmp22;
    ca_.Bind(&block2, &tmp21, &tmp22);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2538);
    ca_.Goto(&block11, tmp21, tmp22);
  }

  if (block1.is_used()) {
    ca_.Bind(&block1);
    ca_.Goto(label_CastError);
  }

    TNode<HeapObject> tmp23;
    TNode<HeapObject> tmp24;
    ca_.Bind(&block11, &tmp23, &tmp24);
  return TNode<HeapObject>{tmp24};
}

TNode<Int32T> FromConstexpr7ATint3117ATconstexpr_int31_147(compiler::CodeAssemblerState* state_, int31_t p_i) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Int32T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Int32T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0);

  if (block0.is_used()) {
    ca_.Bind(&block0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2619);
    TNode<Int32T> tmp0;
    USE(tmp0);
    tmp0 = ca_.Int32Constant(p_i);
    ca_.Goto(&block1, tmp0);
  }

  if (block1.is_used()) {
    TNode<Int32T> tmp1;
    ca_.Bind(&block1, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2618);
    ca_.Goto(&block2, tmp1);
  }

    TNode<Int32T> tmp2;
    ca_.Bind(&block2, &tmp2);
  return TNode<Int32T>{tmp2};
}

TNode<Int32T> FromConstexpr7ATint3217ATconstexpr_int31_148(compiler::CodeAssemblerState* state_, int31_t p_i) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Int32T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Int32T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0);

  if (block0.is_used()) {
    ca_.Bind(&block0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2622);
    TNode<Int32T> tmp0;
    USE(tmp0);
    tmp0 = ca_.Int32Constant(p_i);
    ca_.Goto(&block1, tmp0);
  }

  if (block1.is_used()) {
    TNode<Int32T> tmp1;
    ca_.Bind(&block1, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2621);
    ca_.Goto(&block2, tmp1);
  }

    TNode<Int32T> tmp2;
    ca_.Bind(&block2, &tmp2);
  return TNode<Int32T>{tmp2};
}

TNode<Int32T> FromConstexpr7ATint3217ATconstexpr_int32_149(compiler::CodeAssemblerState* state_, int32_t p_i) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Int32T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Int32T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0);

  if (block0.is_used()) {
    ca_.Bind(&block0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2625);
    TNode<Int32T> tmp0;
    USE(tmp0);
    tmp0 = ca_.Int32Constant(p_i);
    ca_.Goto(&block1, tmp0);
  }

  if (block1.is_used()) {
    TNode<Int32T> tmp1;
    ca_.Bind(&block1, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2624);
    ca_.Goto(&block2, tmp1);
  }

    TNode<Int32T> tmp2;
    ca_.Bind(&block2, &tmp2);
  return TNode<Int32T>{tmp2};
}

TNode<IntPtrT> FromConstexpr8ATintptr17ATconstexpr_int31_150(compiler::CodeAssemblerState* state_, int31_t p_i) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<IntPtrT> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<IntPtrT> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0);

  if (block0.is_used()) {
    ca_.Bind(&block0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2628);
    TNode<IntPtrT> tmp0;
    USE(tmp0);
    tmp0 = ca_.IntPtrConstant(p_i);
    ca_.Goto(&block1, tmp0);
  }

  if (block1.is_used()) {
    TNode<IntPtrT> tmp1;
    ca_.Bind(&block1, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2627);
    ca_.Goto(&block2, tmp1);
  }

    TNode<IntPtrT> tmp2;
    ca_.Bind(&block2, &tmp2);
  return TNode<IntPtrT>{tmp2};
}

TNode<IntPtrT> FromConstexpr8ATintptr17ATconstexpr_int32_151(compiler::CodeAssemblerState* state_, int32_t p_i) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<IntPtrT> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<IntPtrT> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0);

  if (block0.is_used()) {
    ca_.Bind(&block0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2631);
    TNode<IntPtrT> tmp0;
    USE(tmp0);
    tmp0 = ca_.IntPtrConstant(p_i);
    ca_.Goto(&block1, tmp0);
  }

  if (block1.is_used()) {
    TNode<IntPtrT> tmp1;
    ca_.Bind(&block1, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2630);
    ca_.Goto(&block2, tmp1);
  }

    TNode<IntPtrT> tmp2;
    ca_.Bind(&block2, &tmp2);
  return TNode<IntPtrT>{tmp2};
}

TNode<IntPtrT> FromConstexpr8ATintptr18ATconstexpr_intptr_152(compiler::CodeAssemblerState* state_, intptr_t p_i) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<IntPtrT> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<IntPtrT> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0);

  if (block0.is_used()) {
    ca_.Bind(&block0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2634);
    TNode<IntPtrT> tmp0;
    USE(tmp0);
    tmp0 = ca_.IntPtrConstant(p_i);
    ca_.Goto(&block1, tmp0);
  }

  if (block1.is_used()) {
    TNode<IntPtrT> tmp1;
    ca_.Bind(&block1, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2633);
    ca_.Goto(&block2, tmp1);
  }

    TNode<IntPtrT> tmp2;
    ca_.Bind(&block2, &tmp2);
  return TNode<IntPtrT>{tmp2};
}

TNode<UintPtrT> FromConstexpr9ATuintptr19ATconstexpr_uintptr_153(compiler::CodeAssemblerState* state_, uintptr_t p_i) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<UintPtrT> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<UintPtrT> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0);

  if (block0.is_used()) {
    ca_.Bind(&block0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2637);
    TNode<UintPtrT> tmp0;
    USE(tmp0);
    tmp0 = ca_.UintPtrConstant(p_i);
    ca_.Goto(&block1, tmp0);
  }

  if (block1.is_used()) {
    TNode<UintPtrT> tmp1;
    ca_.Bind(&block1, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2636);
    ca_.Goto(&block2, tmp1);
  }

    TNode<UintPtrT> tmp2;
    ca_.Bind(&block2, &tmp2);
  return TNode<UintPtrT>{tmp2};
}

TNode<Smi> FromConstexpr5ATSmi17ATconstexpr_int31_154(compiler::CodeAssemblerState* state_, int31_t p_i) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0);

  if (block0.is_used()) {
    ca_.Bind(&block0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2640);
    TNode<Smi> tmp0;
    USE(tmp0);
    tmp0 = ca_.SmiConstant(p_i);
    ca_.Goto(&block1, tmp0);
  }

  if (block1.is_used()) {
    TNode<Smi> tmp1;
    ca_.Bind(&block1, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2639);
    ca_.Goto(&block2, tmp1);
  }

    TNode<Smi> tmp2;
    ca_.Bind(&block2, &tmp2);
  return TNode<Smi>{tmp2};
}

TNode<Smi> FromConstexpr13ATPositiveSmi17ATconstexpr_int31_155(compiler::CodeAssemblerState* state_, int31_t p_i) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0);

  if (block0.is_used()) {
    ca_.Bind(&block0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2644);
    TNode<Smi> tmp0;
    USE(tmp0);
    tmp0 = ca_.SmiConstant(p_i);
    ca_.Goto(&block1, tmp0);
  }

  if (block1.is_used()) {
    TNode<Smi> tmp1;
    ca_.Bind(&block1, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2642);
    ca_.Goto(&block2, tmp1);
  }

    TNode<Smi> tmp2;
    ca_.Bind(&block2, &tmp2);
  return TNode<Smi>{tmp2};
}

TNode<String> FromConstexpr6String18ATconstexpr_string_156(compiler::CodeAssemblerState* state_, const char* p_s) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<String> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<String> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0);

  if (block0.is_used()) {
    ca_.Bind(&block0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2647);
    TNode<String> tmp0;
    USE(tmp0);
    tmp0 = ca_.StringConstant(p_s);
    ca_.Goto(&block1, tmp0);
  }

  if (block1.is_used()) {
    TNode<String> tmp1;
    ca_.Bind(&block1, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2646);
    ca_.Goto(&block2, tmp1);
  }

    TNode<String> tmp2;
    ca_.Bind(&block2, &tmp2);
  return TNode<String>{tmp2};
}

TNode<Number> FromConstexpr20UT5ATSmi10HeapNumber18ATconstexpr_uint32_157(compiler::CodeAssemblerState* state_, uint32_t p_i) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Number> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Number> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0);

  if (block0.is_used()) {
    ca_.Bind(&block0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2650);
    TNode<Number> tmp0;
    USE(tmp0);
    tmp0 = ca_.NumberConstant(p_i);
    ca_.Goto(&block1, tmp0);
  }

  if (block1.is_used()) {
    TNode<Number> tmp1;
    ca_.Bind(&block1, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2649);
    ca_.Goto(&block2, tmp1);
  }

    TNode<Number> tmp2;
    ca_.Bind(&block2, &tmp2);
  return TNode<Number>{tmp2};
}

TNode<Number> FromConstexpr20UT5ATSmi10HeapNumber17ATconstexpr_int32_158(compiler::CodeAssemblerState* state_, int32_t p_i) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Number> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Number> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0);

  if (block0.is_used()) {
    ca_.Bind(&block0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2653);
    TNode<Number> tmp0;
    USE(tmp0);
    tmp0 = ca_.NumberConstant(p_i);
    ca_.Goto(&block1, tmp0);
  }

  if (block1.is_used()) {
    TNode<Number> tmp1;
    ca_.Bind(&block1, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2652);
    ca_.Goto(&block2, tmp1);
  }

    TNode<Number> tmp2;
    ca_.Bind(&block2, &tmp2);
  return TNode<Number>{tmp2};
}

TNode<Number> FromConstexpr20UT5ATSmi10HeapNumber19ATconstexpr_float64_159(compiler::CodeAssemblerState* state_, double p_f) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Number> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Number> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0);

  if (block0.is_used()) {
    ca_.Bind(&block0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2656);
    TNode<Number> tmp0;
    USE(tmp0);
    tmp0 = ca_.NumberConstant(p_f);
    ca_.Goto(&block1, tmp0);
  }

  if (block1.is_used()) {
    TNode<Number> tmp1;
    ca_.Bind(&block1, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2655);
    ca_.Goto(&block2, tmp1);
  }

    TNode<Number> tmp2;
    ca_.Bind(&block2, &tmp2);
  return TNode<Number>{tmp2};
}

TNode<Number> FromConstexpr20UT5ATSmi10HeapNumber17ATconstexpr_int31_160(compiler::CodeAssemblerState* state_, int31_t p_i) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Number> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Number> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0);

  if (block0.is_used()) {
    ca_.Bind(&block0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2659);
    TNode<Number> tmp0;
    USE(tmp0);
    tmp0 = ca_.NumberConstant(p_i);
    ca_.Goto(&block1, tmp0);
  }

  if (block1.is_used()) {
    TNode<Number> tmp1;
    ca_.Bind(&block1, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2658);
    ca_.Goto(&block2, tmp1);
  }

    TNode<Number> tmp2;
    ca_.Bind(&block2, &tmp2);
  return TNode<Number>{tmp2};
}

TNode<Number> FromConstexpr20UT5ATSmi10HeapNumber15ATconstexpr_Smi_161(compiler::CodeAssemblerState* state_, Smi p_s) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Number> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Number> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0);

  if (block0.is_used()) {
    ca_.Bind(&block0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2662);
    TNode<Smi> tmp0;
    USE(tmp0);
    tmp0 = CodeStubAssembler(state_).SmiConstant(p_s);
    ca_.Goto(&block1, tmp0);
  }

  if (block1.is_used()) {
    TNode<Number> tmp1;
    ca_.Bind(&block1, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2661);
    ca_.Goto(&block2, tmp1);
  }

    TNode<Number> tmp2;
    ca_.Bind(&block2, &tmp2);
  return TNode<Number>{tmp2};
}

TNode<Smi> FromConstexpr5ATSmi15ATconstexpr_Smi_162(compiler::CodeAssemblerState* state_, Smi p_s) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0);

  if (block0.is_used()) {
    ca_.Bind(&block0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2665);
    TNode<Smi> tmp0;
    USE(tmp0);
    tmp0 = CodeStubAssembler(state_).SmiConstant(p_s);
    ca_.Goto(&block1, tmp0);
  }

  if (block1.is_used()) {
    TNode<Smi> tmp1;
    ca_.Bind(&block1, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2664);
    ca_.Goto(&block2, tmp1);
  }

    TNode<Smi> tmp2;
    ca_.Bind(&block2, &tmp2);
  return TNode<Smi>{tmp2};
}

TNode<Uint32T> FromConstexpr8ATuint3217ATconstexpr_int31_163(compiler::CodeAssemblerState* state_, int31_t p_i) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Uint32T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Uint32T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0);

  if (block0.is_used()) {
    ca_.Bind(&block0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2668);
    TNode<Int32T> tmp0;
    USE(tmp0);
    tmp0 = CodeStubAssembler(state_).Int32Constant(p_i);
    TNode<Uint32T> tmp1;
    USE(tmp1);
    tmp1 = CodeStubAssembler(state_).Unsigned(TNode<Int32T>{tmp0});
    ca_.Goto(&block1, tmp1);
  }

  if (block1.is_used()) {
    TNode<Uint32T> tmp2;
    ca_.Bind(&block1, &tmp2);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2667);
    ca_.Goto(&block2, tmp2);
  }

    TNode<Uint32T> tmp3;
    ca_.Bind(&block2, &tmp3);
  return TNode<Uint32T>{tmp3};
}

TNode<UintPtrT> FromConstexpr9ATuintptr17ATconstexpr_int31_164(compiler::CodeAssemblerState* state_, int31_t p_i) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<UintPtrT> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<UintPtrT> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0);

  if (block0.is_used()) {
    ca_.Bind(&block0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2671);
    TNode<Uint32T> tmp0;
    USE(tmp0);
    tmp0 = FromConstexpr8ATuint3217ATconstexpr_int31_163(state_, p_i);
    TNode<UintPtrT> tmp1;
    USE(tmp1);
    tmp1 = CodeStubAssembler(state_).ChangeUint32ToWord(TNode<Uint32T>{tmp0});
    ca_.Goto(&block1, tmp1);
  }

  if (block1.is_used()) {
    TNode<UintPtrT> tmp2;
    ca_.Bind(&block1, &tmp2);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2670);
    ca_.Goto(&block2, tmp2);
  }

    TNode<UintPtrT> tmp3;
    ca_.Bind(&block2, &tmp3);
  return TNode<UintPtrT>{tmp3};
}

TNode<Float64T> FromConstexpr9ATfloat6417ATconstexpr_int31_165(compiler::CodeAssemblerState* state_, int31_t p_i) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Float64T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Float64T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0);

  if (block0.is_used()) {
    ca_.Bind(&block0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2674);
    TNode<Float64T> tmp0;
    USE(tmp0);
    tmp0 = CodeStubAssembler(state_).Float64Constant(p_i);
    ca_.Goto(&block1, tmp0);
  }

  if (block1.is_used()) {
    TNode<Float64T> tmp1;
    ca_.Bind(&block1, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2673);
    ca_.Goto(&block2, tmp1);
  }

    TNode<Float64T> tmp2;
    ca_.Bind(&block2, &tmp2);
  return TNode<Float64T>{tmp2};
}

TNode<Float64T> FromConstexpr9ATfloat6419ATconstexpr_float64_166(compiler::CodeAssemblerState* state_, double p_i) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Float64T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Float64T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0);

  if (block0.is_used()) {
    ca_.Bind(&block0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2677);
    TNode<Float64T> tmp0;
    USE(tmp0);
    tmp0 = CodeStubAssembler(state_).Float64Constant(p_i);
    ca_.Goto(&block1, tmp0);
  }

  if (block1.is_used()) {
    TNode<Float64T> tmp1;
    ca_.Bind(&block1, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2676);
    ca_.Goto(&block2, tmp1);
  }

    TNode<Float64T> tmp2;
    ca_.Bind(&block2, &tmp2);
  return TNode<Float64T>{tmp2};
}

TNode<BoolT> FromConstexpr6ATbool16ATconstexpr_bool_167(compiler::CodeAssemblerState* state_, bool p_b) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<BoolT> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<BoolT> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0);

  if (block0.is_used()) {
    ca_.Bind(&block0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2680);
    TNode<BoolT> tmp0;
    USE(tmp0);
    tmp0 = CodeStubAssembler(state_).BoolConstant(p_b);
    ca_.Goto(&block1, tmp0);
  }

  if (block1.is_used()) {
    TNode<BoolT> tmp1;
    ca_.Bind(&block1, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2679);
    ca_.Goto(&block2, tmp1);
  }

    TNode<BoolT> tmp2;
    ca_.Bind(&block2, &tmp2);
  return TNode<BoolT>{tmp2};
}

TNode<Smi> FromConstexpr14ATLanguageMode24ATconstexpr_LanguageMode_168(compiler::CodeAssemblerState* state_, LanguageMode p_m) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0);

  if (block0.is_used()) {
    ca_.Bind(&block0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2684);
    TNode<Smi> tmp0;
    USE(tmp0);
    tmp0 = ca_.SmiConstant(p_m);
    TNode<Smi> tmp1;
    USE(tmp1);
    tmp1 = (TNode<Smi>{tmp0});
    ca_.Goto(&block1, tmp1);
  }

  if (block1.is_used()) {
    TNode<Smi> tmp2;
    ca_.Bind(&block1, &tmp2);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2682);
    ca_.Goto(&block2, tmp2);
  }

    TNode<Smi> tmp3;
    ca_.Bind(&block2, &tmp3);
  return TNode<Smi>{tmp3};
}

TNode<Int32T> FromConstexpr14ATElementsKind24ATconstexpr_ElementsKind_169(compiler::CodeAssemblerState* state_, ElementsKind p_e) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Int32T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Int32T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0);

  if (block0.is_used()) {
    ca_.Bind(&block0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2688);
    TNode<Int32T> tmp0;
    USE(tmp0);
    tmp0 = CodeStubAssembler(state_).Int32Constant(p_e);
    ca_.Goto(&block1, tmp0);
  }

  if (block1.is_used()) {
    TNode<Int32T> tmp1;
    ca_.Bind(&block1, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2686);
    ca_.Goto(&block2, tmp1);
  }

    TNode<Int32T> tmp2;
    ca_.Bind(&block2, &tmp2);
  return TNode<Int32T>{tmp2};
}

TNode<Object> FromConstexpr20UT5ATSmi10HeapObject18ATconstexpr_string_170(compiler::CodeAssemblerState* state_, const char* p_s) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0);

  if (block0.is_used()) {
    ca_.Bind(&block0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2691);
    TNode<String> tmp0;
    USE(tmp0);
    tmp0 = CodeStubAssembler(state_).StringConstant(p_s);
    ca_.Goto(&block1, tmp0);
  }

  if (block1.is_used()) {
    TNode<Object> tmp1;
    ca_.Bind(&block1, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2690);
    ca_.Goto(&block2, tmp1);
  }

    TNode<Object> tmp2;
    ca_.Bind(&block2, &tmp2);
  return TNode<Object>{tmp2};
}

TNode<Object> FromConstexpr90UT8ATBigInt7ATFalse6ATNull5ATSmi6ATTrue11ATUndefined10HeapNumber10JSReceiver6String6Symbol18ATconstexpr_string_171(compiler::CodeAssemblerState* state_, const char* p_s) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0);

  if (block0.is_used()) {
    ca_.Bind(&block0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2694);
    TNode<String> tmp0;
    USE(tmp0);
    tmp0 = CodeStubAssembler(state_).StringConstant(p_s);
    ca_.Goto(&block1, tmp0);
  }

  if (block1.is_used()) {
    TNode<Object> tmp1;
    ca_.Bind(&block1, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2693);
    ca_.Goto(&block2, tmp1);
  }

    TNode<Object> tmp2;
    ca_.Bind(&block2, &tmp2);
  return TNode<Object>{tmp2};
}

TNode<IntPtrT> FromConstexpr19ATNativeContextSlot29ATconstexpr_NativeContextSlot_172(compiler::CodeAssemblerState* state_, int32_t p_c) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<IntPtrT> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<IntPtrT> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0);

  if (block0.is_used()) {
    ca_.Bind(&block0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2698);
    TNode<IntPtrT> tmp0;
    USE(tmp0);
    tmp0 = CodeStubAssembler(state_).IntPtrConstant(p_c);
    ca_.Goto(&block1, tmp0);
  }

  if (block1.is_used()) {
    TNode<IntPtrT> tmp1;
    ca_.Bind(&block1, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2696);
    ca_.Goto(&block2, tmp1);
  }

    TNode<IntPtrT> tmp2;
    ca_.Bind(&block2, &tmp2);
  return TNode<IntPtrT>{tmp2};
}

TNode<IntPtrT> FromConstexpr13ATContextSlot23ATconstexpr_ContextSlot_173(compiler::CodeAssemblerState* state_, int32_t p_c) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<IntPtrT> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<IntPtrT> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0);

  if (block0.is_used()) {
    ca_.Bind(&block0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2702);
    TNode<IntPtrT> tmp0;
    USE(tmp0);
    tmp0 = CodeStubAssembler(state_).IntPtrConstant(p_c);
    ca_.Goto(&block1, tmp0);
  }

  if (block1.is_used()) {
    TNode<IntPtrT> tmp1;
    ca_.Bind(&block1, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2700);
    ca_.Goto(&block2, tmp1);
  }

    TNode<IntPtrT> tmp2;
    ca_.Bind(&block2, &tmp2);
  return TNode<IntPtrT>{tmp2};
}

TNode<Int32T> Convert7ATint3214ATElementsKind_174(compiler::CodeAssemblerState* state_, TNode<Int32T> p_elementsKind) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Int32T> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Int32T, Int32T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Int32T, Int32T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_elementsKind);

  if (block0.is_used()) {
    TNode<Int32T> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2715);
    TNode<Int32T> tmp1;
    USE(tmp1);
    tmp1 = CodeStubAssembler(state_).ConvertElementsKindToInt(TNode<Int32T>{tmp0});
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<Int32T> tmp2;
    TNode<Int32T> tmp3;
    ca_.Bind(&block1, &tmp2, &tmp3);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2714);
    ca_.Goto(&block2, tmp2, tmp3);
  }

    TNode<Int32T> tmp4;
    TNode<Int32T> tmp5;
    ca_.Bind(&block2, &tmp4, &tmp5);
  return TNode<Int32T>{tmp5};
}

TNode<Number> Convert20UT5ATSmi10HeapNumber7ATint32_175(compiler::CodeAssemblerState* state_, TNode<Int32T> p_i) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Int32T> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Int32T, Number> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Int32T, Number> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_i);

  if (block0.is_used()) {
    TNode<Int32T> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2718);
    TNode<Number> tmp1;
    USE(tmp1);
    tmp1 = CodeStubAssembler(state_).ChangeInt32ToTagged(TNode<Int32T>{tmp0});
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<Int32T> tmp2;
    TNode<Number> tmp3;
    ca_.Bind(&block1, &tmp2, &tmp3);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2717);
    ca_.Goto(&block2, tmp2, tmp3);
  }

    TNode<Int32T> tmp4;
    TNode<Number> tmp5;
    ca_.Bind(&block2, &tmp4, &tmp5);
  return TNode<Number>{tmp5};
}

TNode<IntPtrT> Convert8ATintptr7ATint32_176(compiler::CodeAssemblerState* state_, TNode<Int32T> p_i) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Int32T> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Int32T, IntPtrT> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Int32T, IntPtrT> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_i);

  if (block0.is_used()) {
    TNode<Int32T> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2721);
    TNode<IntPtrT> tmp1;
    USE(tmp1);
    tmp1 = CodeStubAssembler(state_).ChangeInt32ToIntPtr(TNode<Int32T>{tmp0});
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<Int32T> tmp2;
    TNode<IntPtrT> tmp3;
    ca_.Bind(&block1, &tmp2, &tmp3);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2720);
    ca_.Goto(&block2, tmp2, tmp3);
  }

    TNode<Int32T> tmp4;
    TNode<IntPtrT> tmp5;
    ca_.Bind(&block2, &tmp4, &tmp5);
  return TNode<IntPtrT>{tmp5};
}

TNode<IntPtrT> Convert8ATintptr8ATuint32_177(compiler::CodeAssemblerState* state_, TNode<Uint32T> p_i) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Uint32T> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Uint32T, IntPtrT> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Uint32T, IntPtrT> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_i);

  if (block0.is_used()) {
    TNode<Uint32T> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2724);
    TNode<UintPtrT> tmp1;
    USE(tmp1);
    tmp1 = CodeStubAssembler(state_).ChangeUint32ToWord(TNode<Uint32T>{tmp0});
    TNode<IntPtrT> tmp2;
    USE(tmp2);
    tmp2 = CodeStubAssembler(state_).Signed(TNode<UintPtrT>{tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<Uint32T> tmp3;
    TNode<IntPtrT> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2723);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Uint32T> tmp5;
    TNode<IntPtrT> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<IntPtrT>{tmp6};
}

TNode<Smi> Convert5ATSmi7ATint32_178(compiler::CodeAssemblerState* state_, TNode<Int32T> p_i) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Int32T> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Int32T, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Int32T, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_i);

  if (block0.is_used()) {
    TNode<Int32T> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2727);
    TNode<Smi> tmp1;
    USE(tmp1);
    tmp1 = CodeStubAssembler(state_).SmiFromInt32(TNode<Int32T>{tmp0});
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<Int32T> tmp2;
    TNode<Smi> tmp3;
    ca_.Bind(&block1, &tmp2, &tmp3);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2726);
    ca_.Goto(&block2, tmp2, tmp3);
  }

    TNode<Int32T> tmp4;
    TNode<Smi> tmp5;
    ca_.Bind(&block2, &tmp4, &tmp5);
  return TNode<Smi>{tmp5};
}

TNode<Number> Convert20UT5ATSmi10HeapNumber8ATuint32_179(compiler::CodeAssemblerState* state_, TNode<Uint32T> p_ui) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Uint32T> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Uint32T, Number> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Uint32T, Number> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_ui);

  if (block0.is_used()) {
    TNode<Uint32T> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2730);
    TNode<Number> tmp1;
    USE(tmp1);
    tmp1 = CodeStubAssembler(state_).ChangeUint32ToTagged(TNode<Uint32T>{tmp0});
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<Uint32T> tmp2;
    TNode<Number> tmp3;
    ca_.Bind(&block1, &tmp2, &tmp3);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2729);
    ca_.Goto(&block2, tmp2, tmp3);
  }

    TNode<Uint32T> tmp4;
    TNode<Number> tmp5;
    ca_.Bind(&block2, &tmp4, &tmp5);
  return TNode<Number>{tmp5};
}

TNode<Smi> Convert5ATSmi8ATuint32_180(compiler::CodeAssemblerState* state_, TNode<Uint32T> p_ui) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Uint32T> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Uint32T, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Uint32T, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_ui);

  if (block0.is_used()) {
    TNode<Uint32T> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2733);
    TNode<Smi> tmp1;
    USE(tmp1);
    tmp1 = CodeStubAssembler(state_).SmiFromUint32(TNode<Uint32T>{tmp0});
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<Uint32T> tmp2;
    TNode<Smi> tmp3;
    ca_.Bind(&block1, &tmp2, &tmp3);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2732);
    ca_.Goto(&block2, tmp2, tmp3);
  }

    TNode<Uint32T> tmp4;
    TNode<Smi> tmp5;
    ca_.Bind(&block2, &tmp4, &tmp5);
  return TNode<Smi>{tmp5};
}

TNode<UintPtrT> Convert9ATuintptr8ATuint32_181(compiler::CodeAssemblerState* state_, TNode<Uint32T> p_ui) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Uint32T> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Uint32T, UintPtrT> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Uint32T, UintPtrT> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_ui);

  if (block0.is_used()) {
    TNode<Uint32T> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2736);
    TNode<UintPtrT> tmp1;
    USE(tmp1);
    tmp1 = CodeStubAssembler(state_).ChangeUint32ToWord(TNode<Uint32T>{tmp0});
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<Uint32T> tmp2;
    TNode<UintPtrT> tmp3;
    ca_.Bind(&block1, &tmp2, &tmp3);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2735);
    ca_.Goto(&block2, tmp2, tmp3);
  }

    TNode<Uint32T> tmp4;
    TNode<UintPtrT> tmp5;
    ca_.Bind(&block2, &tmp4, &tmp5);
  return TNode<UintPtrT>{tmp5};
}

TNode<Int32T> Convert7ATint327ATuint8_182(compiler::CodeAssemblerState* state_, TNode<Uint8T> p_i) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Uint8T> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Uint8T, Int32T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Uint8T, Int32T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_i);

  if (block0.is_used()) {
    TNode<Uint8T> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2739);
    TNode<Uint32T> tmp1;
    USE(tmp1);
    tmp1 = Convert8ATuint327ATuint8_1471(state_, TNode<Uint8T>{tmp0});
    TNode<Int32T> tmp2;
    USE(tmp2);
    tmp2 = CodeStubAssembler(state_).Signed(TNode<Uint32T>{tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<Uint8T> tmp3;
    TNode<Int32T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2738);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Uint8T> tmp5;
    TNode<Int32T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Int32T>{tmp6};
}

TNode<Int32T> Convert7ATint328ATuint16_183(compiler::CodeAssemblerState* state_, TNode<Uint16T> p_i) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Uint16T> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Uint16T, Int32T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Uint16T, Int32T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_i);

  if (block0.is_used()) {
    TNode<Uint16T> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2742);
    TNode<Uint32T> tmp1;
    USE(tmp1);
    tmp1 = Convert8ATuint328ATuint16_1472(state_, TNode<Uint16T>{tmp0});
    TNode<Int32T> tmp2;
    USE(tmp2);
    tmp2 = CodeStubAssembler(state_).Signed(TNode<Uint32T>{tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<Uint16T> tmp3;
    TNode<Int32T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2741);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Uint16T> tmp5;
    TNode<Int32T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Int32T>{tmp6};
}

TNode<Int32T> Convert7ATint328ATuint31_184(compiler::CodeAssemblerState* state_, TNode<Uint32T> p_i) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Uint32T> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Uint32T, Int32T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Uint32T, Int32T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_i);

  if (block0.is_used()) {
    TNode<Uint32T> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2745);
    TNode<Uint32T> tmp1;
    USE(tmp1);
    tmp1 = Convert8ATuint328ATuint31_1473(state_, TNode<Uint32T>{tmp0});
    TNode<Int32T> tmp2;
    USE(tmp2);
    tmp2 = CodeStubAssembler(state_).Signed(TNode<Uint32T>{tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<Uint32T> tmp3;
    TNode<Int32T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2744);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Uint32T> tmp5;
    TNode<Int32T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Int32T>{tmp6};
}

TNode<Int32T> Convert7ATint328ATintptr_185(compiler::CodeAssemblerState* state_, TNode<IntPtrT> p_i) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<IntPtrT> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<IntPtrT, Int32T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<IntPtrT, Int32T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_i);

  if (block0.is_used()) {
    TNode<IntPtrT> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2748);
    TNode<Int32T> tmp1;
    USE(tmp1);
    tmp1 = CodeStubAssembler(state_).TruncateIntPtrToInt32(TNode<IntPtrT>{tmp0});
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<IntPtrT> tmp2;
    TNode<Int32T> tmp3;
    ca_.Bind(&block1, &tmp2, &tmp3);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2747);
    ca_.Goto(&block2, tmp2, tmp3);
  }

    TNode<IntPtrT> tmp4;
    TNode<Int32T> tmp5;
    ca_.Bind(&block2, &tmp4, &tmp5);
  return TNode<Int32T>{tmp5};
}

TNode<Smi> Convert5ATSmi8ATintptr_186(compiler::CodeAssemblerState* state_, TNode<IntPtrT> p_i) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<IntPtrT> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<IntPtrT, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<IntPtrT, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_i);

  if (block0.is_used()) {
    TNode<IntPtrT> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2751);
    TNode<Smi> tmp1;
    USE(tmp1);
    tmp1 = CodeStubAssembler(state_).SmiTag(TNode<IntPtrT>{tmp0});
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<IntPtrT> tmp2;
    TNode<Smi> tmp3;
    ca_.Bind(&block1, &tmp2, &tmp3);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2750);
    ca_.Goto(&block2, tmp2, tmp3);
  }

    TNode<IntPtrT> tmp4;
    TNode<Smi> tmp5;
    ca_.Bind(&block2, &tmp4, &tmp5);
  return TNode<Smi>{tmp5};
}

TNode<Uint32T> Convert8ATuint329ATuintptr_187(compiler::CodeAssemblerState* state_, TNode<UintPtrT> p_ui) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<UintPtrT> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<UintPtrT, Uint32T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<UintPtrT, Uint32T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_ui);

  if (block0.is_used()) {
    TNode<UintPtrT> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2754);
    TNode<IntPtrT> tmp1;
    USE(tmp1);
    tmp1 = CodeStubAssembler(state_).Signed(TNode<UintPtrT>{tmp0});
    TNode<Int32T> tmp2;
    USE(tmp2);
    tmp2 = CodeStubAssembler(state_).TruncateIntPtrToInt32(TNode<IntPtrT>{tmp1});
    TNode<Uint32T> tmp3;
    USE(tmp3);
    tmp3 = CodeStubAssembler(state_).Unsigned(TNode<Int32T>{tmp2});
    ca_.Goto(&block1, tmp0, tmp3);
  }

  if (block1.is_used()) {
    TNode<UintPtrT> tmp4;
    TNode<Uint32T> tmp5;
    ca_.Bind(&block1, &tmp4, &tmp5);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2753);
    ca_.Goto(&block2, tmp4, tmp5);
  }

    TNode<UintPtrT> tmp6;
    TNode<Uint32T> tmp7;
    ca_.Bind(&block2, &tmp6, &tmp7);
  return TNode<Uint32T>{tmp7};
}

TNode<IntPtrT> Convert8ATintptr5ATSmi_188(compiler::CodeAssemblerState* state_, TNode<Smi> p_s) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Smi> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Smi, IntPtrT> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Smi, IntPtrT> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_s);

  if (block0.is_used()) {
    TNode<Smi> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2757);
    TNode<IntPtrT> tmp1;
    USE(tmp1);
    tmp1 = CodeStubAssembler(state_).SmiUntag(TNode<Smi>{tmp0});
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<Smi> tmp2;
    TNode<IntPtrT> tmp3;
    ca_.Bind(&block1, &tmp2, &tmp3);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2756);
    ca_.Goto(&block2, tmp2, tmp3);
  }

    TNode<Smi> tmp4;
    TNode<IntPtrT> tmp5;
    ca_.Bind(&block2, &tmp4, &tmp5);
  return TNode<IntPtrT>{tmp5};
}

TNode<UintPtrT> Convert9ATuintptr13ATPositiveSmi_189(compiler::CodeAssemblerState* state_, TNode<Smi> p_ps) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Smi> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Smi, UintPtrT> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Smi, UintPtrT> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_ps);

  if (block0.is_used()) {
    TNode<Smi> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2760);
    TNode<IntPtrT> tmp1;
    USE(tmp1);
    tmp1 = CodeStubAssembler(state_).SmiUntag(TNode<Smi>{tmp0});
    TNode<UintPtrT> tmp2;
    USE(tmp2);
    tmp2 = CodeStubAssembler(state_).Unsigned(TNode<IntPtrT>{tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<Smi> tmp3;
    TNode<UintPtrT> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2759);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Smi> tmp5;
    TNode<UintPtrT> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<UintPtrT>{tmp6};
}

TNode<IntPtrT> Convert8ATintptr9ATuintptr_190(compiler::CodeAssemblerState* state_, TNode<UintPtrT> p_ui) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<UintPtrT> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<UintPtrT, IntPtrT> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<UintPtrT, IntPtrT> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_ui);

  if (block0.is_used()) {
    TNode<UintPtrT> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2763);
    TNode<IntPtrT> tmp1;
    USE(tmp1);
    tmp1 = CodeStubAssembler(state_).Signed(TNode<UintPtrT>{tmp0});
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2765);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<UintPtrT> tmp2;
    TNode<IntPtrT> tmp3;
    ca_.Bind(&block1, &tmp2, &tmp3);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2762);
    ca_.Goto(&block2, tmp2, tmp3);
  }

    TNode<UintPtrT> tmp4;
    TNode<IntPtrT> tmp5;
    ca_.Bind(&block2, &tmp4, &tmp5);
  return TNode<IntPtrT>{tmp5};
}

TNode<Smi> Convert13ATPositiveSmi8ATintptr_191(compiler::CodeAssemblerState* state_, TNode<IntPtrT> p_i) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<IntPtrT> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<IntPtrT, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<IntPtrT, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_i);

  if (block0.is_used()) {
    TNode<IntPtrT> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2769);
    TNode<Smi> tmp1;
    USE(tmp1);
    tmp1 = CodeStubAssembler(state_).SmiTag(TNode<IntPtrT>{tmp0});
    TNode<Smi> tmp2;
    USE(tmp2);
    tmp2 = (TNode<Smi>{tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<IntPtrT> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2767);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<IntPtrT> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Smi>{tmp6};
}

TNode<Smi> Convert13ATPositiveSmi9ATuintptr_192(compiler::CodeAssemblerState* state_, TNode<UintPtrT> p_ui, compiler::CodeAssemblerLabel* label_IfOverflow) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<UintPtrT> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<UintPtrT> block3(&ca_, compiler::CodeAssemblerLabel::kDeferred);
  compiler::CodeAssemblerParameterizedLabel<UintPtrT> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<UintPtrT, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<UintPtrT, Smi> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_ui);

  if (block0.is_used()) {
    TNode<UintPtrT> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2772);
    TNode<UintPtrT> tmp1;
    USE(tmp1);
    tmp1 = FromConstexpr9ATuintptr19ATconstexpr_uintptr_153(state_, kSmiMaxValue);
    TNode<BoolT> tmp2;
    USE(tmp2);
    tmp2 = CodeStubAssembler(state_).UintPtrGreaterThan(TNode<UintPtrT>{tmp0}, TNode<UintPtrT>{tmp1});
    ca_.Branch(tmp2, &block3, &block4, tmp0);
  }

  if (block3.is_used()) {
    TNode<UintPtrT> tmp3;
    ca_.Bind(&block3, &tmp3);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2773);
    ca_.Goto(&block1);
  }

  if (block4.is_used()) {
    TNode<UintPtrT> tmp4;
    ca_.Bind(&block4, &tmp4);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2775);
    TNode<IntPtrT> tmp5;
    USE(tmp5);
    tmp5 = CodeStubAssembler(state_).Signed(TNode<UintPtrT>{tmp4});
    TNode<Smi> tmp6;
    USE(tmp6);
    tmp6 = CodeStubAssembler(state_).SmiTag(TNode<IntPtrT>{tmp5});
    TNode<Smi> tmp7;
    USE(tmp7);
    tmp7 = (TNode<Smi>{tmp6});
    ca_.Goto(&block2, tmp4, tmp7);
  }

  if (block2.is_used()) {
    TNode<UintPtrT> tmp8;
    TNode<Smi> tmp9;
    ca_.Bind(&block2, &tmp8, &tmp9);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2771);
    ca_.Goto(&block5, tmp8, tmp9);
  }

  if (block1.is_used()) {
    ca_.Bind(&block1);
    ca_.Goto(label_IfOverflow);
  }

    TNode<UintPtrT> tmp10;
    TNode<Smi> tmp11;
    ca_.Bind(&block5, &tmp10, &tmp11);
  return TNode<Smi>{tmp11};
}

TNode<Smi> Convert13ATPositiveSmi8ATintptr_193(compiler::CodeAssemblerState* state_, TNode<IntPtrT> p_i, compiler::CodeAssemblerLabel* label_IfOverflow) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<IntPtrT> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<IntPtrT> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<IntPtrT> block4(&ca_, compiler::CodeAssemblerLabel::kDeferred);
  compiler::CodeAssemblerParameterizedLabel<IntPtrT, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<IntPtrT, Smi> block6(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_i);

  if (block0.is_used()) {
    TNode<IntPtrT> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2778);
    TNode<BoolT> tmp1;
    USE(tmp1);
    tmp1 = CodeStubAssembler(state_).IsValidPositiveSmi(TNode<IntPtrT>{tmp0});
    ca_.Branch(tmp1, &block3, &block4, tmp0);
  }

  if (block3.is_used()) {
    TNode<IntPtrT> tmp2;
    ca_.Bind(&block3, &tmp2);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2779);
    TNode<Smi> tmp3;
    USE(tmp3);
    tmp3 = CodeStubAssembler(state_).SmiTag(TNode<IntPtrT>{tmp2});
    TNode<Smi> tmp4;
    USE(tmp4);
    tmp4 = (TNode<Smi>{tmp3});
    ca_.Goto(&block2, tmp2, tmp4);
  }

  if (block4.is_used()) {
    TNode<IntPtrT> tmp5;
    ca_.Bind(&block4, &tmp5);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2782);
    ca_.Goto(&block1);
  }

  if (block2.is_used()) {
    TNode<IntPtrT> tmp6;
    TNode<Smi> tmp7;
    ca_.Bind(&block2, &tmp6, &tmp7);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2777);
    ca_.Goto(&block6, tmp6, tmp7);
  }

  if (block1.is_used()) {
    ca_.Bind(&block1);
    ca_.Goto(label_IfOverflow);
  }

    TNode<IntPtrT> tmp8;
    TNode<Smi> tmp9;
    ca_.Bind(&block6, &tmp8, &tmp9);
  return TNode<Smi>{tmp9};
}

TNode<Int32T> Convert7ATint325ATSmi_194(compiler::CodeAssemblerState* state_, TNode<Smi> p_s) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Smi> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Smi, Int32T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Smi, Int32T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_s);

  if (block0.is_used()) {
    TNode<Smi> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2786);
    TNode<Int32T> tmp1;
    USE(tmp1);
    tmp1 = CodeStubAssembler(state_).SmiToInt32(TNode<Smi>{tmp0});
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<Smi> tmp2;
    TNode<Int32T> tmp3;
    ca_.Bind(&block1, &tmp2, &tmp3);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2785);
    ca_.Goto(&block2, tmp2, tmp3);
  }

    TNode<Smi> tmp4;
    TNode<Int32T> tmp5;
    ca_.Bind(&block2, &tmp4, &tmp5);
  return TNode<Int32T>{tmp5};
}

TNode<Float64T> Convert9ATfloat6410HeapNumber_195(compiler::CodeAssemblerState* state_, TNode<HeapNumber> p_h) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<HeapNumber> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapNumber, Float64T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapNumber, Float64T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_h);

  if (block0.is_used()) {
    TNode<HeapNumber> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2789);
    TNode<Float64T> tmp1;
    USE(tmp1);
    tmp1 = LoadHeapNumberValue_511(state_, TNode<HeapNumber>{tmp0});
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<HeapNumber> tmp2;
    TNode<Float64T> tmp3;
    ca_.Bind(&block1, &tmp2, &tmp3);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2788);
    ca_.Goto(&block2, tmp2, tmp3);
  }

    TNode<HeapNumber> tmp4;
    TNode<Float64T> tmp5;
    ca_.Bind(&block2, &tmp4, &tmp5);
  return TNode<Float64T>{tmp5};
}

TNode<Float64T> Convert9ATfloat6420UT5ATSmi10HeapNumber_196(compiler::CodeAssemblerState* state_, TNode<Number> p_n) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Number> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Number, Float64T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Number, Float64T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_n);

  if (block0.is_used()) {
    TNode<Number> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2792);
    TNode<Float64T> tmp1;
    USE(tmp1);
    tmp1 = CodeStubAssembler(state_).ChangeNumberToFloat64(TNode<Number>{tmp0});
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<Number> tmp2;
    TNode<Float64T> tmp3;
    ca_.Bind(&block1, &tmp2, &tmp3);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2791);
    ca_.Goto(&block2, tmp2, tmp3);
  }

    TNode<Number> tmp4;
    TNode<Float64T> tmp5;
    ca_.Bind(&block2, &tmp4, &tmp5);
  return TNode<Float64T>{tmp5};
}

TNode<UintPtrT> Convert9ATuintptr20UT5ATSmi10HeapNumber_197(compiler::CodeAssemblerState* state_, TNode<Number> p_n) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Number> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Number, UintPtrT> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Number, UintPtrT> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_n);

  if (block0.is_used()) {
    TNode<Number> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2795);
    TNode<UintPtrT> tmp1;
    USE(tmp1);
    tmp1 = CodeStubAssembler(state_).ChangeNonnegativeNumberToUintPtr(TNode<Number>{tmp0});
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<Number> tmp2;
    TNode<UintPtrT> tmp3;
    ca_.Bind(&block1, &tmp2, &tmp3);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2794);
    ca_.Goto(&block2, tmp2, tmp3);
  }

    TNode<Number> tmp4;
    TNode<UintPtrT> tmp5;
    ca_.Bind(&block2, &tmp4, &tmp5);
  return TNode<UintPtrT>{tmp5};
}

TNode<Float64T> Convert9ATfloat649ATfloat32_198(compiler::CodeAssemblerState* state_, TNode<Float32T> p_f) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Float32T> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Float32T, Float64T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Float32T, Float64T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_f);

  if (block0.is_used()) {
    TNode<Float32T> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2798);
    TNode<Float64T> tmp1;
    USE(tmp1);
    tmp1 = CodeStubAssembler(state_).ChangeFloat32ToFloat64(TNode<Float32T>{tmp0});
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<Float32T> tmp2;
    TNode<Float64T> tmp3;
    ca_.Bind(&block1, &tmp2, &tmp3);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2797);
    ca_.Goto(&block2, tmp2, tmp3);
  }

    TNode<Float32T> tmp4;
    TNode<Float64T> tmp5;
    ca_.Bind(&block2, &tmp4, &tmp5);
  return TNode<Float64T>{tmp5};
}

TNode<Float32T> Convert9ATfloat329ATfloat64_199(compiler::CodeAssemblerState* state_, TNode<Float64T> p_f) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Float64T> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Float64T, Float32T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Float64T, Float32T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_f);

  if (block0.is_used()) {
    TNode<Float64T> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2801);
    TNode<Float32T> tmp1;
    USE(tmp1);
    tmp1 = CodeStubAssembler(state_).TruncateFloat64ToFloat32(TNode<Float64T>{tmp0});
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<Float64T> tmp2;
    TNode<Float32T> tmp3;
    ca_.Bind(&block1, &tmp2, &tmp3);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2800);
    ca_.Goto(&block2, tmp2, tmp3);
  }

    TNode<Float64T> tmp4;
    TNode<Float32T> tmp5;
    ca_.Bind(&block2, &tmp4, &tmp5);
  return TNode<Float32T>{tmp5};
}

TNode<Float32T> Convert9ATfloat3220UT5ATSmi10HeapNumber_200(compiler::CodeAssemblerState* state_, TNode<Number> p_n) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Number> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Number, Float32T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Number, Float32T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_n);

  if (block0.is_used()) {
    TNode<Number> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2804);
    TNode<Float64T> tmp1;
    USE(tmp1);
    tmp1 = CodeStubAssembler(state_).ChangeNumberToFloat64(TNode<Number>{tmp0});
    TNode<Float32T> tmp2;
    USE(tmp2);
    tmp2 = Convert9ATfloat329ATfloat64_199(state_, TNode<Float64T>{tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<Number> tmp3;
    TNode<Float32T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2803);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Number> tmp5;
    TNode<Float32T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Float32T>{tmp6};
}

TNode<Number> Convert20UT5ATSmi10HeapNumber9ATfloat64_201(compiler::CodeAssemblerState* state_, TNode<Float64T> p_d) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Float64T> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Float64T, Number> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Float64T, Number> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_d);

  if (block0.is_used()) {
    TNode<Float64T> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2807);
    TNode<HeapNumber> tmp1;
    USE(tmp1);
    tmp1 = CodeStubAssembler(state_).AllocateHeapNumberWithValue(TNode<Float64T>{tmp0});
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<Float64T> tmp2;
    TNode<Number> tmp3;
    ca_.Bind(&block1, &tmp2, &tmp3);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2806);
    ca_.Goto(&block2, tmp2, tmp3);
  }

    TNode<Float64T> tmp4;
    TNode<Number> tmp5;
    ca_.Bind(&block2, &tmp4, &tmp5);
  return TNode<Number>{tmp5};
}

TNode<Float64T> Convert9ATfloat649ATuintptr_202(compiler::CodeAssemblerState* state_, TNode<UintPtrT> p_ui) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<UintPtrT> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<UintPtrT, Float64T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<UintPtrT, Float64T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_ui);

  if (block0.is_used()) {
    TNode<UintPtrT> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2810);
    TNode<Float64T> tmp1;
    USE(tmp1);
    tmp1 = CodeStubAssembler(state_).ChangeUintPtrToFloat64(TNode<UintPtrT>{tmp0});
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<UintPtrT> tmp2;
    TNode<Float64T> tmp3;
    ca_.Bind(&block1, &tmp2, &tmp3);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2809);
    ca_.Goto(&block2, tmp2, tmp3);
  }

    TNode<UintPtrT> tmp4;
    TNode<Float64T> tmp5;
    ca_.Bind(&block2, &tmp4, &tmp5);
  return TNode<Float64T>{tmp5};
}

TNode<Number> Convert20UT5ATSmi10HeapNumber9ATuintptr_203(compiler::CodeAssemblerState* state_, TNode<UintPtrT> p_ui) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<UintPtrT> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<UintPtrT, Number> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<UintPtrT, Number> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_ui);

  if (block0.is_used()) {
    TNode<UintPtrT> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2813);
    TNode<Number> tmp1;
    USE(tmp1);
    tmp1 = CodeStubAssembler(state_).ChangeUintPtrToTagged(TNode<UintPtrT>{tmp0});
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<UintPtrT> tmp2;
    TNode<Number> tmp3;
    ca_.Bind(&block1, &tmp2, &tmp3);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2812);
    ca_.Goto(&block2, tmp2, tmp3);
  }

    TNode<UintPtrT> tmp4;
    TNode<Number> tmp5;
    ca_.Bind(&block2, &tmp4, &tmp5);
  return TNode<Number>{tmp5};
}

TNode<UintPtrT> Convert9ATuintptr9ATfloat64_204(compiler::CodeAssemblerState* state_, TNode<Float64T> p_d) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Float64T> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Float64T, UintPtrT> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Float64T, UintPtrT> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_d);

  if (block0.is_used()) {
    TNode<Float64T> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2816);
    TNode<UintPtrT> tmp1;
    USE(tmp1);
    tmp1 = CodeStubAssembler(state_).ChangeFloat64ToUintPtr(TNode<Float64T>{tmp0});
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<Float64T> tmp2;
    TNode<UintPtrT> tmp3;
    ca_.Bind(&block1, &tmp2, &tmp3);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2815);
    ca_.Goto(&block2, tmp2, tmp3);
  }

    TNode<Float64T> tmp4;
    TNode<UintPtrT> tmp5;
    ca_.Bind(&block2, &tmp4, &tmp5);
  return TNode<UintPtrT>{tmp5};
}

TNode<UintPtrT> Convert9ATuintptr8ATintptr_205(compiler::CodeAssemblerState* state_, TNode<IntPtrT> p_i) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<IntPtrT> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<IntPtrT, UintPtrT> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<IntPtrT, UintPtrT> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_i);

  if (block0.is_used()) {
    TNode<IntPtrT> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2819);
    TNode<UintPtrT> tmp1;
    USE(tmp1);
    tmp1 = CodeStubAssembler(state_).Unsigned(TNode<IntPtrT>{tmp0});
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<IntPtrT> tmp2;
    TNode<UintPtrT> tmp3;
    ca_.Bind(&block1, &tmp2, &tmp3);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2818);
    ca_.Goto(&block2, tmp2, tmp3);
  }

    TNode<IntPtrT> tmp4;
    TNode<UintPtrT> tmp5;
    ca_.Bind(&block2, &tmp4, &tmp5);
  return TNode<UintPtrT>{tmp5};
}

TNode<UintPtrT> Convert9ATuintptr8ATRawPtr_206(compiler::CodeAssemblerState* state_, TNode<RawPtrT> p_r) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<RawPtrT> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<RawPtrT, UintPtrT> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<RawPtrT, UintPtrT> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_r);

  if (block0.is_used()) {
    TNode<RawPtrT> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2822);
    TNode<UintPtrT> tmp1;
    USE(tmp1);
    tmp1 = CodeStubAssembler(state_).Unsigned(TNode<RawPtrT>{tmp0});
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<RawPtrT> tmp2;
    TNode<UintPtrT> tmp3;
    ca_.Bind(&block1, &tmp2, &tmp3);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2821);
    ca_.Goto(&block2, tmp2, tmp3);
  }

    TNode<RawPtrT> tmp4;
    TNode<UintPtrT> tmp5;
    ca_.Bind(&block2, &tmp4, &tmp5);
  return TNode<UintPtrT>{tmp5};
}

TNode<IntPtrT> Convert8ATintptr8ATRawPtr_207(compiler::CodeAssemblerState* state_, TNode<RawPtrT> p_r) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<RawPtrT> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<RawPtrT, IntPtrT> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<RawPtrT, IntPtrT> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_r);

  if (block0.is_used()) {
    TNode<RawPtrT> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2825);
    TNode<IntPtrT> tmp1;
    USE(tmp1);
    tmp1 = CodeStubAssembler(state_).Signed(TNode<RawPtrT>{tmp0});
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<RawPtrT> tmp2;
    TNode<IntPtrT> tmp3;
    ca_.Bind(&block1, &tmp2, &tmp3);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2824);
    ca_.Goto(&block2, tmp2, tmp3);
  }

    TNode<RawPtrT> tmp4;
    TNode<IntPtrT> tmp5;
    ca_.Bind(&block2, &tmp4, &tmp5);
  return TNode<IntPtrT>{tmp5};
}

TNode<BInt> Convert6ATbint7ATint32_208(compiler::CodeAssemblerState* state_, TNode<Int32T> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Int32T> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Int32T, BInt> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Int32T, BInt> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_v);

  if (block0.is_used()) {
    TNode<Int32T> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2828);
    TNode<IntPtrT> tmp1;
    USE(tmp1);
    tmp1 = Convert8ATintptr7ATint32_176(state_, TNode<Int32T>{tmp0});
    TNode<BInt> tmp2;
    USE(tmp2);
    tmp2 = CodeStubAssembler(state_).IntPtrToBInt(TNode<IntPtrT>{tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<Int32T> tmp3;
    TNode<BInt> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2827);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Int32T> tmp5;
    TNode<BInt> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<BInt>{tmp6};
}

TNode<BInt> Convert6ATbint8ATintptr_209(compiler::CodeAssemblerState* state_, TNode<IntPtrT> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<IntPtrT> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<IntPtrT, BInt> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<IntPtrT, BInt> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_v);

  if (block0.is_used()) {
    TNode<IntPtrT> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2832);
    TNode<BInt> tmp1;
    USE(tmp1);
    tmp1 = CodeStubAssembler(state_).IntPtrToBInt(TNode<IntPtrT>{tmp0});
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<IntPtrT> tmp2;
    TNode<BInt> tmp3;
    ca_.Bind(&block1, &tmp2, &tmp3);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2831);
    ca_.Goto(&block2, tmp2, tmp3);
  }

    TNode<IntPtrT> tmp4;
    TNode<BInt> tmp5;
    ca_.Bind(&block2, &tmp4, &tmp5);
  return TNode<BInt>{tmp5};
}

TNode<BInt> Convert6ATbint5ATSmi_210(compiler::CodeAssemblerState* state_, TNode<Smi> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Smi> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Smi, BInt> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Smi, BInt> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_v);

  if (block0.is_used()) {
    TNode<Smi> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2836);
    TNode<BInt> tmp1;
    USE(tmp1);
    tmp1 = CodeStubAssembler(state_).SmiToBInt(TNode<Smi>{tmp0});
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<Smi> tmp2;
    TNode<BInt> tmp3;
    ca_.Bind(&block1, &tmp2, &tmp3);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2835);
    ca_.Goto(&block2, tmp2, tmp3);
  }

    TNode<Smi> tmp4;
    TNode<BInt> tmp5;
    ca_.Bind(&block2, &tmp4, &tmp5);
  return TNode<BInt>{tmp5};
}

TNode<Map> kFixedArrayMap_211(compiler::CodeAssemblerState* state_) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0);

    ca_.Bind(&block0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2854);
    TNode<Map> tmp0;
    USE(tmp0);
    tmp0 = CodeStubAssembler(state_).FixedArrayMapConstant();
return TNode<Map>{tmp0};
}

TNode<Map> kCOWMap_212(compiler::CodeAssemblerState* state_) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0);

    ca_.Bind(&block0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2855);
    TNode<Map> tmp0;
    USE(tmp0);
    tmp0 = CodeStubAssembler(state_).FixedCOWArrayMapConstant();
return TNode<Map>{tmp0};
}

TNode<ByteArray> kEmptyByteArray_213(compiler::CodeAssemblerState* state_) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0);

    ca_.Bind(&block0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2856);
    TNode<ByteArray> tmp0;
    USE(tmp0);
    tmp0 = CodeStubAssembler(state_).EmptyByteArrayConstant();
return TNode<ByteArray>{tmp0};
}

TNode<FixedArray> kEmptyFixedArray_214(compiler::CodeAssemblerState* state_) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0);

    ca_.Bind(&block0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2857);
    TNode<FixedArray> tmp0;
    USE(tmp0);
    tmp0 = CodeStubAssembler(state_).EmptyFixedArrayConstant();
return TNode<FixedArray>{tmp0};
}

void StoreFastJSArrayLength_215(compiler::CodeAssemblerState* state_, TNode<JSArray> p_array, TNode<Smi> p_length) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSArray, Smi> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSArray, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSArray, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_array, p_length);

  if (block0.is_used()) {
    TNode<JSArray> tmp0;
    TNode<Smi> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2879);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2880);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSArray::kLengthOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2878);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2877);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSArray> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSArray> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

void StoreFixedDoubleArrayDirect_216(compiler::CodeAssemblerState* state_, TNode<FixedDoubleArray> p_a, TNode<Smi> p_i, TNode<Number> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<FixedDoubleArray, Smi, Number> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FixedDoubleArray, Smi, Number, FixedDoubleArray, IntPtrT, IntPtrT, Smi, Smi, IntPtrT, HeapObject, IntPtrT, IntPtrT, IntPtrT, IntPtrT> block6(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FixedDoubleArray, Smi, Number, FixedDoubleArray, IntPtrT, IntPtrT, Smi, Smi, IntPtrT, HeapObject, IntPtrT, IntPtrT, IntPtrT, IntPtrT> block7(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FixedDoubleArray, Smi, Number, FixedDoubleArray, IntPtrT, IntPtrT, Smi, Smi, IntPtrT, HeapObject, IntPtrT, IntPtrT, IntPtrT, IntPtrT, HeapObject, IntPtrT> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FixedDoubleArray, Smi, Number, FixedDoubleArray, IntPtrT, IntPtrT, Smi, Smi, IntPtrT> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FixedDoubleArray, Smi, Number, FixedDoubleArray, IntPtrT, IntPtrT, Smi, Smi, IntPtrT, HeapObject, IntPtrT> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FixedDoubleArray, Smi, Number, FixedDoubleArray, IntPtrT, IntPtrT, Smi, Smi, HeapObject, IntPtrT> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FixedDoubleArray, Smi, Number> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FixedDoubleArray, Smi, Number> block9(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_a, p_i, p_v);

  if (block0.is_used()) {
    TNode<FixedDoubleArray> tmp0;
    TNode<Smi> tmp1;
    TNode<Number> tmp2;
    ca_.Bind(&block0, &tmp0, &tmp1, &tmp2);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2923);
    TNode<IntPtrT> tmp3 = ca_.IntPtrConstant(FixedDoubleArray::kFloatsOffset);
    USE(tmp3);
    TNode<IntPtrT> tmp4 = ca_.IntPtrConstant(FixedArrayBase::kLengthOffset);
    USE(tmp4);
    TNode<Smi>tmp5 = CodeStubAssembler(state_).LoadReference<Smi>(CodeStubAssembler::Reference{tmp0, tmp4});
    TNode<IntPtrT> tmp6;
    USE(tmp6);
    tmp6 = Convert8ATintptr5ATSmi_188(state_, TNode<Smi>{tmp5});
    ca_.SetSourcePosition("../../src/builtins/torque-internal.tq", 55);
    TNode<IntPtrT> tmp7;
    USE(tmp7);
    tmp7 = Convert8ATintptr5ATSmi_188(state_, TNode<Smi>{tmp1});
    ca_.SetSourcePosition("../../src/builtins/torque-internal.tq", 56);
    ca_.SetSourcePosition("../../src/builtins/torque-internal.tq", 37);
    TNode<UintPtrT> tmp8;
    USE(tmp8);
    tmp8 = Convert9ATuintptr8ATintptr_205(state_, TNode<IntPtrT>{tmp7});
    TNode<UintPtrT> tmp9;
    USE(tmp9);
    tmp9 = Convert9ATuintptr8ATintptr_205(state_, TNode<IntPtrT>{tmp6});
    TNode<BoolT> tmp10;
    USE(tmp10);
    tmp10 = CodeStubAssembler(state_).UintPtrLessThan(TNode<UintPtrT>{tmp8}, TNode<UintPtrT>{tmp9});
    ca_.Branch(tmp10, &block6, &block7, tmp0, tmp1, tmp2, tmp0, tmp3, tmp6, tmp1, tmp1, tmp7, tmp0, tmp3, tmp6, tmp7, tmp7);
  }

  if (block6.is_used()) {
    TNode<FixedDoubleArray> tmp11;
    TNode<Smi> tmp12;
    TNode<Number> tmp13;
    TNode<FixedDoubleArray> tmp14;
    TNode<IntPtrT> tmp15;
    TNode<IntPtrT> tmp16;
    TNode<Smi> tmp17;
    TNode<Smi> tmp18;
    TNode<IntPtrT> tmp19;
    TNode<HeapObject> tmp20;
    TNode<IntPtrT> tmp21;
    TNode<IntPtrT> tmp22;
    TNode<IntPtrT> tmp23;
    TNode<IntPtrT> tmp24;
    ca_.Bind(&block6, &tmp11, &tmp12, &tmp13, &tmp14, &tmp15, &tmp16, &tmp17, &tmp18, &tmp19, &tmp20, &tmp21, &tmp22, &tmp23, &tmp24);
    ca_.SetSourcePosition("../../src/builtins/torque-internal.tq", 39);
    TNode<IntPtrT> tmp25;
    USE(tmp25);
    tmp25 = FromConstexpr8ATintptr17ATconstexpr_int31_150(state_, (SizeOf9ATfloat64_347(state_)));
    TNode<IntPtrT> tmp26;
    USE(tmp26);
    tmp26 = CodeStubAssembler(state_).IntPtrMul(TNode<IntPtrT>{tmp24}, TNode<IntPtrT>{tmp25});
    TNode<IntPtrT> tmp27;
    USE(tmp27);
    tmp27 = CodeStubAssembler(state_).IntPtrAdd(TNode<IntPtrT>{tmp21}, TNode<IntPtrT>{tmp26});
    ca_.SetSourcePosition("../../src/builtins/torque-internal.tq", 38);
    TNode<HeapObject> tmp28;
    USE(tmp28);
    TNode<IntPtrT> tmp29;
    USE(tmp29);
    std::tie(tmp28, tmp29) = UnsafeNewReference9ATfloat64_1455(state_, TNode<HeapObject>{tmp20}, TNode<IntPtrT>{tmp27}).Flatten();
    ca_.Goto(&block5, tmp11, tmp12, tmp13, tmp14, tmp15, tmp16, tmp17, tmp18, tmp19, tmp20, tmp21, tmp22, tmp23, tmp24, tmp28, tmp29);
  }

  if (block7.is_used()) {
    TNode<FixedDoubleArray> tmp30;
    TNode<Smi> tmp31;
    TNode<Number> tmp32;
    TNode<FixedDoubleArray> tmp33;
    TNode<IntPtrT> tmp34;
    TNode<IntPtrT> tmp35;
    TNode<Smi> tmp36;
    TNode<Smi> tmp37;
    TNode<IntPtrT> tmp38;
    TNode<HeapObject> tmp39;
    TNode<IntPtrT> tmp40;
    TNode<IntPtrT> tmp41;
    TNode<IntPtrT> tmp42;
    TNode<IntPtrT> tmp43;
    ca_.Bind(&block7, &tmp30, &tmp31, &tmp32, &tmp33, &tmp34, &tmp35, &tmp36, &tmp37, &tmp38, &tmp39, &tmp40, &tmp41, &tmp42, &tmp43);
    ca_.SetSourcePosition("../../src/builtins/torque-internal.tq", 41);
    ca_.Goto(&block4, tmp30, tmp31, tmp32, tmp33, tmp34, tmp35, tmp36, tmp37, tmp38);
  }

  if (block5.is_used()) {
    TNode<FixedDoubleArray> tmp44;
    TNode<Smi> tmp45;
    TNode<Number> tmp46;
    TNode<FixedDoubleArray> tmp47;
    TNode<IntPtrT> tmp48;
    TNode<IntPtrT> tmp49;
    TNode<Smi> tmp50;
    TNode<Smi> tmp51;
    TNode<IntPtrT> tmp52;
    TNode<HeapObject> tmp53;
    TNode<IntPtrT> tmp54;
    TNode<IntPtrT> tmp55;
    TNode<IntPtrT> tmp56;
    TNode<IntPtrT> tmp57;
    TNode<HeapObject> tmp58;
    TNode<IntPtrT> tmp59;
    ca_.Bind(&block5, &tmp44, &tmp45, &tmp46, &tmp47, &tmp48, &tmp49, &tmp50, &tmp51, &tmp52, &tmp53, &tmp54, &tmp55, &tmp56, &tmp57, &tmp58, &tmp59);
    ca_.SetSourcePosition("../../src/builtins/torque-internal.tq", 56);
    ca_.Goto(&block3, tmp44, tmp45, tmp46, tmp47, tmp48, tmp49, tmp50, tmp51, tmp52, tmp58, tmp59);
  }

  if (block4.is_used()) {
    TNode<FixedDoubleArray> tmp60;
    TNode<Smi> tmp61;
    TNode<Number> tmp62;
    TNode<FixedDoubleArray> tmp63;
    TNode<IntPtrT> tmp64;
    TNode<IntPtrT> tmp65;
    TNode<Smi> tmp66;
    TNode<Smi> tmp67;
    TNode<IntPtrT> tmp68;
    ca_.Bind(&block4, &tmp60, &tmp61, &tmp62, &tmp63, &tmp64, &tmp65, &tmp66, &tmp67, &tmp68);
    CodeStubAssembler(state_).Unreachable();
  }

  if (block3.is_used()) {
    TNode<FixedDoubleArray> tmp69;
    TNode<Smi> tmp70;
    TNode<Number> tmp71;
    TNode<FixedDoubleArray> tmp72;
    TNode<IntPtrT> tmp73;
    TNode<IntPtrT> tmp74;
    TNode<Smi> tmp75;
    TNode<Smi> tmp76;
    TNode<IntPtrT> tmp77;
    TNode<HeapObject> tmp78;
    TNode<IntPtrT> tmp79;
    ca_.Bind(&block3, &tmp69, &tmp70, &tmp71, &tmp72, &tmp73, &tmp74, &tmp75, &tmp76, &tmp77, &tmp78, &tmp79);
    ca_.Goto(&block2, tmp69, tmp70, tmp71, tmp72, tmp73, tmp74, tmp75, tmp76, tmp78, tmp79);
  }

  if (block2.is_used()) {
    TNode<FixedDoubleArray> tmp80;
    TNode<Smi> tmp81;
    TNode<Number> tmp82;
    TNode<FixedDoubleArray> tmp83;
    TNode<IntPtrT> tmp84;
    TNode<IntPtrT> tmp85;
    TNode<Smi> tmp86;
    TNode<Smi> tmp87;
    TNode<HeapObject> tmp88;
    TNode<IntPtrT> tmp89;
    ca_.Bind(&block2, &tmp80, &tmp81, &tmp82, &tmp83, &tmp84, &tmp85, &tmp86, &tmp87, &tmp88, &tmp89);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2923);
    TNode<Float64T> tmp90;
    USE(tmp90);
    tmp90 = Convert9ATfloat6420UT5ATSmi10HeapNumber_196(state_, TNode<Number>{tmp82});
    TNode<Float64T> tmp91;
    USE(tmp91);
    tmp91 = CodeStubAssembler(state_).Float64SilenceNaN(TNode<Float64T>{tmp90});
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp88, tmp89}, tmp91);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2921);
    ca_.Goto(&block1, tmp80, tmp81, tmp82);
  }

  if (block1.is_used()) {
    TNode<FixedDoubleArray> tmp92;
    TNode<Smi> tmp93;
    TNode<Number> tmp94;
    ca_.Bind(&block1, &tmp92, &tmp93, &tmp94);
    ca_.Goto(&block9, tmp92, tmp93, tmp94);
  }

    TNode<FixedDoubleArray> tmp95;
    TNode<Smi> tmp96;
    TNode<Number> tmp97;
    ca_.Bind(&block9, &tmp95, &tmp96, &tmp97);
}

void StoreFixedArrayDirect_217(compiler::CodeAssemblerState* state_, TNode<FixedArray> p_a, TNode<Smi> p_i, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<FixedArray, Smi, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FixedArray, Smi, Object, FixedArray, IntPtrT, IntPtrT, Smi, Smi, IntPtrT, HeapObject, IntPtrT, IntPtrT, IntPtrT, IntPtrT> block6(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FixedArray, Smi, Object, FixedArray, IntPtrT, IntPtrT, Smi, Smi, IntPtrT, HeapObject, IntPtrT, IntPtrT, IntPtrT, IntPtrT> block7(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FixedArray, Smi, Object, FixedArray, IntPtrT, IntPtrT, Smi, Smi, IntPtrT, HeapObject, IntPtrT, IntPtrT, IntPtrT, IntPtrT, HeapObject, IntPtrT> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FixedArray, Smi, Object, FixedArray, IntPtrT, IntPtrT, Smi, Smi, IntPtrT> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FixedArray, Smi, Object, FixedArray, IntPtrT, IntPtrT, Smi, Smi, IntPtrT, HeapObject, IntPtrT> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FixedArray, Smi, Object, FixedArray, IntPtrT, IntPtrT, Smi, Smi, HeapObject, IntPtrT> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FixedArray, Smi, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FixedArray, Smi, Object> block9(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_a, p_i, p_v);

  if (block0.is_used()) {
    TNode<FixedArray> tmp0;
    TNode<Smi> tmp1;
    TNode<Object> tmp2;
    ca_.Bind(&block0, &tmp0, &tmp1, &tmp2);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2926);
    TNode<IntPtrT> tmp3 = ca_.IntPtrConstant(FixedArray::kObjectsOffset);
    USE(tmp3);
    TNode<IntPtrT> tmp4 = ca_.IntPtrConstant(FixedArrayBase::kLengthOffset);
    USE(tmp4);
    TNode<Smi>tmp5 = CodeStubAssembler(state_).LoadReference<Smi>(CodeStubAssembler::Reference{tmp0, tmp4});
    TNode<IntPtrT> tmp6;
    USE(tmp6);
    tmp6 = Convert8ATintptr5ATSmi_188(state_, TNode<Smi>{tmp5});
    ca_.SetSourcePosition("../../src/builtins/torque-internal.tq", 55);
    TNode<IntPtrT> tmp7;
    USE(tmp7);
    tmp7 = Convert8ATintptr5ATSmi_188(state_, TNode<Smi>{tmp1});
    ca_.SetSourcePosition("../../src/builtins/torque-internal.tq", 56);
    ca_.SetSourcePosition("../../src/builtins/torque-internal.tq", 37);
    TNode<UintPtrT> tmp8;
    USE(tmp8);
    tmp8 = Convert9ATuintptr8ATintptr_205(state_, TNode<IntPtrT>{tmp7});
    TNode<UintPtrT> tmp9;
    USE(tmp9);
    tmp9 = Convert9ATuintptr8ATintptr_205(state_, TNode<IntPtrT>{tmp6});
    TNode<BoolT> tmp10;
    USE(tmp10);
    tmp10 = CodeStubAssembler(state_).UintPtrLessThan(TNode<UintPtrT>{tmp8}, TNode<UintPtrT>{tmp9});
    ca_.Branch(tmp10, &block6, &block7, tmp0, tmp1, tmp2, tmp0, tmp3, tmp6, tmp1, tmp1, tmp7, tmp0, tmp3, tmp6, tmp7, tmp7);
  }

  if (block6.is_used()) {
    TNode<FixedArray> tmp11;
    TNode<Smi> tmp12;
    TNode<Object> tmp13;
    TNode<FixedArray> tmp14;
    TNode<IntPtrT> tmp15;
    TNode<IntPtrT> tmp16;
    TNode<Smi> tmp17;
    TNode<Smi> tmp18;
    TNode<IntPtrT> tmp19;
    TNode<HeapObject> tmp20;
    TNode<IntPtrT> tmp21;
    TNode<IntPtrT> tmp22;
    TNode<IntPtrT> tmp23;
    TNode<IntPtrT> tmp24;
    ca_.Bind(&block6, &tmp11, &tmp12, &tmp13, &tmp14, &tmp15, &tmp16, &tmp17, &tmp18, &tmp19, &tmp20, &tmp21, &tmp22, &tmp23, &tmp24);
    ca_.SetSourcePosition("../../src/builtins/torque-internal.tq", 39);
    TNode<IntPtrT> tmp25;
    USE(tmp25);
    tmp25 = FromConstexpr8ATintptr17ATconstexpr_int31_150(state_, (SizeOf20UT5ATSmi10HeapObject_346(state_)));
    TNode<IntPtrT> tmp26;
    USE(tmp26);
    tmp26 = CodeStubAssembler(state_).IntPtrMul(TNode<IntPtrT>{tmp24}, TNode<IntPtrT>{tmp25});
    TNode<IntPtrT> tmp27;
    USE(tmp27);
    tmp27 = CodeStubAssembler(state_).IntPtrAdd(TNode<IntPtrT>{tmp21}, TNode<IntPtrT>{tmp26});
    ca_.SetSourcePosition("../../src/builtins/torque-internal.tq", 38);
    TNode<HeapObject> tmp28;
    USE(tmp28);
    TNode<IntPtrT> tmp29;
    USE(tmp29);
    std::tie(tmp28, tmp29) = UnsafeNewReference20UT5ATSmi10HeapObject_1440(state_, TNode<HeapObject>{tmp20}, TNode<IntPtrT>{tmp27}).Flatten();
    ca_.Goto(&block5, tmp11, tmp12, tmp13, tmp14, tmp15, tmp16, tmp17, tmp18, tmp19, tmp20, tmp21, tmp22, tmp23, tmp24, tmp28, tmp29);
  }

  if (block7.is_used()) {
    TNode<FixedArray> tmp30;
    TNode<Smi> tmp31;
    TNode<Object> tmp32;
    TNode<FixedArray> tmp33;
    TNode<IntPtrT> tmp34;
    TNode<IntPtrT> tmp35;
    TNode<Smi> tmp36;
    TNode<Smi> tmp37;
    TNode<IntPtrT> tmp38;
    TNode<HeapObject> tmp39;
    TNode<IntPtrT> tmp40;
    TNode<IntPtrT> tmp41;
    TNode<IntPtrT> tmp42;
    TNode<IntPtrT> tmp43;
    ca_.Bind(&block7, &tmp30, &tmp31, &tmp32, &tmp33, &tmp34, &tmp35, &tmp36, &tmp37, &tmp38, &tmp39, &tmp40, &tmp41, &tmp42, &tmp43);
    ca_.SetSourcePosition("../../src/builtins/torque-internal.tq", 41);
    ca_.Goto(&block4, tmp30, tmp31, tmp32, tmp33, tmp34, tmp35, tmp36, tmp37, tmp38);
  }

  if (block5.is_used()) {
    TNode<FixedArray> tmp44;
    TNode<Smi> tmp45;
    TNode<Object> tmp46;
    TNode<FixedArray> tmp47;
    TNode<IntPtrT> tmp48;
    TNode<IntPtrT> tmp49;
    TNode<Smi> tmp50;
    TNode<Smi> tmp51;
    TNode<IntPtrT> tmp52;
    TNode<HeapObject> tmp53;
    TNode<IntPtrT> tmp54;
    TNode<IntPtrT> tmp55;
    TNode<IntPtrT> tmp56;
    TNode<IntPtrT> tmp57;
    TNode<HeapObject> tmp58;
    TNode<IntPtrT> tmp59;
    ca_.Bind(&block5, &tmp44, &tmp45, &tmp46, &tmp47, &tmp48, &tmp49, &tmp50, &tmp51, &tmp52, &tmp53, &tmp54, &tmp55, &tmp56, &tmp57, &tmp58, &tmp59);
    ca_.SetSourcePosition("../../src/builtins/torque-internal.tq", 56);
    ca_.Goto(&block3, tmp44, tmp45, tmp46, tmp47, tmp48, tmp49, tmp50, tmp51, tmp52, tmp58, tmp59);
  }

  if (block4.is_used()) {
    TNode<FixedArray> tmp60;
    TNode<Smi> tmp61;
    TNode<Object> tmp62;
    TNode<FixedArray> tmp63;
    TNode<IntPtrT> tmp64;
    TNode<IntPtrT> tmp65;
    TNode<Smi> tmp66;
    TNode<Smi> tmp67;
    TNode<IntPtrT> tmp68;
    ca_.Bind(&block4, &tmp60, &tmp61, &tmp62, &tmp63, &tmp64, &tmp65, &tmp66, &tmp67, &tmp68);
    CodeStubAssembler(state_).Unreachable();
  }

  if (block3.is_used()) {
    TNode<FixedArray> tmp69;
    TNode<Smi> tmp70;
    TNode<Object> tmp71;
    TNode<FixedArray> tmp72;
    TNode<IntPtrT> tmp73;
    TNode<IntPtrT> tmp74;
    TNode<Smi> tmp75;
    TNode<Smi> tmp76;
    TNode<IntPtrT> tmp77;
    TNode<HeapObject> tmp78;
    TNode<IntPtrT> tmp79;
    ca_.Bind(&block3, &tmp69, &tmp70, &tmp71, &tmp72, &tmp73, &tmp74, &tmp75, &tmp76, &tmp77, &tmp78, &tmp79);
    ca_.Goto(&block2, tmp69, tmp70, tmp71, tmp72, tmp73, tmp74, tmp75, tmp76, tmp78, tmp79);
  }

  if (block2.is_used()) {
    TNode<FixedArray> tmp80;
    TNode<Smi> tmp81;
    TNode<Object> tmp82;
    TNode<FixedArray> tmp83;
    TNode<IntPtrT> tmp84;
    TNode<IntPtrT> tmp85;
    TNode<Smi> tmp86;
    TNode<Smi> tmp87;
    TNode<HeapObject> tmp88;
    TNode<IntPtrT> tmp89;
    ca_.Bind(&block2, &tmp80, &tmp81, &tmp82, &tmp83, &tmp84, &tmp85, &tmp86, &tmp87, &tmp88, &tmp89);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2926);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp88, tmp89}, tmp82);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2925);
    ca_.Goto(&block1, tmp80, tmp81, tmp82);
  }

  if (block1.is_used()) {
    TNode<FixedArray> tmp90;
    TNode<Smi> tmp91;
    TNode<Object> tmp92;
    ca_.Bind(&block1, &tmp90, &tmp91, &tmp92);
    ca_.Goto(&block9, tmp90, tmp91, tmp92);
  }

    TNode<FixedArray> tmp93;
    TNode<Smi> tmp94;
    TNode<Object> tmp95;
    ca_.Bind(&block9, &tmp93, &tmp94, &tmp95);
}

TNode<Int32T> FastHoleyElementsKind_218(compiler::CodeAssemblerState* state_, TNode<Int32T> p_kind) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Int32T> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Int32T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Int32T> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Int32T> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Int32T> block6(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Int32T> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Int32T, Int32T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Int32T, Int32T> block7(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_kind);

  if (block0.is_used()) {
    TNode<Int32T> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2947);
    TNode<Int32T> tmp1;
    USE(tmp1);
    tmp1 = FromConstexpr14ATElementsKind24ATconstexpr_ElementsKind_169(state_, PACKED_SMI_ELEMENTS);
    TNode<BoolT> tmp2;
    USE(tmp2);
    tmp2 = CodeStubAssembler(state_).ElementsKindEqual(TNode<Int32T>{tmp0}, TNode<Int32T>{tmp1});
    ca_.Branch(tmp2, &block2, &block3, tmp0);
  }

  if (block2.is_used()) {
    TNode<Int32T> tmp3;
    ca_.Bind(&block2, &tmp3);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2948);
    TNode<Int32T> tmp4;
    USE(tmp4);
    tmp4 = FromConstexpr14ATElementsKind24ATconstexpr_ElementsKind_169(state_, HOLEY_SMI_ELEMENTS);
    ca_.Goto(&block1, tmp3, tmp4);
  }

  if (block3.is_used()) {
    TNode<Int32T> tmp5;
    ca_.Bind(&block3, &tmp5);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2949);
    TNode<Int32T> tmp6;
    USE(tmp6);
    tmp6 = FromConstexpr14ATElementsKind24ATconstexpr_ElementsKind_169(state_, PACKED_DOUBLE_ELEMENTS);
    TNode<BoolT> tmp7;
    USE(tmp7);
    tmp7 = CodeStubAssembler(state_).ElementsKindEqual(TNode<Int32T>{tmp5}, TNode<Int32T>{tmp6});
    ca_.Branch(tmp7, &block5, &block6, tmp5);
  }

  if (block5.is_used()) {
    TNode<Int32T> tmp8;
    ca_.Bind(&block5, &tmp8);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2950);
    TNode<Int32T> tmp9;
    USE(tmp9);
    tmp9 = FromConstexpr14ATElementsKind24ATconstexpr_ElementsKind_169(state_, HOLEY_DOUBLE_ELEMENTS);
    ca_.Goto(&block1, tmp8, tmp9);
  }

  if (block6.is_used()) {
    TNode<Int32T> tmp10;
    ca_.Bind(&block6, &tmp10);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2947);
    ca_.Goto(&block4, tmp10);
  }

  if (block4.is_used()) {
    TNode<Int32T> tmp11;
    ca_.Bind(&block4, &tmp11);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2953);
    TNode<Int32T> tmp12;
    USE(tmp12);
    tmp12 = FromConstexpr14ATElementsKind24ATconstexpr_ElementsKind_169(state_, HOLEY_ELEMENTS);
    ca_.Goto(&block1, tmp11, tmp12);
  }

  if (block1.is_used()) {
    TNode<Int32T> tmp13;
    TNode<Int32T> tmp14;
    ca_.Bind(&block1, &tmp13, &tmp14);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2946);
    ca_.Goto(&block7, tmp13, tmp14);
  }

    TNode<Int32T> tmp15;
    TNode<Int32T> tmp16;
    ca_.Bind(&block7, &tmp15, &tmp16);
  return TNode<Int32T>{tmp16};
}

TNode<Int32T> AllowDoubleElements_219(compiler::CodeAssemblerState* state_, TNode<Int32T> p_kind) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Int32T> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Int32T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Int32T> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Int32T> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Int32T> block6(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Int32T> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Int32T, Int32T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Int32T, Int32T> block7(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_kind);

  if (block0.is_used()) {
    TNode<Int32T> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2957);
    TNode<Int32T> tmp1;
    USE(tmp1);
    tmp1 = FromConstexpr14ATElementsKind24ATconstexpr_ElementsKind_169(state_, PACKED_SMI_ELEMENTS);
    TNode<BoolT> tmp2;
    USE(tmp2);
    tmp2 = CodeStubAssembler(state_).ElementsKindEqual(TNode<Int32T>{tmp0}, TNode<Int32T>{tmp1});
    ca_.Branch(tmp2, &block2, &block3, tmp0);
  }

  if (block2.is_used()) {
    TNode<Int32T> tmp3;
    ca_.Bind(&block2, &tmp3);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2958);
    TNode<Int32T> tmp4;
    USE(tmp4);
    tmp4 = FromConstexpr14ATElementsKind24ATconstexpr_ElementsKind_169(state_, PACKED_DOUBLE_ELEMENTS);
    ca_.Goto(&block1, tmp3, tmp4);
  }

  if (block3.is_used()) {
    TNode<Int32T> tmp5;
    ca_.Bind(&block3, &tmp5);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2959);
    TNode<Int32T> tmp6;
    USE(tmp6);
    tmp6 = FromConstexpr14ATElementsKind24ATconstexpr_ElementsKind_169(state_, HOLEY_SMI_ELEMENTS);
    TNode<BoolT> tmp7;
    USE(tmp7);
    tmp7 = CodeStubAssembler(state_).ElementsKindEqual(TNode<Int32T>{tmp5}, TNode<Int32T>{tmp6});
    ca_.Branch(tmp7, &block5, &block6, tmp5);
  }

  if (block5.is_used()) {
    TNode<Int32T> tmp8;
    ca_.Bind(&block5, &tmp8);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2960);
    TNode<Int32T> tmp9;
    USE(tmp9);
    tmp9 = FromConstexpr14ATElementsKind24ATconstexpr_ElementsKind_169(state_, HOLEY_DOUBLE_ELEMENTS);
    ca_.Goto(&block1, tmp8, tmp9);
  }

  if (block6.is_used()) {
    TNode<Int32T> tmp10;
    ca_.Bind(&block6, &tmp10);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2957);
    ca_.Goto(&block4, tmp10);
  }

  if (block4.is_used()) {
    TNode<Int32T> tmp11;
    ca_.Bind(&block4, &tmp11);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2962);
    ca_.Goto(&block1, tmp11, tmp11);
  }

  if (block1.is_used()) {
    TNode<Int32T> tmp12;
    TNode<Int32T> tmp13;
    ca_.Bind(&block1, &tmp12, &tmp13);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2956);
    ca_.Goto(&block7, tmp12, tmp13);
  }

    TNode<Int32T> tmp14;
    TNode<Int32T> tmp15;
    ca_.Bind(&block7, &tmp14, &tmp15);
  return TNode<Int32T>{tmp15};
}

TNode<Int32T> AllowNonNumberElements_220(compiler::CodeAssemblerState* state_, TNode<Int32T> p_kind) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Int32T> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Int32T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Int32T> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Int32T> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Int32T> block6(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Int32T> block8(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Int32T> block9(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Int32T> block11(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Int32T> block12(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Int32T> block10(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Int32T> block7(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Int32T> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Int32T, Int32T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Int32T, Int32T> block13(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_kind);

  if (block0.is_used()) {
    TNode<Int32T> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2966);
    TNode<Int32T> tmp1;
    USE(tmp1);
    tmp1 = FromConstexpr14ATElementsKind24ATconstexpr_ElementsKind_169(state_, PACKED_SMI_ELEMENTS);
    TNode<BoolT> tmp2;
    USE(tmp2);
    tmp2 = CodeStubAssembler(state_).ElementsKindEqual(TNode<Int32T>{tmp0}, TNode<Int32T>{tmp1});
    ca_.Branch(tmp2, &block2, &block3, tmp0);
  }

  if (block2.is_used()) {
    TNode<Int32T> tmp3;
    ca_.Bind(&block2, &tmp3);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2967);
    TNode<Int32T> tmp4;
    USE(tmp4);
    tmp4 = FromConstexpr14ATElementsKind24ATconstexpr_ElementsKind_169(state_, PACKED_ELEMENTS);
    ca_.Goto(&block1, tmp3, tmp4);
  }

  if (block3.is_used()) {
    TNode<Int32T> tmp5;
    ca_.Bind(&block3, &tmp5);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2968);
    TNode<Int32T> tmp6;
    USE(tmp6);
    tmp6 = FromConstexpr14ATElementsKind24ATconstexpr_ElementsKind_169(state_, HOLEY_SMI_ELEMENTS);
    TNode<BoolT> tmp7;
    USE(tmp7);
    tmp7 = CodeStubAssembler(state_).ElementsKindEqual(TNode<Int32T>{tmp5}, TNode<Int32T>{tmp6});
    ca_.Branch(tmp7, &block5, &block6, tmp5);
  }

  if (block5.is_used()) {
    TNode<Int32T> tmp8;
    ca_.Bind(&block5, &tmp8);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2969);
    TNode<Int32T> tmp9;
    USE(tmp9);
    tmp9 = FromConstexpr14ATElementsKind24ATconstexpr_ElementsKind_169(state_, HOLEY_ELEMENTS);
    ca_.Goto(&block1, tmp8, tmp9);
  }

  if (block6.is_used()) {
    TNode<Int32T> tmp10;
    ca_.Bind(&block6, &tmp10);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2970);
    TNode<Int32T> tmp11;
    USE(tmp11);
    tmp11 = FromConstexpr14ATElementsKind24ATconstexpr_ElementsKind_169(state_, PACKED_DOUBLE_ELEMENTS);
    TNode<BoolT> tmp12;
    USE(tmp12);
    tmp12 = CodeStubAssembler(state_).ElementsKindEqual(TNode<Int32T>{tmp10}, TNode<Int32T>{tmp11});
    ca_.Branch(tmp12, &block8, &block9, tmp10);
  }

  if (block8.is_used()) {
    TNode<Int32T> tmp13;
    ca_.Bind(&block8, &tmp13);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2971);
    TNode<Int32T> tmp14;
    USE(tmp14);
    tmp14 = FromConstexpr14ATElementsKind24ATconstexpr_ElementsKind_169(state_, PACKED_ELEMENTS);
    ca_.Goto(&block1, tmp13, tmp14);
  }

  if (block9.is_used()) {
    TNode<Int32T> tmp15;
    ca_.Bind(&block9, &tmp15);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2972);
    TNode<Int32T> tmp16;
    USE(tmp16);
    tmp16 = FromConstexpr14ATElementsKind24ATconstexpr_ElementsKind_169(state_, HOLEY_DOUBLE_ELEMENTS);
    TNode<BoolT> tmp17;
    USE(tmp17);
    tmp17 = CodeStubAssembler(state_).ElementsKindEqual(TNode<Int32T>{tmp15}, TNode<Int32T>{tmp16});
    ca_.Branch(tmp17, &block11, &block12, tmp15);
  }

  if (block11.is_used()) {
    TNode<Int32T> tmp18;
    ca_.Bind(&block11, &tmp18);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2973);
    TNode<Int32T> tmp19;
    USE(tmp19);
    tmp19 = FromConstexpr14ATElementsKind24ATconstexpr_ElementsKind_169(state_, HOLEY_ELEMENTS);
    ca_.Goto(&block1, tmp18, tmp19);
  }

  if (block12.is_used()) {
    TNode<Int32T> tmp20;
    ca_.Bind(&block12, &tmp20);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2970);
    ca_.Goto(&block10, tmp20);
  }

  if (block10.is_used()) {
    TNode<Int32T> tmp21;
    ca_.Bind(&block10, &tmp21);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2968);
    ca_.Goto(&block7, tmp21);
  }

  if (block7.is_used()) {
    TNode<Int32T> tmp22;
    ca_.Bind(&block7, &tmp22);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2966);
    ca_.Goto(&block4, tmp22);
  }

  if (block4.is_used()) {
    TNode<Int32T> tmp23;
    ca_.Bind(&block4, &tmp23);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2975);
    ca_.Goto(&block1, tmp23, tmp23);
  }

  if (block1.is_used()) {
    TNode<Int32T> tmp24;
    TNode<Int32T> tmp25;
    ca_.Bind(&block1, &tmp24, &tmp25);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2965);
    ca_.Goto(&block13, tmp24, tmp25);
  }

    TNode<Int32T> tmp26;
    TNode<Int32T> tmp27;
    ca_.Bind(&block13, &tmp26, &tmp27);
  return TNode<Int32T>{tmp27};
}

TNode<JSFunction> GetObjectFunction_221(compiler::CodeAssemblerState* state_, TNode<Context> p_context) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Context> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSFunction> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSFunction> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_context);

  if (block0.is_used()) {
    TNode<Context> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3013);
    TNode<NativeContext> tmp1;
    USE(tmp1);
    tmp1 = CodeStubAssembler(state_).LoadNativeContext(TNode<Context>{tmp0});
    TNode<IntPtrT> tmp2;
    USE(tmp2);
    tmp2 = FromConstexpr19ATNativeContextSlot29ATconstexpr_NativeContextSlot_172(state_, Context::OBJECT_FUNCTION_INDEX);
    TNode<Object> tmp3;
    USE(tmp3);
    tmp3 = CodeStubAssembler(state_).LoadContextElement(TNode<NativeContext>{tmp1}, TNode<IntPtrT>{tmp2});
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3012);
    TNode<JSFunction> tmp4;
    USE(tmp4);
    tmp4 = UnsafeCast10JSFunction_1474(state_, TNode<Context>{tmp0}, TNode<Object>{tmp3});
    ca_.Goto(&block1, tmp0, tmp4);
  }

  if (block1.is_used()) {
    TNode<Context> tmp5;
    TNode<JSFunction> tmp6;
    ca_.Bind(&block1, &tmp5, &tmp6);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3011);
    ca_.Goto(&block2, tmp5, tmp6);
  }

    TNode<Context> tmp7;
    TNode<JSFunction> tmp8;
    ca_.Bind(&block2, &tmp7, &tmp8);
  return TNode<JSFunction>{tmp8};
}

TNode<JSReceiver> GetArrayBufferFunction_222(compiler::CodeAssemblerState* state_, TNode<Context> p_context) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Context> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSReceiver> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSReceiver> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_context);

  if (block0.is_used()) {
    TNode<Context> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3017);
    TNode<NativeContext> tmp1;
    USE(tmp1);
    tmp1 = CodeStubAssembler(state_).LoadNativeContext(TNode<Context>{tmp0});
    TNode<IntPtrT> tmp2;
    USE(tmp2);
    tmp2 = FromConstexpr19ATNativeContextSlot29ATconstexpr_NativeContextSlot_172(state_, Context::ARRAY_BUFFER_FUN_INDEX);
    TNode<Object> tmp3;
    USE(tmp3);
    tmp3 = CodeStubAssembler(state_).LoadContextElement(TNode<NativeContext>{tmp1}, TNode<IntPtrT>{tmp2});
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3016);
    TNode<JSReceiver> tmp4;
    USE(tmp4);
    tmp4 = UnsafeCast13ATConstructor_1475(state_, TNode<Context>{tmp0}, TNode<Object>{tmp3});
    ca_.Goto(&block1, tmp0, tmp4);
  }

  if (block1.is_used()) {
    TNode<Context> tmp5;
    TNode<JSReceiver> tmp6;
    ca_.Bind(&block1, &tmp5, &tmp6);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3015);
    ca_.Goto(&block2, tmp5, tmp6);
  }

    TNode<Context> tmp7;
    TNode<JSReceiver> tmp8;
    ca_.Bind(&block2, &tmp7, &tmp8);
  return TNode<JSReceiver>{tmp8};
}

TNode<JSFunction> GetArrayBufferNoInitFunction_223(compiler::CodeAssemblerState* state_, TNode<Context> p_context) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Context> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSFunction> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSFunction> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_context);

  if (block0.is_used()) {
    TNode<Context> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3021);
    TNode<NativeContext> tmp1;
    USE(tmp1);
    tmp1 = CodeStubAssembler(state_).LoadNativeContext(TNode<Context>{tmp0});
    TNode<IntPtrT> tmp2;
    USE(tmp2);
    tmp2 = FromConstexpr19ATNativeContextSlot29ATconstexpr_NativeContextSlot_172(state_, Context::ARRAY_BUFFER_NOINIT_FUN_INDEX);
    TNode<Object> tmp3;
    USE(tmp3);
    tmp3 = CodeStubAssembler(state_).LoadContextElement(TNode<NativeContext>{tmp1}, TNode<IntPtrT>{tmp2});
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3020);
    TNode<JSFunction> tmp4;
    USE(tmp4);
    tmp4 = UnsafeCast10JSFunction_1474(state_, TNode<Context>{tmp0}, TNode<Object>{tmp3});
    ca_.Goto(&block1, tmp0, tmp4);
  }

  if (block1.is_used()) {
    TNode<Context> tmp5;
    TNode<JSFunction> tmp6;
    ca_.Bind(&block1, &tmp5, &tmp6);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3019);
    ca_.Goto(&block2, tmp5, tmp6);
  }

    TNode<Context> tmp7;
    TNode<JSFunction> tmp8;
    ca_.Bind(&block2, &tmp7, &tmp8);
  return TNode<JSFunction>{tmp8};
}

TNode<Map> GetFastPackedElementsJSArrayMap_224(compiler::CodeAssemblerState* state_, TNode<Context> p_context) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Context> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Map> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Map> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_context);

  if (block0.is_used()) {
    TNode<Context> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3025);
    TNode<NativeContext> tmp1;
    USE(tmp1);
    tmp1 = CodeStubAssembler(state_).LoadNativeContext(TNode<Context>{tmp0});
    TNode<IntPtrT> tmp2;
    USE(tmp2);
    tmp2 = FromConstexpr19ATNativeContextSlot29ATconstexpr_NativeContextSlot_172(state_, Context::JS_ARRAY_PACKED_ELEMENTS_MAP_INDEX);
    TNode<Object> tmp3;
    USE(tmp3);
    tmp3 = CodeStubAssembler(state_).LoadContextElement(TNode<NativeContext>{tmp1}, TNode<IntPtrT>{tmp2});
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3024);
    TNode<Map> tmp4;
    USE(tmp4);
    tmp4 = UnsafeCast3Map_1476(state_, TNode<Context>{tmp0}, TNode<Object>{tmp3});
    ca_.Goto(&block1, tmp0, tmp4);
  }

  if (block1.is_used()) {
    TNode<Context> tmp5;
    TNode<Map> tmp6;
    ca_.Bind(&block1, &tmp5, &tmp6);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3023);
    ca_.Goto(&block2, tmp5, tmp6);
  }

    TNode<Context> tmp7;
    TNode<Map> tmp8;
    ca_.Bind(&block2, &tmp7, &tmp8);
  return TNode<Map>{tmp8};
}

TNode<Map> GetFastPackedSmiElementsJSArrayMap_225(compiler::CodeAssemblerState* state_, TNode<Context> p_context) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Context> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Map> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Map> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_context);

  if (block0.is_used()) {
    TNode<Context> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3029);
    TNode<NativeContext> tmp1;
    USE(tmp1);
    tmp1 = CodeStubAssembler(state_).LoadNativeContext(TNode<Context>{tmp0});
    TNode<IntPtrT> tmp2;
    USE(tmp2);
    tmp2 = FromConstexpr19ATNativeContextSlot29ATconstexpr_NativeContextSlot_172(state_, Context::JS_ARRAY_PACKED_SMI_ELEMENTS_MAP_INDEX);
    TNode<Object> tmp3;
    USE(tmp3);
    tmp3 = CodeStubAssembler(state_).LoadContextElement(TNode<NativeContext>{tmp1}, TNode<IntPtrT>{tmp2});
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3028);
    TNode<Map> tmp4;
    USE(tmp4);
    tmp4 = UnsafeCast3Map_1476(state_, TNode<Context>{tmp0}, TNode<Object>{tmp3});
    ca_.Goto(&block1, tmp0, tmp4);
  }

  if (block1.is_used()) {
    TNode<Context> tmp5;
    TNode<Map> tmp6;
    ca_.Bind(&block1, &tmp5, &tmp6);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3027);
    ca_.Goto(&block2, tmp5, tmp6);
  }

    TNode<Context> tmp7;
    TNode<Map> tmp8;
    ca_.Bind(&block2, &tmp7, &tmp8);
  return TNode<Map>{tmp8};
}

TNode<Map> GetProxyRevocableResultMap_226(compiler::CodeAssemblerState* state_, TNode<Context> p_context) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Context> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Map> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Map> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_context);

  if (block0.is_used()) {
    TNode<Context> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3033);
    TNode<NativeContext> tmp1;
    USE(tmp1);
    tmp1 = CodeStubAssembler(state_).LoadNativeContext(TNode<Context>{tmp0});
    TNode<IntPtrT> tmp2;
    USE(tmp2);
    tmp2 = FromConstexpr19ATNativeContextSlot29ATconstexpr_NativeContextSlot_172(state_, Context::PROXY_REVOCABLE_RESULT_MAP_INDEX);
    TNode<Object> tmp3;
    USE(tmp3);
    tmp3 = CodeStubAssembler(state_).LoadContextElement(TNode<NativeContext>{tmp1}, TNode<IntPtrT>{tmp2});
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3032);
    TNode<Map> tmp4;
    USE(tmp4);
    tmp4 = UnsafeCast3Map_1476(state_, TNode<Context>{tmp0}, TNode<Object>{tmp3});
    ca_.Goto(&block1, tmp0, tmp4);
  }

  if (block1.is_used()) {
    TNode<Context> tmp5;
    TNode<Map> tmp6;
    ca_.Bind(&block1, &tmp5, &tmp6);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3031);
    ca_.Goto(&block2, tmp5, tmp6);
  }

    TNode<Context> tmp7;
    TNode<Map> tmp8;
    ca_.Bind(&block2, &tmp7, &tmp8);
  return TNode<Map>{tmp8};
}

TNode<Map> GetIteratorResultMap_227(compiler::CodeAssemblerState* state_, TNode<Context> p_context) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Context> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Map> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Map> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_context);

  if (block0.is_used()) {
    TNode<Context> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3036);
    TNode<NativeContext> tmp1;
    USE(tmp1);
    tmp1 = CodeStubAssembler(state_).LoadNativeContext(TNode<Context>{tmp0});
    TNode<IntPtrT> tmp2;
    USE(tmp2);
    tmp2 = FromConstexpr19ATNativeContextSlot29ATconstexpr_NativeContextSlot_172(state_, Context::ITERATOR_RESULT_MAP_INDEX);
    TNode<Object> tmp3;
    USE(tmp3);
    tmp3 = CodeStubAssembler(state_).LoadContextElement(TNode<NativeContext>{tmp1}, TNode<IntPtrT>{tmp2});
    TNode<Map> tmp4;
    USE(tmp4);
    tmp4 = UnsafeCast3Map_1476(state_, TNode<Context>{tmp0}, TNode<Object>{tmp3});
    ca_.Goto(&block1, tmp0, tmp4);
  }

  if (block1.is_used()) {
    TNode<Context> tmp5;
    TNode<Map> tmp6;
    ca_.Bind(&block1, &tmp5, &tmp6);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3035);
    ca_.Goto(&block2, tmp5, tmp6);
  }

    TNode<Context> tmp7;
    TNode<Map> tmp8;
    ca_.Bind(&block2, &tmp7, &tmp8);
  return TNode<Map>{tmp8};
}

TNode<Map> GetInitialStringIteratorMap_228(compiler::CodeAssemblerState* state_, TNode<Context> p_context) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Context> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Map> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Map> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_context);

  if (block0.is_used()) {
    TNode<Context> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3040);
    TNode<NativeContext> tmp1;
    USE(tmp1);
    tmp1 = CodeStubAssembler(state_).LoadNativeContext(TNode<Context>{tmp0});
    TNode<IntPtrT> tmp2;
    USE(tmp2);
    tmp2 = FromConstexpr19ATNativeContextSlot29ATconstexpr_NativeContextSlot_172(state_, Context::INITIAL_STRING_ITERATOR_MAP_INDEX);
    TNode<Object> tmp3;
    USE(tmp3);
    tmp3 = CodeStubAssembler(state_).LoadContextElement(TNode<NativeContext>{tmp1}, TNode<IntPtrT>{tmp2});
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3039);
    TNode<Map> tmp4;
    USE(tmp4);
    tmp4 = UnsafeCast3Map_1476(state_, TNode<Context>{tmp0}, TNode<Object>{tmp3});
    ca_.Goto(&block1, tmp0, tmp4);
  }

  if (block1.is_used()) {
    TNode<Context> tmp5;
    TNode<Map> tmp6;
    ca_.Bind(&block1, &tmp5, &tmp6);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3038);
    ca_.Goto(&block2, tmp5, tmp6);
  }

    TNode<Context> tmp7;
    TNode<Map> tmp8;
    ca_.Bind(&block2, &tmp7, &tmp8);
  return TNode<Map>{tmp8};
}

TNode<JSReceiver> GetReflectApply_229(compiler::CodeAssemblerState* state_, TNode<Context> p_context) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Context> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSReceiver> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSReceiver> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_context);

  if (block0.is_used()) {
    TNode<Context> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3043);
    TNode<NativeContext> tmp1;
    USE(tmp1);
    tmp1 = CodeStubAssembler(state_).LoadNativeContext(TNode<Context>{tmp0});
    TNode<IntPtrT> tmp2;
    USE(tmp2);
    tmp2 = FromConstexpr19ATNativeContextSlot29ATconstexpr_NativeContextSlot_172(state_, Context::REFLECT_APPLY_INDEX);
    TNode<Object> tmp3;
    USE(tmp3);
    tmp3 = CodeStubAssembler(state_).LoadContextElement(TNode<NativeContext>{tmp1}, TNode<IntPtrT>{tmp2});
    TNode<JSReceiver> tmp4;
    USE(tmp4);
    tmp4 = UnsafeCast71UT19ATCallableApiObject17ATCallableJSProxy15JSBoundFunction10JSFunction_1477(state_, TNode<Context>{tmp0}, TNode<Object>{tmp3});
    ca_.Goto(&block1, tmp0, tmp4);
  }

  if (block1.is_used()) {
    TNode<Context> tmp5;
    TNode<JSReceiver> tmp6;
    ca_.Bind(&block1, &tmp5, &tmp6);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3042);
    ca_.Goto(&block2, tmp5, tmp6);
  }

    TNode<Context> tmp7;
    TNode<JSReceiver> tmp8;
    ca_.Bind(&block2, &tmp7, &tmp8);
  return TNode<JSReceiver>{tmp8};
}

TNode<RegExpMatchInfo> GetRegExpLastMatchInfo_230(compiler::CodeAssemblerState* state_, TNode<Context> p_context) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Context> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, RegExpMatchInfo> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, RegExpMatchInfo> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_context);

  if (block0.is_used()) {
    TNode<Context> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3047);
    TNode<NativeContext> tmp1;
    USE(tmp1);
    tmp1 = CodeStubAssembler(state_).LoadNativeContext(TNode<Context>{tmp0});
    TNode<IntPtrT> tmp2;
    USE(tmp2);
    tmp2 = FromConstexpr19ATNativeContextSlot29ATconstexpr_NativeContextSlot_172(state_, Context::REGEXP_LAST_MATCH_INFO_INDEX);
    TNode<Object> tmp3;
    USE(tmp3);
    tmp3 = CodeStubAssembler(state_).LoadContextElement(TNode<NativeContext>{tmp1}, TNode<IntPtrT>{tmp2});
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3046);
    TNode<RegExpMatchInfo> tmp4;
    USE(tmp4);
    tmp4 = TORQUE_CAST(TNode<Object>{tmp3});
    ca_.Goto(&block1, tmp0, tmp4);
  }

  if (block1.is_used()) {
    TNode<Context> tmp5;
    TNode<RegExpMatchInfo> tmp6;
    ca_.Bind(&block1, &tmp5, &tmp6);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3045);
    ca_.Goto(&block2, tmp5, tmp6);
  }

    TNode<Context> tmp7;
    TNode<RegExpMatchInfo> tmp8;
    ca_.Bind(&block2, &tmp7, &tmp8);
  return TNode<RegExpMatchInfo>{tmp8};
}

void TorqueMoveElementsSmi_231(compiler::CodeAssemblerState* state_, TNode<FixedArray> p_elements, TNode<IntPtrT> p_dstIndex, TNode<IntPtrT> p_srcIndex, TNode<IntPtrT> p_count) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<FixedArray, IntPtrT, IntPtrT, IntPtrT> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FixedArray, IntPtrT, IntPtrT, IntPtrT> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FixedArray, IntPtrT, IntPtrT, IntPtrT> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_elements, p_dstIndex, p_srcIndex, p_count);

  if (block0.is_used()) {
    TNode<FixedArray> tmp0;
    TNode<IntPtrT> tmp1;
    TNode<IntPtrT> tmp2;
    TNode<IntPtrT> tmp3;
    ca_.Bind(&block0, &tmp0, &tmp1, &tmp2, &tmp3);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3077);
    CodeStubAssembler(state_).MoveElements(HOLEY_SMI_ELEMENTS, TNode<FixedArrayBase>{tmp0}, TNode<IntPtrT>{tmp1}, TNode<IntPtrT>{tmp2}, TNode<IntPtrT>{tmp3});
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3074);
    ca_.Goto(&block1, tmp0, tmp1, tmp2, tmp3);
  }

  if (block1.is_used()) {
    TNode<FixedArray> tmp4;
    TNode<IntPtrT> tmp5;
    TNode<IntPtrT> tmp6;
    TNode<IntPtrT> tmp7;
    ca_.Bind(&block1, &tmp4, &tmp5, &tmp6, &tmp7);
    ca_.Goto(&block2, tmp4, tmp5, tmp6, tmp7);
  }

    TNode<FixedArray> tmp8;
    TNode<IntPtrT> tmp9;
    TNode<IntPtrT> tmp10;
    TNode<IntPtrT> tmp11;
    ca_.Bind(&block2, &tmp8, &tmp9, &tmp10, &tmp11);
}

void TorqueMoveElements_232(compiler::CodeAssemblerState* state_, TNode<FixedArray> p_elements, TNode<IntPtrT> p_dstIndex, TNode<IntPtrT> p_srcIndex, TNode<IntPtrT> p_count) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<FixedArray, IntPtrT, IntPtrT, IntPtrT> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FixedArray, IntPtrT, IntPtrT, IntPtrT> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FixedArray, IntPtrT, IntPtrT, IntPtrT> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_elements, p_dstIndex, p_srcIndex, p_count);

  if (block0.is_used()) {
    TNode<FixedArray> tmp0;
    TNode<IntPtrT> tmp1;
    TNode<IntPtrT> tmp2;
    TNode<IntPtrT> tmp3;
    ca_.Bind(&block0, &tmp0, &tmp1, &tmp2, &tmp3);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3082);
    CodeStubAssembler(state_).MoveElements(HOLEY_ELEMENTS, TNode<FixedArrayBase>{tmp0}, TNode<IntPtrT>{tmp1}, TNode<IntPtrT>{tmp2}, TNode<IntPtrT>{tmp3});
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3079);
    ca_.Goto(&block1, tmp0, tmp1, tmp2, tmp3);
  }

  if (block1.is_used()) {
    TNode<FixedArray> tmp4;
    TNode<IntPtrT> tmp5;
    TNode<IntPtrT> tmp6;
    TNode<IntPtrT> tmp7;
    ca_.Bind(&block1, &tmp4, &tmp5, &tmp6, &tmp7);
    ca_.Goto(&block2, tmp4, tmp5, tmp6, tmp7);
  }

    TNode<FixedArray> tmp8;
    TNode<IntPtrT> tmp9;
    TNode<IntPtrT> tmp10;
    TNode<IntPtrT> tmp11;
    ca_.Bind(&block2, &tmp8, &tmp9, &tmp10, &tmp11);
}

void TorqueMoveElements_233(compiler::CodeAssemblerState* state_, TNode<FixedDoubleArray> p_elements, TNode<IntPtrT> p_dstIndex, TNode<IntPtrT> p_srcIndex, TNode<IntPtrT> p_count) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<FixedDoubleArray, IntPtrT, IntPtrT, IntPtrT> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FixedDoubleArray, IntPtrT, IntPtrT, IntPtrT> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FixedDoubleArray, IntPtrT, IntPtrT, IntPtrT> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_elements, p_dstIndex, p_srcIndex, p_count);

  if (block0.is_used()) {
    TNode<FixedDoubleArray> tmp0;
    TNode<IntPtrT> tmp1;
    TNode<IntPtrT> tmp2;
    TNode<IntPtrT> tmp3;
    ca_.Bind(&block0, &tmp0, &tmp1, &tmp2, &tmp3);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3087);
    CodeStubAssembler(state_).MoveElements(HOLEY_DOUBLE_ELEMENTS, TNode<FixedArrayBase>{tmp0}, TNode<IntPtrT>{tmp1}, TNode<IntPtrT>{tmp2}, TNode<IntPtrT>{tmp3});
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3084);
    ca_.Goto(&block1, tmp0, tmp1, tmp2, tmp3);
  }

  if (block1.is_used()) {
    TNode<FixedDoubleArray> tmp4;
    TNode<IntPtrT> tmp5;
    TNode<IntPtrT> tmp6;
    TNode<IntPtrT> tmp7;
    ca_.Bind(&block1, &tmp4, &tmp5, &tmp6, &tmp7);
    ca_.Goto(&block2, tmp4, tmp5, tmp6, tmp7);
  }

    TNode<FixedDoubleArray> tmp8;
    TNode<IntPtrT> tmp9;
    TNode<IntPtrT> tmp10;
    TNode<IntPtrT> tmp11;
    ca_.Bind(&block2, &tmp8, &tmp9, &tmp10, &tmp11);
}

void TorqueCopyElements_234(compiler::CodeAssemblerState* state_, TNode<FixedArray> p_dstElements, TNode<IntPtrT> p_dstIndex, TNode<FixedArray> p_srcElements, TNode<IntPtrT> p_srcIndex, TNode<IntPtrT> p_count) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<FixedArray, IntPtrT, FixedArray, IntPtrT, IntPtrT> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FixedArray, IntPtrT, FixedArray, IntPtrT, IntPtrT> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FixedArray, IntPtrT, FixedArray, IntPtrT, IntPtrT> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_dstElements, p_dstIndex, p_srcElements, p_srcIndex, p_count);

  if (block0.is_used()) {
    TNode<FixedArray> tmp0;
    TNode<IntPtrT> tmp1;
    TNode<FixedArray> tmp2;
    TNode<IntPtrT> tmp3;
    TNode<IntPtrT> tmp4;
    ca_.Bind(&block0, &tmp0, &tmp1, &tmp2, &tmp3, &tmp4);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3097);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3096);
    CodeStubAssembler(state_).CopyElements(HOLEY_ELEMENTS, TNode<FixedArrayBase>{tmp0}, TNode<IntPtrT>{tmp1}, TNode<FixedArrayBase>{tmp2}, TNode<IntPtrT>{tmp3}, TNode<IntPtrT>{tmp4});
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3093);
    ca_.Goto(&block1, tmp0, tmp1, tmp2, tmp3, tmp4);
  }

  if (block1.is_used()) {
    TNode<FixedArray> tmp5;
    TNode<IntPtrT> tmp6;
    TNode<FixedArray> tmp7;
    TNode<IntPtrT> tmp8;
    TNode<IntPtrT> tmp9;
    ca_.Bind(&block1, &tmp5, &tmp6, &tmp7, &tmp8, &tmp9);
    ca_.Goto(&block2, tmp5, tmp6, tmp7, tmp8, tmp9);
  }

    TNode<FixedArray> tmp10;
    TNode<IntPtrT> tmp11;
    TNode<FixedArray> tmp12;
    TNode<IntPtrT> tmp13;
    TNode<IntPtrT> tmp14;
    ca_.Bind(&block2, &tmp10, &tmp11, &tmp12, &tmp13, &tmp14);
}

void TorqueCopyElements_235(compiler::CodeAssemblerState* state_, TNode<FixedDoubleArray> p_dstElements, TNode<IntPtrT> p_dstIndex, TNode<FixedDoubleArray> p_srcElements, TNode<IntPtrT> p_srcIndex, TNode<IntPtrT> p_count) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<FixedDoubleArray, IntPtrT, FixedDoubleArray, IntPtrT, IntPtrT> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FixedDoubleArray, IntPtrT, FixedDoubleArray, IntPtrT, IntPtrT> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FixedDoubleArray, IntPtrT, FixedDoubleArray, IntPtrT, IntPtrT> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_dstElements, p_dstIndex, p_srcElements, p_srcIndex, p_count);

  if (block0.is_used()) {
    TNode<FixedDoubleArray> tmp0;
    TNode<IntPtrT> tmp1;
    TNode<FixedDoubleArray> tmp2;
    TNode<IntPtrT> tmp3;
    TNode<IntPtrT> tmp4;
    ca_.Bind(&block0, &tmp0, &tmp1, &tmp2, &tmp3, &tmp4);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3103);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3104);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3102);
    CodeStubAssembler(state_).CopyElements(HOLEY_DOUBLE_ELEMENTS, TNode<FixedArrayBase>{tmp0}, TNode<IntPtrT>{tmp1}, TNode<FixedArrayBase>{tmp2}, TNode<IntPtrT>{tmp3}, TNode<IntPtrT>{tmp4});
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3099);
    ca_.Goto(&block1, tmp0, tmp1, tmp2, tmp3, tmp4);
  }

  if (block1.is_used()) {
    TNode<FixedDoubleArray> tmp5;
    TNode<IntPtrT> tmp6;
    TNode<FixedDoubleArray> tmp7;
    TNode<IntPtrT> tmp8;
    TNode<IntPtrT> tmp9;
    ca_.Bind(&block1, &tmp5, &tmp6, &tmp7, &tmp8, &tmp9);
    ca_.Goto(&block2, tmp5, tmp6, tmp7, tmp8, tmp9);
  }

    TNode<FixedDoubleArray> tmp10;
    TNode<IntPtrT> tmp11;
    TNode<FixedDoubleArray> tmp12;
    TNode<IntPtrT> tmp13;
    TNode<IntPtrT> tmp14;
    ca_.Bind(&block2, &tmp10, &tmp11, &tmp12, &tmp13, &tmp14);
}

TNode<Object> LoadElementNoHole10FixedArray_236(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<JSArray> p_a, TNode<Smi> p_index, compiler::CodeAssemblerLabel* label_IfHole) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Context, JSArray, Smi> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSArray, Smi, FixedArrayBase> block6(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSArray, Smi, FixedArrayBase, FixedArray> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSArray, Smi, FixedArray, FixedArray, IntPtrT, IntPtrT, Smi, Smi, IntPtrT, HeapObject, IntPtrT, IntPtrT, IntPtrT, IntPtrT> block11(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSArray, Smi, FixedArray, FixedArray, IntPtrT, IntPtrT, Smi, Smi, IntPtrT, HeapObject, IntPtrT, IntPtrT, IntPtrT, IntPtrT> block12(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSArray, Smi, FixedArray, FixedArray, IntPtrT, IntPtrT, Smi, Smi, IntPtrT, HeapObject, IntPtrT, IntPtrT, IntPtrT, IntPtrT, HeapObject, IntPtrT> block10(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSArray, Smi, FixedArray, FixedArray, IntPtrT, IntPtrT, Smi, Smi, IntPtrT> block9(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSArray, Smi, FixedArray, FixedArray, IntPtrT, IntPtrT, Smi, Smi, IntPtrT, HeapObject, IntPtrT> block8(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSArray, Smi, FixedArray, FixedArray, IntPtrT, IntPtrT, Smi, Smi, HeapObject, IntPtrT> block7(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSArray, Smi, FixedArray, Object, Object, Object> block17(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSArray, Smi, FixedArray, Object, Object, Object, Oddball> block16(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSArray, Smi, FixedArray, Object, Object> block15(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSArray, Smi> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSArray, Smi, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSArray, Smi, Object> block18(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_context, p_a, p_index);

  if (block0.is_used()) {
    TNode<Context> tmp0;
    TNode<JSArray> tmp1;
    TNode<Smi> tmp2;
    ca_.Bind(&block0, &tmp0, &tmp1, &tmp2);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3115);
    TNode<IntPtrT> tmp3 = ca_.IntPtrConstant(JSObject::kElementsOffset);
    USE(tmp3);
    TNode<FixedArrayBase>tmp4 = CodeStubAssembler(state_).LoadReference<FixedArrayBase>(CodeStubAssembler::Reference{tmp1, tmp3});
    TNode<FixedArray> tmp5;
    USE(tmp5);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp5 = Cast10FixedArray_103(state_, TNode<HeapObject>{tmp4}, &label0);
    ca_.Goto(&block5, tmp0, tmp1, tmp2, tmp4, tmp5);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block6, tmp0, tmp1, tmp2, tmp4);
    }
  }

  if (block6.is_used()) {
    TNode<Context> tmp6;
    TNode<JSArray> tmp7;
    TNode<Smi> tmp8;
    TNode<FixedArrayBase> tmp9;
    ca_.Bind(&block6, &tmp6, &tmp7, &tmp8, &tmp9);
    ca_.Goto(&block4, tmp6, tmp7, tmp8);
  }

  if (block5.is_used()) {
    TNode<Context> tmp10;
    TNode<JSArray> tmp11;
    TNode<Smi> tmp12;
    TNode<FixedArrayBase> tmp13;
    TNode<FixedArray> tmp14;
    ca_.Bind(&block5, &tmp10, &tmp11, &tmp12, &tmp13, &tmp14);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3114);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3116);
    TNode<IntPtrT> tmp15 = ca_.IntPtrConstant(FixedArray::kObjectsOffset);
    USE(tmp15);
    TNode<IntPtrT> tmp16 = ca_.IntPtrConstant(FixedArrayBase::kLengthOffset);
    USE(tmp16);
    TNode<Smi>tmp17 = CodeStubAssembler(state_).LoadReference<Smi>(CodeStubAssembler::Reference{tmp14, tmp16});
    TNode<IntPtrT> tmp18;
    USE(tmp18);
    tmp18 = Convert8ATintptr5ATSmi_188(state_, TNode<Smi>{tmp17});
    ca_.SetSourcePosition("../../src/builtins/torque-internal.tq", 55);
    TNode<IntPtrT> tmp19;
    USE(tmp19);
    tmp19 = Convert8ATintptr5ATSmi_188(state_, TNode<Smi>{tmp12});
    ca_.SetSourcePosition("../../src/builtins/torque-internal.tq", 56);
    ca_.SetSourcePosition("../../src/builtins/torque-internal.tq", 37);
    TNode<UintPtrT> tmp20;
    USE(tmp20);
    tmp20 = Convert9ATuintptr8ATintptr_205(state_, TNode<IntPtrT>{tmp19});
    TNode<UintPtrT> tmp21;
    USE(tmp21);
    tmp21 = Convert9ATuintptr8ATintptr_205(state_, TNode<IntPtrT>{tmp18});
    TNode<BoolT> tmp22;
    USE(tmp22);
    tmp22 = CodeStubAssembler(state_).UintPtrLessThan(TNode<UintPtrT>{tmp20}, TNode<UintPtrT>{tmp21});
    ca_.Branch(tmp22, &block11, &block12, tmp10, tmp11, tmp12, tmp14, tmp14, tmp15, tmp18, tmp12, tmp12, tmp19, tmp14, tmp15, tmp18, tmp19, tmp19);
  }

  if (block11.is_used()) {
    TNode<Context> tmp23;
    TNode<JSArray> tmp24;
    TNode<Smi> tmp25;
    TNode<FixedArray> tmp26;
    TNode<FixedArray> tmp27;
    TNode<IntPtrT> tmp28;
    TNode<IntPtrT> tmp29;
    TNode<Smi> tmp30;
    TNode<Smi> tmp31;
    TNode<IntPtrT> tmp32;
    TNode<HeapObject> tmp33;
    TNode<IntPtrT> tmp34;
    TNode<IntPtrT> tmp35;
    TNode<IntPtrT> tmp36;
    TNode<IntPtrT> tmp37;
    ca_.Bind(&block11, &tmp23, &tmp24, &tmp25, &tmp26, &tmp27, &tmp28, &tmp29, &tmp30, &tmp31, &tmp32, &tmp33, &tmp34, &tmp35, &tmp36, &tmp37);
    ca_.SetSourcePosition("../../src/builtins/torque-internal.tq", 39);
    TNode<IntPtrT> tmp38;
    USE(tmp38);
    tmp38 = FromConstexpr8ATintptr17ATconstexpr_int31_150(state_, (SizeOf20UT5ATSmi10HeapObject_346(state_)));
    TNode<IntPtrT> tmp39;
    USE(tmp39);
    tmp39 = CodeStubAssembler(state_).IntPtrMul(TNode<IntPtrT>{tmp37}, TNode<IntPtrT>{tmp38});
    TNode<IntPtrT> tmp40;
    USE(tmp40);
    tmp40 = CodeStubAssembler(state_).IntPtrAdd(TNode<IntPtrT>{tmp34}, TNode<IntPtrT>{tmp39});
    ca_.SetSourcePosition("../../src/builtins/torque-internal.tq", 38);
    TNode<HeapObject> tmp41;
    USE(tmp41);
    TNode<IntPtrT> tmp42;
    USE(tmp42);
    std::tie(tmp41, tmp42) = UnsafeNewReference20UT5ATSmi10HeapObject_1440(state_, TNode<HeapObject>{tmp33}, TNode<IntPtrT>{tmp40}).Flatten();
    ca_.Goto(&block10, tmp23, tmp24, tmp25, tmp26, tmp27, tmp28, tmp29, tmp30, tmp31, tmp32, tmp33, tmp34, tmp35, tmp36, tmp37, tmp41, tmp42);
  }

  if (block12.is_used()) {
    TNode<Context> tmp43;
    TNode<JSArray> tmp44;
    TNode<Smi> tmp45;
    TNode<FixedArray> tmp46;
    TNode<FixedArray> tmp47;
    TNode<IntPtrT> tmp48;
    TNode<IntPtrT> tmp49;
    TNode<Smi> tmp50;
    TNode<Smi> tmp51;
    TNode<IntPtrT> tmp52;
    TNode<HeapObject> tmp53;
    TNode<IntPtrT> tmp54;
    TNode<IntPtrT> tmp55;
    TNode<IntPtrT> tmp56;
    TNode<IntPtrT> tmp57;
    ca_.Bind(&block12, &tmp43, &tmp44, &tmp45, &tmp46, &tmp47, &tmp48, &tmp49, &tmp50, &tmp51, &tmp52, &tmp53, &tmp54, &tmp55, &tmp56, &tmp57);
    ca_.SetSourcePosition("../../src/builtins/torque-internal.tq", 41);
    ca_.Goto(&block9, tmp43, tmp44, tmp45, tmp46, tmp47, tmp48, tmp49, tmp50, tmp51, tmp52);
  }

  if (block10.is_used()) {
    TNode<Context> tmp58;
    TNode<JSArray> tmp59;
    TNode<Smi> tmp60;
    TNode<FixedArray> tmp61;
    TNode<FixedArray> tmp62;
    TNode<IntPtrT> tmp63;
    TNode<IntPtrT> tmp64;
    TNode<Smi> tmp65;
    TNode<Smi> tmp66;
    TNode<IntPtrT> tmp67;
    TNode<HeapObject> tmp68;
    TNode<IntPtrT> tmp69;
    TNode<IntPtrT> tmp70;
    TNode<IntPtrT> tmp71;
    TNode<IntPtrT> tmp72;
    TNode<HeapObject> tmp73;
    TNode<IntPtrT> tmp74;
    ca_.Bind(&block10, &tmp58, &tmp59, &tmp60, &tmp61, &tmp62, &tmp63, &tmp64, &tmp65, &tmp66, &tmp67, &tmp68, &tmp69, &tmp70, &tmp71, &tmp72, &tmp73, &tmp74);
    ca_.SetSourcePosition("../../src/builtins/torque-internal.tq", 56);
    ca_.Goto(&block8, tmp58, tmp59, tmp60, tmp61, tmp62, tmp63, tmp64, tmp65, tmp66, tmp67, tmp73, tmp74);
  }

  if (block9.is_used()) {
    TNode<Context> tmp75;
    TNode<JSArray> tmp76;
    TNode<Smi> tmp77;
    TNode<FixedArray> tmp78;
    TNode<FixedArray> tmp79;
    TNode<IntPtrT> tmp80;
    TNode<IntPtrT> tmp81;
    TNode<Smi> tmp82;
    TNode<Smi> tmp83;
    TNode<IntPtrT> tmp84;
    ca_.Bind(&block9, &tmp75, &tmp76, &tmp77, &tmp78, &tmp79, &tmp80, &tmp81, &tmp82, &tmp83, &tmp84);
    CodeStubAssembler(state_).Unreachable();
  }

  if (block8.is_used()) {
    TNode<Context> tmp85;
    TNode<JSArray> tmp86;
    TNode<Smi> tmp87;
    TNode<FixedArray> tmp88;
    TNode<FixedArray> tmp89;
    TNode<IntPtrT> tmp90;
    TNode<IntPtrT> tmp91;
    TNode<Smi> tmp92;
    TNode<Smi> tmp93;
    TNode<IntPtrT> tmp94;
    TNode<HeapObject> tmp95;
    TNode<IntPtrT> tmp96;
    ca_.Bind(&block8, &tmp85, &tmp86, &tmp87, &tmp88, &tmp89, &tmp90, &tmp91, &tmp92, &tmp93, &tmp94, &tmp95, &tmp96);
    ca_.Goto(&block7, tmp85, tmp86, tmp87, tmp88, tmp89, tmp90, tmp91, tmp92, tmp93, tmp95, tmp96);
  }

  if (block7.is_used()) {
    TNode<Context> tmp97;
    TNode<JSArray> tmp98;
    TNode<Smi> tmp99;
    TNode<FixedArray> tmp100;
    TNode<FixedArray> tmp101;
    TNode<IntPtrT> tmp102;
    TNode<IntPtrT> tmp103;
    TNode<Smi> tmp104;
    TNode<Smi> tmp105;
    TNode<HeapObject> tmp106;
    TNode<IntPtrT> tmp107;
    ca_.Bind(&block7, &tmp97, &tmp98, &tmp99, &tmp100, &tmp101, &tmp102, &tmp103, &tmp104, &tmp105, &tmp106, &tmp107);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3116);
    TNode<Object>tmp108 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp106, tmp107});
    TNode<Object> tmp109;
    USE(tmp109);
    tmp109 = UnsafeCast100UT8ATBigInt7ATFalse6ATNull5ATSmi9ATTheHole6ATTrue11ATUndefined10HeapNumber10JSReceiver6String6Symbol_1469(state_, TNode<Context>{tmp97}, TNode<Object>{tmp108});
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3117);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3118);
    TNode<Oddball> tmp110;
    USE(tmp110);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp110 = Cast9ATTheHole_88(state_, TNode<Object>{tmp109}, &label0);
    ca_.Goto(&block16, tmp97, tmp98, tmp99, tmp100, tmp109, tmp109, tmp109, tmp110);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block17, tmp97, tmp98, tmp99, tmp100, tmp109, tmp109, tmp109);
    }
  }

  if (block17.is_used()) {
    TNode<Context> tmp111;
    TNode<JSArray> tmp112;
    TNode<Smi> tmp113;
    TNode<FixedArray> tmp114;
    TNode<Object> tmp115;
    TNode<Object> tmp116;
    TNode<Object> tmp117;
    ca_.Bind(&block17, &tmp111, &tmp112, &tmp113, &tmp114, &tmp115, &tmp116, &tmp117);
    ca_.Goto(&block15, tmp111, tmp112, tmp113, tmp114, tmp115, tmp116);
  }

  if (block16.is_used()) {
    TNode<Context> tmp118;
    TNode<JSArray> tmp119;
    TNode<Smi> tmp120;
    TNode<FixedArray> tmp121;
    TNode<Object> tmp122;
    TNode<Object> tmp123;
    TNode<Object> tmp124;
    TNode<Oddball> tmp125;
    ca_.Bind(&block16, &tmp118, &tmp119, &tmp120, &tmp121, &tmp122, &tmp123, &tmp124, &tmp125);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3119);
    ca_.Goto(&block1);
  }

  if (block15.is_used()) {
    TNode<Context> tmp126;
    TNode<JSArray> tmp127;
    TNode<Smi> tmp128;
    TNode<FixedArray> tmp129;
    TNode<Object> tmp130;
    TNode<Object> tmp131;
    ca_.Bind(&block15, &tmp126, &tmp127, &tmp128, &tmp129, &tmp130, &tmp131);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3121);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3122);
    ca_.Goto(&block2, tmp126, tmp127, tmp128, ca_.UncheckedCast<Object>(tmp131));
  }

  if (block4.is_used()) {
    TNode<Context> tmp132;
    TNode<JSArray> tmp133;
    TNode<Smi> tmp134;
    ca_.Bind(&block4, &tmp132, &tmp133, &tmp134);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3127);
    CodeStubAssembler(state_).Unreachable();
  }

  if (block2.is_used()) {
    TNode<Context> tmp135;
    TNode<JSArray> tmp136;
    TNode<Smi> tmp137;
    TNode<Object> tmp138;
    ca_.Bind(&block2, &tmp135, &tmp136, &tmp137, &tmp138);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3110);
    ca_.Goto(&block18, tmp135, tmp136, tmp137, tmp138);
  }

  if (block1.is_used()) {
    ca_.Bind(&block1);
    ca_.Goto(label_IfHole);
  }

    TNode<Context> tmp139;
    TNode<JSArray> tmp140;
    TNode<Smi> tmp141;
    TNode<Object> tmp142;
    ca_.Bind(&block18, &tmp139, &tmp140, &tmp141, &tmp142);
  return TNode<Object>{tmp142};
}

TNode<Object> LoadElementNoHole16FixedDoubleArray_237(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<JSArray> p_a, TNode<Smi> p_index, compiler::CodeAssemblerLabel* label_IfHole) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Context, JSArray, Smi> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSArray, Smi, FixedArrayBase> block6(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSArray, Smi, FixedArrayBase, FixedDoubleArray> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSArray, Smi, FixedDoubleArray, FixedDoubleArray, Smi> block8(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSArray, Smi, FixedDoubleArray, FixedDoubleArray, Smi, Float64T> block7(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSArray, Smi> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSArray, Smi, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSArray, Smi, Object> block9(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_context, p_a, p_index);

  if (block0.is_used()) {
    TNode<Context> tmp0;
    TNode<JSArray> tmp1;
    TNode<Smi> tmp2;
    ca_.Bind(&block0, &tmp0, &tmp1, &tmp2);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3136);
    TNode<IntPtrT> tmp3 = ca_.IntPtrConstant(JSObject::kElementsOffset);
    USE(tmp3);
    TNode<FixedArrayBase>tmp4 = CodeStubAssembler(state_).LoadReference<FixedArrayBase>(CodeStubAssembler::Reference{tmp1, tmp3});
    TNode<FixedDoubleArray> tmp5;
    USE(tmp5);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp5 = Cast16FixedDoubleArray_104(state_, TNode<HeapObject>{tmp4}, &label0);
    ca_.Goto(&block5, tmp0, tmp1, tmp2, tmp4, tmp5);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block6, tmp0, tmp1, tmp2, tmp4);
    }
  }

  if (block6.is_used()) {
    TNode<Context> tmp6;
    TNode<JSArray> tmp7;
    TNode<Smi> tmp8;
    TNode<FixedArrayBase> tmp9;
    ca_.Bind(&block6, &tmp6, &tmp7, &tmp8, &tmp9);
    ca_.Goto(&block4, tmp6, tmp7, tmp8);
  }

  if (block5.is_used()) {
    TNode<Context> tmp10;
    TNode<JSArray> tmp11;
    TNode<Smi> tmp12;
    TNode<FixedArrayBase> tmp13;
    TNode<FixedDoubleArray> tmp14;
    ca_.Bind(&block5, &tmp10, &tmp11, &tmp12, &tmp13, &tmp14);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3135);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3138);
    TNode<Float64T> tmp15;
    USE(tmp15);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp15 = CodeStubAssembler(state_).LoadDoubleWithHoleCheck(TNode<FixedDoubleArray>{tmp14}, TNode<Smi>{tmp12}, &label0);
    ca_.Goto(&block7, tmp10, tmp11, tmp12, tmp14, tmp14, tmp12, tmp15);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block8, tmp10, tmp11, tmp12, tmp14, tmp14, tmp12);
    }
  }

  if (block8.is_used()) {
    TNode<Context> tmp16;
    TNode<JSArray> tmp17;
    TNode<Smi> tmp18;
    TNode<FixedDoubleArray> tmp19;
    TNode<FixedDoubleArray> tmp20;
    TNode<Smi> tmp21;
    ca_.Bind(&block8, &tmp16, &tmp17, &tmp18, &tmp19, &tmp20, &tmp21);
    ca_.Goto(&block1);
  }

  if (block7.is_used()) {
    TNode<Context> tmp22;
    TNode<JSArray> tmp23;
    TNode<Smi> tmp24;
    TNode<FixedDoubleArray> tmp25;
    TNode<FixedDoubleArray> tmp26;
    TNode<Smi> tmp27;
    TNode<Float64T> tmp28;
    ca_.Bind(&block7, &tmp22, &tmp23, &tmp24, &tmp25, &tmp26, &tmp27, &tmp28);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3137);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3139);
    TNode<HeapNumber> tmp29;
    USE(tmp29);
    tmp29 = CodeStubAssembler(state_).AllocateHeapNumberWithValue(TNode<Float64T>{tmp28});
    ca_.Goto(&block2, tmp22, tmp23, tmp24, tmp29);
  }

  if (block4.is_used()) {
    TNode<Context> tmp30;
    TNode<JSArray> tmp31;
    TNode<Smi> tmp32;
    ca_.Bind(&block4, &tmp30, &tmp31, &tmp32);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3142);
    CodeStubAssembler(state_).Unreachable();
  }

  if (block2.is_used()) {
    TNode<Context> tmp33;
    TNode<JSArray> tmp34;
    TNode<Smi> tmp35;
    TNode<Object> tmp36;
    ca_.Bind(&block2, &tmp33, &tmp34, &tmp35, &tmp36);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3131);
    ca_.Goto(&block9, tmp33, tmp34, tmp35, tmp36);
  }

  if (block1.is_used()) {
    ca_.Bind(&block1);
    ca_.Goto(label_IfHole);
  }

    TNode<Context> tmp37;
    TNode<JSArray> tmp38;
    TNode<Smi> tmp39;
    TNode<Object> tmp40;
    ca_.Bind(&block9, &tmp37, &tmp38, &tmp39, &tmp40);
  return TNode<Object>{tmp40};
}

TorqueStructFastJSArrayWitness NewFastJSArrayWitness_238(compiler::CodeAssemblerState* state_, TNode<JSArray> p_array) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSArray> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSArray, JSArray, JSArray, Map, BoolT, BoolT, BoolT> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSArray, JSArray, JSArray, Map, BoolT, BoolT, BoolT> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_array);

  if (block0.is_used()) {
    TNode<JSArray> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3250);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(HeapObject::kMapOffset);
    USE(tmp1);
    TNode<Map>tmp2 = CodeStubAssembler(state_).LoadReference<Map>(CodeStubAssembler::Reference{tmp0, tmp1});
    TNode<Int32T> tmp3;
    USE(tmp3);
    tmp3 = CodeStubAssembler(state_).LoadMapElementsKind(TNode<Map>{tmp2});
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3252);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3253);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3254);
    TNode<IntPtrT> tmp4 = ca_.IntPtrConstant(HeapObject::kMapOffset);
    USE(tmp4);
    TNode<Map>tmp5 = CodeStubAssembler(state_).LoadReference<Map>(CodeStubAssembler::Reference{tmp0, tmp4});
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3255);
    TNode<BoolT> tmp6;
    USE(tmp6);
    tmp6 = CodeStubAssembler(state_).IsDoubleElementsKind(TNode<Int32T>{tmp3});
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3256);
    TNode<BoolT> tmp7;
    USE(tmp7);
    tmp7 = CodeStubAssembler(state_).IsElementsKindLessThanOrEqual(TNode<Int32T>{tmp3}, HOLEY_SMI_ELEMENTS);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3251);
    TNode<BoolT> tmp8;
    USE(tmp8);
    tmp8 = FromConstexpr6ATbool16ATconstexpr_bool_167(state_, false);
    ca_.Goto(&block1, tmp0, tmp0, tmp0, tmp5, tmp6, tmp7, tmp8);
  }

  if (block1.is_used()) {
    TNode<JSArray> tmp9;
    TNode<JSArray> tmp10;
    TNode<JSArray> tmp11;
    TNode<Map> tmp12;
    TNode<BoolT> tmp13;
    TNode<BoolT> tmp14;
    TNode<BoolT> tmp15;
    ca_.Bind(&block1, &tmp9, &tmp10, &tmp11, &tmp12, &tmp13, &tmp14, &tmp15);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3249);
    ca_.Goto(&block2, tmp9, tmp10, tmp11, tmp12, tmp13, tmp14, tmp15);
  }

    TNode<JSArray> tmp16;
    TNode<JSArray> tmp17;
    TNode<JSArray> tmp18;
    TNode<Map> tmp19;
    TNode<BoolT> tmp20;
    TNode<BoolT> tmp21;
    TNode<BoolT> tmp22;
    ca_.Bind(&block2, &tmp16, &tmp17, &tmp18, &tmp19, &tmp20, &tmp21, &tmp22);
  return TorqueStructFastJSArrayWitness{TNode<JSArray>{tmp17}, TNode<JSArray>{tmp18}, TNode<Map>{tmp19}, TNode<BoolT>{tmp20}, TNode<BoolT>{tmp21}, TNode<BoolT>{tmp22}};
}

TorqueStructFastJSArrayForReadWitness NewFastJSArrayForReadWitness_239(compiler::CodeAssemblerState* state_, TNode<JSArray> p_array) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSArray> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSArray, JSArray, JSArray, Map, BoolT> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSArray, JSArray, JSArray, Map, BoolT> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_array);

  if (block0.is_used()) {
    TNode<JSArray> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3297);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(HeapObject::kMapOffset);
    USE(tmp1);
    TNode<Map>tmp2 = CodeStubAssembler(state_).LoadReference<Map>(CodeStubAssembler::Reference{tmp0, tmp1});
    TNode<Int32T> tmp3;
    USE(tmp3);
    tmp3 = CodeStubAssembler(state_).LoadMapElementsKind(TNode<Map>{tmp2});
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3299);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3300);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3301);
    TNode<IntPtrT> tmp4 = ca_.IntPtrConstant(HeapObject::kMapOffset);
    USE(tmp4);
    TNode<Map>tmp5 = CodeStubAssembler(state_).LoadReference<Map>(CodeStubAssembler::Reference{tmp0, tmp4});
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3302);
    TNode<BoolT> tmp6;
    USE(tmp6);
    tmp6 = CodeStubAssembler(state_).IsDoubleElementsKind(TNode<Int32T>{tmp3});
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3298);
    ca_.Goto(&block1, tmp0, tmp0, tmp0, tmp5, tmp6);
  }

  if (block1.is_used()) {
    TNode<JSArray> tmp7;
    TNode<JSArray> tmp8;
    TNode<JSArray> tmp9;
    TNode<Map> tmp10;
    TNode<BoolT> tmp11;
    ca_.Bind(&block1, &tmp7, &tmp8, &tmp9, &tmp10, &tmp11);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3295);
    ca_.Goto(&block2, tmp7, tmp8, tmp9, tmp10, tmp11);
  }

    TNode<JSArray> tmp12;
    TNode<JSArray> tmp13;
    TNode<JSArray> tmp14;
    TNode<Map> tmp15;
    TNode<BoolT> tmp16;
    ca_.Bind(&block2, &tmp12, &tmp13, &tmp14, &tmp15, &tmp16);
  return TorqueStructFastJSArrayForReadWitness{TNode<JSArray>{tmp13}, TNode<JSArray>{tmp14}, TNode<Map>{tmp15}, TNode<BoolT>{tmp16}};
}

TNode<BoolT> NumberIsNaN_240(compiler::CodeAssemblerState* state_, TNode<Number> p_number) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Number> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Number, Number, Number> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Number, Number, Number, Smi> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Number, Number> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Number, BoolT> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Number, BoolT> block6(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_number);

  if (block0.is_used()) {
    TNode<Number> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3344);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3345);
    TNode<Smi> tmp1;
    USE(tmp1);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp1 = Cast5ATSmi_83(state_, TNode<Object>{tmp0}, &label0);
    ca_.Goto(&block4, tmp0, tmp0, tmp0, tmp1);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block5, tmp0, tmp0, tmp0);
    }
  }

  if (block5.is_used()) {
    TNode<Number> tmp2;
    TNode<Number> tmp3;
    TNode<Number> tmp4;
    ca_.Bind(&block5, &tmp2, &tmp3, &tmp4);
    ca_.Goto(&block3, tmp2, tmp3);
  }

  if (block4.is_used()) {
    TNode<Number> tmp5;
    TNode<Number> tmp6;
    TNode<Number> tmp7;
    TNode<Smi> tmp8;
    ca_.Bind(&block4, &tmp5, &tmp6, &tmp7, &tmp8);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3346);
    TNode<BoolT> tmp9;
    USE(tmp9);
    tmp9 = FromConstexpr6ATbool16ATconstexpr_bool_167(state_, false);
    ca_.Goto(&block1, tmp5, tmp9);
  }

  if (block3.is_used()) {
    TNode<Number> tmp10;
    TNode<Number> tmp11;
    ca_.Bind(&block3, &tmp10, &tmp11);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3348);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3349);
    TNode<Float64T> tmp12;
    USE(tmp12);
    tmp12 = Convert9ATfloat6410HeapNumber_195(state_, TNode<HeapNumber>{ca_.UncheckedCast<HeapNumber>(tmp11)});
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3350);
    TNode<BoolT> tmp13;
    USE(tmp13);
    tmp13 = CodeStubAssembler(state_).Float64NotEqual(TNode<Float64T>{tmp12}, TNode<Float64T>{tmp12});
    ca_.Goto(&block1, tmp10, tmp13);
  }

  if (block1.is_used()) {
    TNode<Number> tmp14;
    TNode<BoolT> tmp15;
    ca_.Bind(&block1, &tmp14, &tmp15);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3343);
    ca_.Goto(&block6, tmp14, tmp15);
  }

    TNode<Number> tmp16;
    TNode<BoolT> tmp17;
    ca_.Bind(&block6, &tmp16, &tmp17);
  return TNode<BoolT>{tmp17};
}

TNode<BoolT> IsForceSlowPath_241(compiler::CodeAssemblerState* state_) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<BoolT> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<BoolT> block6(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0);

  if (block0.is_used()) {
    ca_.Bind(&block0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3357);
    compiler::CodeAssemblerLabel label0(&ca_);
    CodeStubAssembler(state_).GotoIfForceSlowPath(&label0);
    ca_.Goto(&block4);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block5);
    }
  }

  if (block5.is_used()) {
    ca_.Bind(&block5);
    ca_.Goto(&block3);
  }

  if (block4.is_used()) {
    ca_.Bind(&block4);
    ca_.Goto(&block2);
  }

  if (block3.is_used()) {
    ca_.Bind(&block3);
    TNode<BoolT> tmp0;
    USE(tmp0);
    tmp0 = FromConstexpr6ATbool16ATconstexpr_bool_167(state_, true);
    ca_.Goto(&block1, tmp0);
  }

  if (block2.is_used()) {
    ca_.Bind(&block2);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3358);
    TNode<BoolT> tmp1;
    USE(tmp1);
    tmp1 = FromConstexpr6ATbool16ATconstexpr_bool_167(state_, false);
    ca_.Goto(&block1, tmp1);
  }

  if (block1.is_used()) {
    TNode<BoolT> tmp2;
    ca_.Bind(&block1, &tmp2);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3356);
    ca_.Goto(&block6, tmp2);
  }

    TNode<BoolT> tmp3;
    ca_.Bind(&block6, &tmp3);
  return TNode<BoolT>{tmp3};
}

TNode<BoolT> ToBoolean_242(compiler::CodeAssemblerState* state_, TNode<Object> p_obj) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object> block6(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object> block7(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, BoolT> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, BoolT> block8(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_obj);

  if (block0.is_used()) {
    TNode<Object> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3367);
    compiler::CodeAssemblerLabel label0(&ca_);
    compiler::CodeAssemblerLabel label1(&ca_);
    CodeStubAssembler(state_).BranchIfToBooleanIsTrue(TNode<Object>{tmp0}, &label0, &label1);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block6, tmp0, tmp0);
    }
    if (label1.is_used()) {
      ca_.Bind(&label1);
      ca_.Goto(&block7, tmp0, tmp0);
    }
  }

  if (block6.is_used()) {
    TNode<Object> tmp1;
    TNode<Object> tmp2;
    ca_.Bind(&block6, &tmp1, &tmp2);
    ca_.Goto(&block5, tmp1);
  }

  if (block7.is_used()) {
    TNode<Object> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block7, &tmp3, &tmp4);
    ca_.Goto(&block3, tmp3);
  }

  if (block5.is_used()) {
    TNode<Object> tmp5;
    ca_.Bind(&block5, &tmp5);
    TNode<BoolT> tmp6;
    USE(tmp6);
    tmp6 = FromConstexpr6ATbool16ATconstexpr_bool_167(state_, true);
    ca_.Goto(&block1, tmp5, tmp6);
  }

  if (block3.is_used()) {
    TNode<Object> tmp7;
    ca_.Bind(&block3, &tmp7);
    TNode<BoolT> tmp8;
    USE(tmp8);
    tmp8 = FromConstexpr6ATbool16ATconstexpr_bool_167(state_, false);
    ca_.Goto(&block1, tmp7, tmp8);
  }

  if (block1.is_used()) {
    TNode<Object> tmp9;
    TNode<BoolT> tmp10;
    ca_.Bind(&block1, &tmp9, &tmp10);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3366);
    ca_.Goto(&block8, tmp9, tmp10);
  }

    TNode<Object> tmp11;
    TNode<BoolT> tmp12;
    ca_.Bind(&block8, &tmp11, &tmp12);
  return TNode<BoolT>{tmp12};
}

TNode<Object> RequireObjectCoercible_243(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<Object> p_value, const char* p_name) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Context, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, Object> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_context, p_value);

  if (block0.is_used()) {
    TNode<Context> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3373);
    TNode<BoolT> tmp2;
    USE(tmp2);
    tmp2 = CodeStubAssembler(state_).IsNullOrUndefined(TNode<Object>{tmp1});
    ca_.Branch(tmp2, &block2, &block3, tmp0, tmp1);
  }

  if (block2.is_used()) {
    TNode<Context> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block2, &tmp3, &tmp4);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3374);
    CodeStubAssembler(state_).ThrowTypeError(TNode<Context>{tmp3}, MessageTemplate::kCalledOnNullOrUndefined, p_name);
  }

  if (block3.is_used()) {
    TNode<Context> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block3, &tmp5, &tmp6);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3376);
    ca_.Goto(&block1, tmp5, tmp6, tmp6);
  }

  if (block1.is_used()) {
    TNode<Context> tmp7;
    TNode<Object> tmp8;
    TNode<Object> tmp9;
    ca_.Bind(&block1, &tmp7, &tmp8, &tmp9);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3370);
    ca_.Goto(&block4, tmp7, tmp8, tmp9);
  }

    TNode<Context> tmp10;
    TNode<Object> tmp11;
    TNode<Object> tmp12;
    ca_.Bind(&block4, &tmp10, &tmp11, &tmp12);
  return TNode<Object>{tmp12};
}

TNode<BoolT> SameValue_244(compiler::CodeAssemblerState* state_, TNode<Object> p_a, TNode<Object> p_b) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Object, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object, Object, Object> block6(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object, Object, Object> block7(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object, BoolT> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object, BoolT> block8(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_a, p_b);

  if (block0.is_used()) {
    TNode<Object> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3381);
    compiler::CodeAssemblerLabel label0(&ca_);
    compiler::CodeAssemblerLabel label1(&ca_);
    CodeStubAssembler(state_).BranchIfSameValue(TNode<Object>{tmp0}, TNode<Object>{tmp1}, &label0, &label1);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block6, tmp0, tmp1, tmp0, tmp1);
    }
    if (label1.is_used()) {
      ca_.Bind(&label1);
      ca_.Goto(&block7, tmp0, tmp1, tmp0, tmp1);
    }
  }

  if (block6.is_used()) {
    TNode<Object> tmp2;
    TNode<Object> tmp3;
    TNode<Object> tmp4;
    TNode<Object> tmp5;
    ca_.Bind(&block6, &tmp2, &tmp3, &tmp4, &tmp5);
    ca_.Goto(&block5, tmp2, tmp3);
  }

  if (block7.is_used()) {
    TNode<Object> tmp6;
    TNode<Object> tmp7;
    TNode<Object> tmp8;
    TNode<Object> tmp9;
    ca_.Bind(&block7, &tmp6, &tmp7, &tmp8, &tmp9);
    ca_.Goto(&block3, tmp6, tmp7);
  }

  if (block5.is_used()) {
    TNode<Object> tmp10;
    TNode<Object> tmp11;
    ca_.Bind(&block5, &tmp10, &tmp11);
    TNode<BoolT> tmp12;
    USE(tmp12);
    tmp12 = FromConstexpr6ATbool16ATconstexpr_bool_167(state_, true);
    ca_.Goto(&block1, tmp10, tmp11, tmp12);
  }

  if (block3.is_used()) {
    TNode<Object> tmp13;
    TNode<Object> tmp14;
    ca_.Bind(&block3, &tmp13, &tmp14);
    TNode<BoolT> tmp15;
    USE(tmp15);
    tmp15 = FromConstexpr6ATbool16ATconstexpr_bool_167(state_, false);
    ca_.Goto(&block1, tmp13, tmp14, tmp15);
  }

  if (block1.is_used()) {
    TNode<Object> tmp16;
    TNode<Object> tmp17;
    TNode<BoolT> tmp18;
    ca_.Bind(&block1, &tmp16, &tmp17, &tmp18);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3380);
    ca_.Goto(&block8, tmp16, tmp17, tmp18);
  }

    TNode<Object> tmp19;
    TNode<Object> tmp20;
    TNode<BoolT> tmp21;
    ca_.Bind(&block8, &tmp19, &tmp20, &tmp21);
  return TNode<BoolT>{tmp21};
}

TNode<Number> ToIndex_245(compiler::CodeAssemblerState* state_, TNode<Object> p_input, TNode<Context> p_context, compiler::CodeAssemblerLabel* label_RangeError) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Object, Context> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Context> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Context> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Context, Number, BoolT> block7(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Context, Number, BoolT> block8(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Context, Number, BoolT, BoolT> block9(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Context, Number> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Context, Number> block6(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Context, Number> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Context, Number> block10(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_input, p_context);

  if (block0.is_used()) {
    TNode<Object> tmp0;
    TNode<Context> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3386);
    TNode<Oddball> tmp2;
    USE(tmp2);
    tmp2 = Undefined_64(state_);
    TNode<BoolT> tmp3;
    USE(tmp3);
    tmp3 = CodeStubAssembler(state_).TaggedEqual(TNode<Object>{tmp0}, TNode<HeapObject>{tmp2});
    ca_.Branch(tmp3, &block3, &block4, tmp0, tmp1);
  }

  if (block3.is_used()) {
    TNode<Object> tmp4;
    TNode<Context> tmp5;
    ca_.Bind(&block3, &tmp4, &tmp5);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3387);
    TNode<Number> tmp6;
    USE(tmp6);
    tmp6 = FromConstexpr20UT5ATSmi10HeapNumber17ATconstexpr_int31_160(state_, 0);
    ca_.Goto(&block2, tmp4, tmp5, tmp6);
  }

  if (block4.is_used()) {
    TNode<Object> tmp7;
    TNode<Context> tmp8;
    ca_.Bind(&block4, &tmp7, &tmp8);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3390);
    TNode<Number> tmp9;
    USE(tmp9);
    tmp9 = CodeStubAssembler(state_).ToInteger_Inline(TNode<Context>{tmp8}, TNode<Object>{tmp7}, CodeStubAssembler::ToIntegerTruncationMode::kTruncateMinusZero);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3391);
    TNode<Number> tmp10;
    USE(tmp10);
    tmp10 = FromConstexpr20UT5ATSmi10HeapNumber17ATconstexpr_int31_160(state_, 0);
    TNode<BoolT> tmp11;
    USE(tmp11);
    tmp11 = NumberIsLessThan_75(state_, TNode<Number>{tmp9}, TNode<Number>{tmp10});
    ca_.Branch(tmp11, &block7, &block8, tmp7, tmp8, tmp9, tmp11);
  }

  if (block7.is_used()) {
    TNode<Object> tmp12;
    TNode<Context> tmp13;
    TNode<Number> tmp14;
    TNode<BoolT> tmp15;
    ca_.Bind(&block7, &tmp12, &tmp13, &tmp14, &tmp15);
    TNode<BoolT> tmp16;
    USE(tmp16);
    tmp16 = FromConstexpr6ATbool16ATconstexpr_bool_167(state_, true);
    ca_.Goto(&block9, tmp12, tmp13, tmp14, tmp15, tmp16);
  }

  if (block8.is_used()) {
    TNode<Object> tmp17;
    TNode<Context> tmp18;
    TNode<Number> tmp19;
    TNode<BoolT> tmp20;
    ca_.Bind(&block8, &tmp17, &tmp18, &tmp19, &tmp20);
    TNode<Number> tmp21;
    USE(tmp21);
    tmp21 = FromConstexpr20UT5ATSmi10HeapNumber19ATconstexpr_float64_159(state_, kMaxSafeInteger);
    TNode<BoolT> tmp22;
    USE(tmp22);
    tmp22 = NumberIsGreaterThan_77(state_, TNode<Number>{tmp19}, TNode<Number>{tmp21});
    ca_.Goto(&block9, tmp17, tmp18, tmp19, tmp20, tmp22);
  }

  if (block9.is_used()) {
    TNode<Object> tmp23;
    TNode<Context> tmp24;
    TNode<Number> tmp25;
    TNode<BoolT> tmp26;
    TNode<BoolT> tmp27;
    ca_.Bind(&block9, &tmp23, &tmp24, &tmp25, &tmp26, &tmp27);
    ca_.Branch(tmp27, &block5, &block6, tmp23, tmp24, tmp25);
  }

  if (block5.is_used()) {
    TNode<Object> tmp28;
    TNode<Context> tmp29;
    TNode<Number> tmp30;
    ca_.Bind(&block5, &tmp28, &tmp29, &tmp30);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3392);
    ca_.Goto(&block1);
  }

  if (block6.is_used()) {
    TNode<Object> tmp31;
    TNode<Context> tmp32;
    TNode<Number> tmp33;
    ca_.Bind(&block6, &tmp31, &tmp32, &tmp33);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3395);
    ca_.Goto(&block2, tmp31, tmp32, tmp33);
  }

  if (block2.is_used()) {
    TNode<Object> tmp34;
    TNode<Context> tmp35;
    TNode<Number> tmp36;
    ca_.Bind(&block2, &tmp34, &tmp35, &tmp36);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3384);
    ca_.Goto(&block10, tmp34, tmp35, tmp36);
  }

  if (block1.is_used()) {
    ca_.Bind(&block1);
    ca_.Goto(label_RangeError);
  }

    TNode<Object> tmp37;
    TNode<Context> tmp38;
    TNode<Number> tmp39;
    ca_.Bind(&block10, &tmp37, &tmp38, &tmp39);
  return TNode<Number>{tmp39};
}

TNode<Number> GetLengthProperty_246(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<Object> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Context, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, Object, Object> block7(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, Object, Object, JSArray> block6(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, Object> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, Object, Object> block11(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, Object, Object, JSArgumentsObjectWithLength> block10(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, Object> block9(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, Object> block3(&ca_, compiler::CodeAssemblerLabel::kDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, Number> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, Number> block12(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_context, p_o);

  if (block0.is_used()) {
    TNode<Context> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3401);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3402);
    TNode<JSArray> tmp2;
    USE(tmp2);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp2 = Cast7JSArray_1478(state_, TNode<Context>{tmp0}, TNode<Object>{tmp1}, &label0);
    ca_.Goto(&block6, tmp0, tmp1, tmp1, tmp1, tmp2);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block7, tmp0, tmp1, tmp1, tmp1);
    }
  }

  if (block7.is_used()) {
    TNode<Context> tmp3;
    TNode<Object> tmp4;
    TNode<Object> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block7, &tmp3, &tmp4, &tmp5, &tmp6);
    ca_.Goto(&block5, tmp3, tmp4, tmp5);
  }

  if (block6.is_used()) {
    TNode<Context> tmp7;
    TNode<Object> tmp8;
    TNode<Object> tmp9;
    TNode<Object> tmp10;
    TNode<JSArray> tmp11;
    ca_.Bind(&block6, &tmp7, &tmp8, &tmp9, &tmp10, &tmp11);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3403);
    TNode<IntPtrT> tmp12 = ca_.IntPtrConstant(JSArray::kLengthOffset);
    USE(tmp12);
    TNode<Number>tmp13 = CodeStubAssembler(state_).LoadReference<Number>(CodeStubAssembler::Reference{tmp11, tmp12});
    ca_.Goto(&block1, tmp7, tmp8, tmp13);
  }

  if (block5.is_used()) {
    TNode<Context> tmp14;
    TNode<Object> tmp15;
    TNode<Object> tmp16;
    ca_.Bind(&block5, &tmp14, &tmp15, &tmp16);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3405);
    TNode<JSArgumentsObjectWithLength> tmp17;
    USE(tmp17);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp17 = Cast27JSArgumentsObjectWithLength_1465(state_, TNode<Context>{tmp14}, TNode<Object>{ca_.UncheckedCast<Object>(tmp16)}, &label0);
    ca_.Goto(&block10, tmp14, tmp15, tmp16, ca_.UncheckedCast<Object>(tmp16), tmp17);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block11, tmp14, tmp15, tmp16, ca_.UncheckedCast<Object>(tmp16));
    }
  }

  if (block11.is_used()) {
    TNode<Context> tmp18;
    TNode<Object> tmp19;
    TNode<Object> tmp20;
    TNode<Object> tmp21;
    ca_.Bind(&block11, &tmp18, &tmp19, &tmp20, &tmp21);
    ca_.Goto(&block9, tmp18, tmp19, tmp20);
  }

  if (block10.is_used()) {
    TNode<Context> tmp22;
    TNode<Object> tmp23;
    TNode<Object> tmp24;
    TNode<Object> tmp25;
    TNode<JSArgumentsObjectWithLength> tmp26;
    ca_.Bind(&block10, &tmp22, &tmp23, &tmp24, &tmp25, &tmp26);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3406);
    TNode<IntPtrT> tmp27 = ca_.IntPtrConstant(JSArgumentsObjectWithLength::kLengthOffset);
    USE(tmp27);
    TNode<Object>tmp28 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp26, tmp27});
    ca_.Goto(&block3, tmp22, tmp23, tmp28);
  }

  if (block9.is_used()) {
    TNode<Context> tmp29;
    TNode<Object> tmp30;
    TNode<Object> tmp31;
    ca_.Bind(&block9, &tmp29, &tmp30, &tmp31);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3408);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3409);
    TNode<String> tmp32;
    USE(tmp32);
    tmp32 = kLengthString_68(state_);
    TNode<Object> tmp33;
    USE(tmp33);
    tmp33 = CodeStubAssembler(state_).GetProperty(TNode<Context>{tmp29}, TNode<Object>{tmp30}, TNode<Object>{tmp32});
    ca_.Goto(&block3, tmp29, tmp30, tmp33);
  }

  if (block3.is_used()) {
    TNode<Context> tmp34;
    TNode<Object> tmp35;
    TNode<Object> tmp36;
    ca_.Bind(&block3, &tmp34, &tmp35, &tmp36);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3414);
    TNode<Number> tmp37;
    USE(tmp37);
    tmp37 = CodeStubAssembler(state_).ToLength_Inline(TNode<Context>{tmp34}, TNode<Object>{tmp36});
    ca_.Goto(&block1, tmp34, tmp35, tmp37);
  }

  if (block1.is_used()) {
    TNode<Context> tmp38;
    TNode<Object> tmp39;
    TNode<Number> tmp40;
    ca_.Bind(&block1, &tmp38, &tmp39, &tmp40);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3398);
    ca_.Goto(&block12, tmp38, tmp39, tmp40);
  }

    TNode<Context> tmp41;
    TNode<Object> tmp42;
    TNode<Number> tmp43;
    ca_.Bind(&block12, &tmp41, &tmp42, &tmp43);
  return TNode<Number>{tmp43};
}

TNode<JSReceiver> GetMethod_247(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<Object> p_o, const char* p_name, compiler::CodeAssemblerLabel* label_IfNullOrUndefined) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Context, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, Object, BoolT> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, Object, BoolT> block6(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, Object, BoolT, BoolT> block7(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, Object> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, Object> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, Object, Object> block11(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, Object, Object, JSReceiver> block10(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, Object> block9(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, Object, JSReceiver> block8(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, JSReceiver> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, JSReceiver> block12(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_context, p_o);

  if (block0.is_used()) {
    TNode<Context> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3420);
    TNode<Object> tmp2;
    USE(tmp2);
    tmp2 = FromConstexpr90UT8ATBigInt7ATFalse6ATNull5ATSmi6ATTrue11ATUndefined10HeapNumber10JSReceiver6String6Symbol18ATconstexpr_string_171(state_, p_name);
    TNode<Object> tmp3;
    USE(tmp3);
    tmp3 = CodeStubAssembler(state_).GetProperty(TNode<Context>{tmp0}, TNode<Object>{tmp1}, TNode<Object>{tmp2});
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3421);
    TNode<Oddball> tmp4;
    USE(tmp4);
    tmp4 = Undefined_64(state_);
    TNode<BoolT> tmp5;
    USE(tmp5);
    tmp5 = CodeStubAssembler(state_).TaggedEqual(TNode<Object>{tmp3}, TNode<HeapObject>{tmp4});
    ca_.Branch(tmp5, &block5, &block6, tmp0, tmp1, tmp3, tmp5);
  }

  if (block5.is_used()) {
    TNode<Context> tmp6;
    TNode<Object> tmp7;
    TNode<Object> tmp8;
    TNode<BoolT> tmp9;
    ca_.Bind(&block5, &tmp6, &tmp7, &tmp8, &tmp9);
    TNode<BoolT> tmp10;
    USE(tmp10);
    tmp10 = FromConstexpr6ATbool16ATconstexpr_bool_167(state_, true);
    ca_.Goto(&block7, tmp6, tmp7, tmp8, tmp9, tmp10);
  }

  if (block6.is_used()) {
    TNode<Context> tmp11;
    TNode<Object> tmp12;
    TNode<Object> tmp13;
    TNode<BoolT> tmp14;
    ca_.Bind(&block6, &tmp11, &tmp12, &tmp13, &tmp14);
    TNode<Oddball> tmp15;
    USE(tmp15);
    tmp15 = Null_63(state_);
    TNode<BoolT> tmp16;
    USE(tmp16);
    tmp16 = CodeStubAssembler(state_).TaggedEqual(TNode<Object>{tmp13}, TNode<HeapObject>{tmp15});
    ca_.Goto(&block7, tmp11, tmp12, tmp13, tmp14, tmp16);
  }

  if (block7.is_used()) {
    TNode<Context> tmp17;
    TNode<Object> tmp18;
    TNode<Object> tmp19;
    TNode<BoolT> tmp20;
    TNode<BoolT> tmp21;
    ca_.Bind(&block7, &tmp17, &tmp18, &tmp19, &tmp20, &tmp21);
    ca_.Branch(tmp21, &block3, &block4, tmp17, tmp18, tmp19);
  }

  if (block3.is_used()) {
    TNode<Context> tmp22;
    TNode<Object> tmp23;
    TNode<Object> tmp24;
    ca_.Bind(&block3, &tmp22, &tmp23, &tmp24);
    ca_.Goto(&block1);
  }

  if (block4.is_used()) {
    TNode<Context> tmp25;
    TNode<Object> tmp26;
    TNode<Object> tmp27;
    ca_.Bind(&block4, &tmp25, &tmp26, &tmp27);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3422);
    TNode<JSReceiver> tmp28;
    USE(tmp28);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp28 = Cast71UT19ATCallableApiObject17ATCallableJSProxy15JSBoundFunction10JSFunction_1434(state_, TNode<Context>{tmp25}, TNode<Object>{tmp27}, &label0);
    ca_.Goto(&block10, tmp25, tmp26, tmp27, tmp27, tmp28);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block11, tmp25, tmp26, tmp27, tmp27);
    }
  }

  if (block11.is_used()) {
    TNode<Context> tmp29;
    TNode<Object> tmp30;
    TNode<Object> tmp31;
    TNode<Object> tmp32;
    ca_.Bind(&block11, &tmp29, &tmp30, &tmp31, &tmp32);
    ca_.Goto(&block9, tmp29, tmp30, tmp31);
  }

  if (block10.is_used()) {
    TNode<Context> tmp33;
    TNode<Object> tmp34;
    TNode<Object> tmp35;
    TNode<Object> tmp36;
    TNode<JSReceiver> tmp37;
    ca_.Bind(&block10, &tmp33, &tmp34, &tmp35, &tmp36, &tmp37);
    ca_.Goto(&block8, tmp33, tmp34, tmp35, tmp37);
  }

  if (block9.is_used()) {
    TNode<Context> tmp38;
    TNode<Object> tmp39;
    TNode<Object> tmp40;
    ca_.Bind(&block9, &tmp38, &tmp39, &tmp40);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3423);
    TNode<Object> tmp41;
    USE(tmp41);
    tmp41 = FromConstexpr20UT5ATSmi10HeapObject18ATconstexpr_string_170(state_, p_name);
    CodeStubAssembler(state_).ThrowTypeError(TNode<Context>{tmp38}, MessageTemplate::kPropertyNotFunction, TNode<Object>{tmp40}, TNode<Object>{tmp41}, TNode<Object>{tmp39});
  }

  if (block8.is_used()) {
    TNode<Context> tmp42;
    TNode<Object> tmp43;
    TNode<Object> tmp44;
    TNode<JSReceiver> tmp45;
    ca_.Bind(&block8, &tmp42, &tmp43, &tmp44, &tmp45);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3422);
    ca_.Goto(&block2, tmp42, tmp43, tmp45);
  }

  if (block2.is_used()) {
    TNode<Context> tmp46;
    TNode<Object> tmp47;
    TNode<JSReceiver> tmp48;
    ca_.Bind(&block2, &tmp46, &tmp47, &tmp48);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3418);
    ca_.Goto(&block12, tmp46, tmp47, tmp48);
  }

  if (block1.is_used()) {
    ca_.Bind(&block1);
    ca_.Goto(label_IfNullOrUndefined);
  }

    TNode<Context> tmp49;
    TNode<Object> tmp50;
    TNode<JSReceiver> tmp51;
    ca_.Bind(&block12, &tmp49, &tmp50, &tmp51);
  return TNode<JSReceiver>{tmp51};
}

TNode<BoolT> IsFastJSArray_248(compiler::CodeAssemblerState* state_, TNode<Object> p_o, TNode<Context> p_context) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Object, Context> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Context> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Context> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Context, BoolT> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Context, BoolT> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_context);

  if (block0.is_used()) {
    TNode<Object> tmp0;
    TNode<Context> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3447);
    TNode<BoolT> tmp2;
    USE(tmp2);
    tmp2 = IsForceSlowPath_241(state_);
    ca_.Branch(tmp2, &block2, &block3, tmp0, tmp1);
  }

  if (block2.is_used()) {
    TNode<Object> tmp3;
    TNode<Context> tmp4;
    ca_.Bind(&block2, &tmp3, &tmp4);
    TNode<BoolT> tmp5;
    USE(tmp5);
    tmp5 = FromConstexpr6ATbool16ATconstexpr_bool_167(state_, false);
    ca_.Goto(&block1, tmp3, tmp4, tmp5);
  }

  if (block3.is_used()) {
    TNode<Object> tmp6;
    TNode<Context> tmp7;
    ca_.Bind(&block3, &tmp6, &tmp7);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3448);
    TNode<BoolT> tmp8;
    USE(tmp8);
    tmp8 = Is13ATFastJSArray20UT5ATSmi10HeapObject_1479(state_, TNode<Context>{tmp7}, TNode<Object>{tmp6});
    ca_.Goto(&block1, tmp6, tmp7, tmp8);
  }

  if (block1.is_used()) {
    TNode<Object> tmp9;
    TNode<Context> tmp10;
    TNode<BoolT> tmp11;
    ca_.Bind(&block1, &tmp9, &tmp10, &tmp11);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3443);
    ca_.Goto(&block4, tmp9, tmp10, tmp11);
  }

    TNode<Object> tmp12;
    TNode<Context> tmp13;
    TNode<BoolT> tmp14;
    ca_.Bind(&block4, &tmp12, &tmp13, &tmp14);
  return TNode<BoolT>{tmp14};
}

void BranchIfFastJSArray_249(compiler::CodeAssemblerState* state_, TNode<Object> p_o, TNode<Context> p_context, compiler::CodeAssemblerLabel* label_True, compiler::CodeAssemblerLabel* label_False) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Object, Context> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Context> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Context> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_context);

  if (block0.is_used()) {
    TNode<Object> tmp0;
    TNode<Context> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3454);
    TNode<BoolT> tmp2;
    USE(tmp2);
    tmp2 = IsFastJSArray_248(state_, TNode<Object>{tmp0}, TNode<Context>{tmp1});
    ca_.Branch(tmp2, &block3, &block4, tmp0, tmp1);
  }

  if (block3.is_used()) {
    TNode<Object> tmp3;
    TNode<Context> tmp4;
    ca_.Bind(&block3, &tmp3, &tmp4);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3455);
    ca_.Goto(&block1);
  }

  if (block4.is_used()) {
    TNode<Object> tmp5;
    TNode<Context> tmp6;
    ca_.Bind(&block4, &tmp5, &tmp6);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3457);
    ca_.Goto(&block2);
  }

  if (block1.is_used()) {
    ca_.Bind(&block1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3451);
    ca_.Goto(label_True);
  }

  if (block2.is_used()) {
    ca_.Bind(&block2);
    ca_.Goto(label_False);
  }
}

void BranchIfFastJSArrayForRead_250(compiler::CodeAssemblerState* state_, TNode<Object> p_o, TNode<Context> p_context, compiler::CodeAssemblerLabel* label_True, compiler::CodeAssemblerLabel* label_False) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Object, Context> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Context> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Context> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Context> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Context> block6(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_context);

  if (block0.is_used()) {
    TNode<Object> tmp0;
    TNode<Context> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3466);
    TNode<BoolT> tmp2;
    USE(tmp2);
    tmp2 = IsForceSlowPath_241(state_);
    ca_.Branch(tmp2, &block3, &block4, tmp0, tmp1);
  }

  if (block3.is_used()) {
    TNode<Object> tmp3;
    TNode<Context> tmp4;
    ca_.Bind(&block3, &tmp3, &tmp4);
    ca_.Goto(&block2);
  }

  if (block4.is_used()) {
    TNode<Object> tmp5;
    TNode<Context> tmp6;
    ca_.Bind(&block4, &tmp5, &tmp6);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3467);
    TNode<BoolT> tmp7;
    USE(tmp7);
    tmp7 = Is20ATFastJSArrayForRead20UT5ATSmi10HeapObject_1480(state_, TNode<Context>{tmp6}, TNode<Object>{tmp5});
    ca_.Branch(tmp7, &block5, &block6, tmp5, tmp6);
  }

  if (block5.is_used()) {
    TNode<Object> tmp8;
    TNode<Context> tmp9;
    ca_.Bind(&block5, &tmp8, &tmp9);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3468);
    ca_.Goto(&block1);
  }

  if (block6.is_used()) {
    TNode<Object> tmp10;
    TNode<Context> tmp11;
    ca_.Bind(&block6, &tmp10, &tmp11);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3470);
    ca_.Goto(&block2);
  }

  if (block1.is_used()) {
    ca_.Bind(&block1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3461);
    ca_.Goto(label_True);
  }

  if (block2.is_used()) {
    ca_.Bind(&block2);
    ca_.Goto(label_False);
  }
}

TNode<BoolT> IsFastJSArrayWithNoCustomIteration_251(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<Object> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Context, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, BoolT> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, BoolT> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_context, p_o);

  if (block0.is_used()) {
    TNode<Context> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3476);
    TNode<BoolT> tmp2;
    USE(tmp2);
    tmp2 = Is34ATFastJSArrayWithNoCustomIteration20UT5ATSmi10HeapObject_1481(state_, TNode<Context>{tmp0}, TNode<Object>{tmp1});
    ca_.Goto(&block1, tmp0, tmp1, tmp2);
  }

  if (block1.is_used()) {
    TNode<Context> tmp3;
    TNode<Object> tmp4;
    TNode<BoolT> tmp5;
    ca_.Bind(&block1, &tmp3, &tmp4, &tmp5);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3474);
    ca_.Goto(&block2, tmp3, tmp4, tmp5);
  }

    TNode<Context> tmp6;
    TNode<Object> tmp7;
    TNode<BoolT> tmp8;
    ca_.Bind(&block2, &tmp6, &tmp7, &tmp8);
  return TNode<BoolT>{tmp8};
}

TNode<BoolT> IsFastJSArrayForReadWithNoCustomIteration_252(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<Object> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Context, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, BoolT> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, BoolT> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_context, p_o);

  if (block0.is_used()) {
    TNode<Context> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3482);
    TNode<BoolT> tmp2;
    USE(tmp2);
    tmp2 = Is41ATFastJSArrayForReadWithNoCustomIteration20UT5ATSmi10HeapObject_1482(state_, TNode<Context>{tmp0}, TNode<Object>{tmp1});
    ca_.Goto(&block1, tmp0, tmp1, tmp2);
  }

  if (block1.is_used()) {
    TNode<Context> tmp3;
    TNode<Object> tmp4;
    TNode<BoolT> tmp5;
    ca_.Bind(&block1, &tmp3, &tmp4, &tmp5);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3479);
    ca_.Goto(&block2, tmp3, tmp4, tmp5);
  }

    TNode<Context> tmp6;
    TNode<Object> tmp7;
    TNode<BoolT> tmp8;
    ca_.Bind(&block2, &tmp6, &tmp7, &tmp8);
  return TNode<BoolT>{tmp8};
}

TF_BUILTIN(FastCreateDataProperty, CodeStubAssembler) {
  compiler::CodeAssemblerState* state_ = state();  compiler::CodeAssembler ca_(state());
  TNode<Context> parameter0 = UncheckedCast<Context>(Parameter(Descriptor::kContext));
  USE(parameter0);
  TNode<JSReceiver> parameter1 = UncheckedCast<JSReceiver>(Parameter(Descriptor::kReceiver));
  USE(parameter1);
  TNode<Object> parameter2 = UncheckedCast<Object>(Parameter(Descriptor::kKey));
  USE(parameter2);
  TNode<Object> parameter3 = UncheckedCast<Object>(Parameter(Descriptor::kValue));
  USE(parameter3);
  compiler::CodeAssemblerParameterizedLabel<Context, JSReceiver, Object, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSReceiver, Object, Object, JSReceiver> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSReceiver, Object, Object, JSReceiver, JSArray> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSReceiver, Object, Object, JSArray, Object> block8(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSReceiver, Object, Object, JSArray, Object, Smi> block7(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSReceiver, Object, Object, JSArray> block6(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSReceiver, Object, Object, JSArray, Smi> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSReceiver, Object, Object, JSArray, Smi, BoolT> block11(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSReceiver, Object, Object, JSArray, Smi, BoolT> block12(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSReceiver, Object, Object, JSArray, Smi, BoolT, BoolT> block13(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSReceiver, Object, Object, JSArray, Smi> block9(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSReceiver, Object, Object, JSArray, Smi> block10(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSReceiver, Object, Object, JSArray, Smi, BoolT, Int32T> block14(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSReceiver, Object, Object, JSArray, Smi, BoolT, Int32T, Object> block18(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSReceiver, Object, Object, JSArray, Smi, BoolT, Int32T, Object, Smi> block17(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSReceiver, Object, Object, JSArray, Smi, BoolT, Int32T, Smi> block19(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSReceiver, Object, Object, JSArray, Smi, BoolT, Int32T, Smi, JSArray, Object> block23(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSReceiver, Object, Object, JSArray, Smi, BoolT, Int32T, Smi, JSArray, Object> block22(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSReceiver, Object, Object, JSArray, Smi, BoolT, Int32T, Smi> block20(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSReceiver, Object, Object, JSArray, Smi, BoolT, Int32T, Smi, FixedArrayBase> block27(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSReceiver, Object, Object, JSArray, Smi, BoolT, Int32T, Smi, FixedArrayBase, FixedArray> block26(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSReceiver, Object, Object, JSArray, Smi, BoolT, Int32T, Smi> block25(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSReceiver, Object, Object, JSArray, Smi, BoolT, Int32T, Smi, FixedArray> block24(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSReceiver, Object, Object, JSArray, Smi, BoolT, Int32T, Smi> block21(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSReceiver, Object, Object, JSArray, Smi, BoolT, Int32T> block15(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSReceiver, Object, Object, JSArray, Smi, BoolT, Int32T> block28(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSReceiver, Object, Object, JSArray, Smi, BoolT, Int32T, Object> block32(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSReceiver, Object, Object, JSArray, Smi, BoolT, Int32T, Object, Number> block31(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSReceiver, Object, Object, JSArray, Smi, BoolT, Int32T, Number> block33(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSReceiver, Object, Object, JSArray, Smi, BoolT, Int32T, Number, JSArray, Object> block37(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSReceiver, Object, Object, JSArray, Smi, BoolT, Int32T, Number, JSArray, Object> block36(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSReceiver, Object, Object, JSArray, Smi, BoolT, Int32T, Number> block34(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSReceiver, Object, Object, JSArray, Smi, BoolT, Int32T, Number, FixedArrayBase> block41(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSReceiver, Object, Object, JSArray, Smi, BoolT, Int32T, Number, FixedArrayBase, FixedDoubleArray> block40(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSReceiver, Object, Object, JSArray, Smi, BoolT, Int32T, Number> block39(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSReceiver, Object, Object, JSArray, Smi, BoolT, Int32T, Number, FixedDoubleArray> block38(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSReceiver, Object, Object, JSArray, Smi, BoolT, Int32T, Number> block35(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSReceiver, Object, Object, JSArray, Smi, BoolT, Int32T> block29(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSReceiver, Object, Object, JSArray, Smi, BoolT, Int32T> block42(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSReceiver, Object, Object, JSArray, Smi, BoolT, Int32T, JSArray, Object> block46(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSReceiver, Object, Object, JSArray, Smi, BoolT, Int32T, JSArray, Object> block45(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSReceiver, Object, Object, JSArray, Smi, BoolT, Int32T> block43(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSReceiver, Object, Object, JSArray, Smi, BoolT, Int32T, FixedArrayBase> block50(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSReceiver, Object, Object, JSArray, Smi, BoolT, Int32T, FixedArrayBase, FixedArray> block49(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSReceiver, Object, Object, JSArray, Smi, BoolT, Int32T> block48(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSReceiver, Object, Object, JSArray, Smi, BoolT, Int32T, FixedArray> block47(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSReceiver, Object, Object, JSArray, Smi, BoolT, Int32T> block44(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSReceiver, Object, Object, JSArray, Smi, BoolT, Int32T> block30(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSReceiver, Object, Object, JSArray, Smi, BoolT, Int32T> block16(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSReceiver, Object, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, JSReceiver, Object, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, parameter0, parameter1, parameter2, parameter3);

  if (block0.is_used()) {
    TNode<Context> tmp0;
    TNode<JSReceiver> tmp1;
    TNode<Object> tmp2;
    TNode<Object> tmp3;
    ca_.Bind(&block0, &tmp0, &tmp1, &tmp2, &tmp3);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3496);
    TNode<JSArray> tmp4;
    USE(tmp4);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp4 = Cast13ATFastJSArray_137(state_, TNode<Context>{tmp0}, TNode<HeapObject>{tmp1}, &label0);
    ca_.Goto(&block3, tmp0, tmp1, tmp2, tmp3, tmp1, tmp4);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block4, tmp0, tmp1, tmp2, tmp3, tmp1);
    }
  }

  if (block4.is_used()) {
    TNode<Context> tmp5;
    TNode<JSReceiver> tmp6;
    TNode<Object> tmp7;
    TNode<Object> tmp8;
    TNode<JSReceiver> tmp9;
    ca_.Bind(&block4, &tmp5, &tmp6, &tmp7, &tmp8, &tmp9);
    ca_.Goto(&block2, tmp5, tmp6, tmp7, tmp8);
  }

  if (block3.is_used()) {
    TNode<Context> tmp10;
    TNode<JSReceiver> tmp11;
    TNode<Object> tmp12;
    TNode<Object> tmp13;
    TNode<JSReceiver> tmp14;
    TNode<JSArray> tmp15;
    ca_.Bind(&block3, &tmp10, &tmp11, &tmp12, &tmp13, &tmp14, &tmp15);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3497);
    TNode<Smi> tmp16;
    USE(tmp16);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp16 = Cast5ATSmi_83(state_, TNode<Object>{tmp12}, &label0);
    ca_.Goto(&block7, tmp10, tmp11, tmp12, tmp13, tmp15, tmp12, tmp16);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block8, tmp10, tmp11, tmp12, tmp13, tmp15, tmp12);
    }
  }

  if (block8.is_used()) {
    TNode<Context> tmp17;
    TNode<JSReceiver> tmp18;
    TNode<Object> tmp19;
    TNode<Object> tmp20;
    TNode<JSArray> tmp21;
    TNode<Object> tmp22;
    ca_.Bind(&block8, &tmp17, &tmp18, &tmp19, &tmp20, &tmp21, &tmp22);
    ca_.Goto(&block6, tmp17, tmp18, tmp19, tmp20, tmp21);
  }

  if (block7.is_used()) {
    TNode<Context> tmp23;
    TNode<JSReceiver> tmp24;
    TNode<Object> tmp25;
    TNode<Object> tmp26;
    TNode<JSArray> tmp27;
    TNode<Object> tmp28;
    TNode<Smi> tmp29;
    ca_.Bind(&block7, &tmp23, &tmp24, &tmp25, &tmp26, &tmp27, &tmp28, &tmp29);
    ca_.Goto(&block5, tmp23, tmp24, tmp25, tmp26, tmp27, tmp29);
  }

  if (block6.is_used()) {
    TNode<Context> tmp30;
    TNode<JSReceiver> tmp31;
    TNode<Object> tmp32;
    TNode<Object> tmp33;
    TNode<JSArray> tmp34;
    ca_.Bind(&block6, &tmp30, &tmp31, &tmp32, &tmp33, &tmp34);
    ca_.Goto(&block2, tmp30, tmp31, tmp32, tmp33);
  }

  if (block5.is_used()) {
    TNode<Context> tmp35;
    TNode<JSReceiver> tmp36;
    TNode<Object> tmp37;
    TNode<Object> tmp38;
    TNode<JSArray> tmp39;
    TNode<Smi> tmp40;
    ca_.Bind(&block5, &tmp35, &tmp36, &tmp37, &tmp38, &tmp39, &tmp40);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3498);
    TNode<Smi> tmp41;
    USE(tmp41);
    tmp41 = FromConstexpr5ATSmi17ATconstexpr_int31_154(state_, 0);
    TNode<BoolT> tmp42;
    USE(tmp42);
    tmp42 = CodeStubAssembler(state_).SmiLessThan(TNode<Smi>{tmp40}, TNode<Smi>{tmp41});
    ca_.Branch(tmp42, &block11, &block12, tmp35, tmp36, tmp37, tmp38, tmp39, tmp40, tmp42);
  }

  if (block11.is_used()) {
    TNode<Context> tmp43;
    TNode<JSReceiver> tmp44;
    TNode<Object> tmp45;
    TNode<Object> tmp46;
    TNode<JSArray> tmp47;
    TNode<Smi> tmp48;
    TNode<BoolT> tmp49;
    ca_.Bind(&block11, &tmp43, &tmp44, &tmp45, &tmp46, &tmp47, &tmp48, &tmp49);
    TNode<BoolT> tmp50;
    USE(tmp50);
    tmp50 = FromConstexpr6ATbool16ATconstexpr_bool_167(state_, true);
    ca_.Goto(&block13, tmp43, tmp44, tmp45, tmp46, tmp47, tmp48, tmp49, tmp50);
  }

  if (block12.is_used()) {
    TNode<Context> tmp51;
    TNode<JSReceiver> tmp52;
    TNode<Object> tmp53;
    TNode<Object> tmp54;
    TNode<JSArray> tmp55;
    TNode<Smi> tmp56;
    TNode<BoolT> tmp57;
    ca_.Bind(&block12, &tmp51, &tmp52, &tmp53, &tmp54, &tmp55, &tmp56, &tmp57);
    TNode<Smi> tmp58;
    USE(tmp58);
    tmp58 = CodeStubAssembler(state_).LoadFastJSArrayLength(TNode<JSArray>{tmp55});
    TNode<BoolT> tmp59;
    USE(tmp59);
    tmp59 = CodeStubAssembler(state_).SmiGreaterThan(TNode<Smi>{tmp56}, TNode<Smi>{tmp58});
    ca_.Goto(&block13, tmp51, tmp52, tmp53, tmp54, tmp55, tmp56, tmp57, tmp59);
  }

  if (block13.is_used()) {
    TNode<Context> tmp60;
    TNode<JSReceiver> tmp61;
    TNode<Object> tmp62;
    TNode<Object> tmp63;
    TNode<JSArray> tmp64;
    TNode<Smi> tmp65;
    TNode<BoolT> tmp66;
    TNode<BoolT> tmp67;
    ca_.Bind(&block13, &tmp60, &tmp61, &tmp62, &tmp63, &tmp64, &tmp65, &tmp66, &tmp67);
    ca_.Branch(tmp67, &block9, &block10, tmp60, tmp61, tmp62, tmp63, tmp64, tmp65);
  }

  if (block9.is_used()) {
    TNode<Context> tmp68;
    TNode<JSReceiver> tmp69;
    TNode<Object> tmp70;
    TNode<Object> tmp71;
    TNode<JSArray> tmp72;
    TNode<Smi> tmp73;
    ca_.Bind(&block9, &tmp68, &tmp69, &tmp70, &tmp71, &tmp72, &tmp73);
    ca_.Goto(&block2, tmp68, tmp69, tmp70, tmp71);
  }

  if (block10.is_used()) {
    TNode<Context> tmp74;
    TNode<JSReceiver> tmp75;
    TNode<Object> tmp76;
    TNode<Object> tmp77;
    TNode<JSArray> tmp78;
    TNode<Smi> tmp79;
    ca_.Bind(&block10, &tmp74, &tmp75, &tmp76, &tmp77, &tmp78, &tmp79);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3499);
    EnsureWriteableFastElements_50(state_, TNode<Context>{tmp74}, TNode<JSArray>{tmp78});
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3500);
    TNode<Smi> tmp80;
    USE(tmp80);
    tmp80 = CodeStubAssembler(state_).LoadFastJSArrayLength(TNode<JSArray>{tmp78});
    TNode<BoolT> tmp81;
    USE(tmp81);
    tmp81 = CodeStubAssembler(state_).SmiEqual(TNode<Smi>{tmp79}, TNode<Smi>{tmp80});
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3501);
    TNode<IntPtrT> tmp82 = ca_.IntPtrConstant(HeapObject::kMapOffset);
    USE(tmp82);
    TNode<Map>tmp83 = CodeStubAssembler(state_).LoadReference<Map>(CodeStubAssembler::Reference{tmp78, tmp82});
    TNode<Int32T> tmp84;
    USE(tmp84);
    tmp84 = CodeStubAssembler(state_).LoadMapElementsKind(TNode<Map>{tmp83});
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3504);
    TNode<BoolT> tmp85;
    USE(tmp85);
    tmp85 = CodeStubAssembler(state_).IsFastSmiElementsKind(TNode<Int32T>{tmp84});
    ca_.Branch(tmp85, &block14, &block15, tmp74, tmp75, tmp76, tmp77, tmp78, tmp79, tmp81, tmp84);
  }

  if (block14.is_used()) {
    TNode<Context> tmp86;
    TNode<JSReceiver> tmp87;
    TNode<Object> tmp88;
    TNode<Object> tmp89;
    TNode<JSArray> tmp90;
    TNode<Smi> tmp91;
    TNode<BoolT> tmp92;
    TNode<Int32T> tmp93;
    ca_.Bind(&block14, &tmp86, &tmp87, &tmp88, &tmp89, &tmp90, &tmp91, &tmp92, &tmp93);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3505);
    TNode<Smi> tmp94;
    USE(tmp94);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp94 = Cast5ATSmi_83(state_, TNode<Object>{tmp89}, &label0);
    ca_.Goto(&block17, tmp86, tmp87, tmp88, tmp89, tmp90, tmp91, tmp92, tmp93, tmp89, tmp94);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block18, tmp86, tmp87, tmp88, tmp89, tmp90, tmp91, tmp92, tmp93, tmp89);
    }
  }

  if (block18.is_used()) {
    TNode<Context> tmp95;
    TNode<JSReceiver> tmp96;
    TNode<Object> tmp97;
    TNode<Object> tmp98;
    TNode<JSArray> tmp99;
    TNode<Smi> tmp100;
    TNode<BoolT> tmp101;
    TNode<Int32T> tmp102;
    TNode<Object> tmp103;
    ca_.Bind(&block18, &tmp95, &tmp96, &tmp97, &tmp98, &tmp99, &tmp100, &tmp101, &tmp102, &tmp103);
    ca_.Goto(&block2, tmp95, tmp96, tmp97, tmp98);
  }

  if (block17.is_used()) {
    TNode<Context> tmp104;
    TNode<JSReceiver> tmp105;
    TNode<Object> tmp106;
    TNode<Object> tmp107;
    TNode<JSArray> tmp108;
    TNode<Smi> tmp109;
    TNode<BoolT> tmp110;
    TNode<Int32T> tmp111;
    TNode<Object> tmp112;
    TNode<Smi> tmp113;
    ca_.Bind(&block17, &tmp104, &tmp105, &tmp106, &tmp107, &tmp108, &tmp109, &tmp110, &tmp111, &tmp112, &tmp113);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3506);
    ca_.Branch(tmp110, &block19, &block20, tmp104, tmp105, tmp106, tmp107, tmp108, tmp109, tmp110, tmp111, tmp113);
  }

  if (block19.is_used()) {
    TNode<Context> tmp114;
    TNode<JSReceiver> tmp115;
    TNode<Object> tmp116;
    TNode<Object> tmp117;
    TNode<JSArray> tmp118;
    TNode<Smi> tmp119;
    TNode<BoolT> tmp120;
    TNode<Int32T> tmp121;
    TNode<Smi> tmp122;
    ca_.Bind(&block19, &tmp114, &tmp115, &tmp116, &tmp117, &tmp118, &tmp119, &tmp120, &tmp121, &tmp122);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3507);
    compiler::CodeAssemblerLabel label0(&ca_);
    CodeStubAssembler(state_).BuildAppendJSArray(HOLEY_SMI_ELEMENTS, TNode<JSArray>{tmp118}, TNode<Object>{tmp117}, &label0);
    ca_.Goto(&block22, tmp114, tmp115, tmp116, tmp117, tmp118, tmp119, tmp120, tmp121, tmp122, tmp118, tmp117);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block23, tmp114, tmp115, tmp116, tmp117, tmp118, tmp119, tmp120, tmp121, tmp122, tmp118, tmp117);
    }
  }

  if (block23.is_used()) {
    TNode<Context> tmp123;
    TNode<JSReceiver> tmp124;
    TNode<Object> tmp125;
    TNode<Object> tmp126;
    TNode<JSArray> tmp127;
    TNode<Smi> tmp128;
    TNode<BoolT> tmp129;
    TNode<Int32T> tmp130;
    TNode<Smi> tmp131;
    TNode<JSArray> tmp132;
    TNode<Object> tmp133;
    ca_.Bind(&block23, &tmp123, &tmp124, &tmp125, &tmp126, &tmp127, &tmp128, &tmp129, &tmp130, &tmp131, &tmp132, &tmp133);
    ca_.Goto(&block2, tmp123, tmp124, tmp125, tmp126);
  }

  if (block22.is_used()) {
    TNode<Context> tmp134;
    TNode<JSReceiver> tmp135;
    TNode<Object> tmp136;
    TNode<Object> tmp137;
    TNode<JSArray> tmp138;
    TNode<Smi> tmp139;
    TNode<BoolT> tmp140;
    TNode<Int32T> tmp141;
    TNode<Smi> tmp142;
    TNode<JSArray> tmp143;
    TNode<Object> tmp144;
    ca_.Bind(&block22, &tmp134, &tmp135, &tmp136, &tmp137, &tmp138, &tmp139, &tmp140, &tmp141, &tmp142, &tmp143, &tmp144);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3506);
    ca_.Goto(&block21, tmp134, tmp135, tmp136, tmp137, tmp138, tmp139, tmp140, tmp141, tmp142);
  }

  if (block20.is_used()) {
    TNode<Context> tmp145;
    TNode<JSReceiver> tmp146;
    TNode<Object> tmp147;
    TNode<Object> tmp148;
    TNode<JSArray> tmp149;
    TNode<Smi> tmp150;
    TNode<BoolT> tmp151;
    TNode<Int32T> tmp152;
    TNode<Smi> tmp153;
    ca_.Bind(&block20, &tmp145, &tmp146, &tmp147, &tmp148, &tmp149, &tmp150, &tmp151, &tmp152, &tmp153);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3509);
    TNode<IntPtrT> tmp154 = ca_.IntPtrConstant(JSObject::kElementsOffset);
    USE(tmp154);
    TNode<FixedArrayBase>tmp155 = CodeStubAssembler(state_).LoadReference<FixedArrayBase>(CodeStubAssembler::Reference{tmp149, tmp154});
    TNode<FixedArray> tmp156;
    USE(tmp156);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp156 = Cast10FixedArray_103(state_, TNode<HeapObject>{tmp155}, &label0);
    ca_.Goto(&block26, tmp145, tmp146, tmp147, tmp148, tmp149, tmp150, tmp151, tmp152, tmp153, tmp155, tmp156);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block27, tmp145, tmp146, tmp147, tmp148, tmp149, tmp150, tmp151, tmp152, tmp153, tmp155);
    }
  }

  if (block27.is_used()) {
    TNode<Context> tmp157;
    TNode<JSReceiver> tmp158;
    TNode<Object> tmp159;
    TNode<Object> tmp160;
    TNode<JSArray> tmp161;
    TNode<Smi> tmp162;
    TNode<BoolT> tmp163;
    TNode<Int32T> tmp164;
    TNode<Smi> tmp165;
    TNode<FixedArrayBase> tmp166;
    ca_.Bind(&block27, &tmp157, &tmp158, &tmp159, &tmp160, &tmp161, &tmp162, &tmp163, &tmp164, &tmp165, &tmp166);
    ca_.Goto(&block25, tmp157, tmp158, tmp159, tmp160, tmp161, tmp162, tmp163, tmp164, tmp165);
  }

  if (block26.is_used()) {
    TNode<Context> tmp167;
    TNode<JSReceiver> tmp168;
    TNode<Object> tmp169;
    TNode<Object> tmp170;
    TNode<JSArray> tmp171;
    TNode<Smi> tmp172;
    TNode<BoolT> tmp173;
    TNode<Int32T> tmp174;
    TNode<Smi> tmp175;
    TNode<FixedArrayBase> tmp176;
    TNode<FixedArray> tmp177;
    ca_.Bind(&block26, &tmp167, &tmp168, &tmp169, &tmp170, &tmp171, &tmp172, &tmp173, &tmp174, &tmp175, &tmp176, &tmp177);
    ca_.Goto(&block24, tmp167, tmp168, tmp169, tmp170, tmp171, tmp172, tmp173, tmp174, tmp175, tmp177);
  }

  if (block25.is_used()) {
    TNode<Context> tmp178;
    TNode<JSReceiver> tmp179;
    TNode<Object> tmp180;
    TNode<Object> tmp181;
    TNode<JSArray> tmp182;
    TNode<Smi> tmp183;
    TNode<BoolT> tmp184;
    TNode<Int32T> tmp185;
    TNode<Smi> tmp186;
    ca_.Bind(&block25, &tmp178, &tmp179, &tmp180, &tmp181, &tmp182, &tmp183, &tmp184, &tmp185, &tmp186);
    CodeStubAssembler(state_).Unreachable();
  }

  if (block24.is_used()) {
    TNode<Context> tmp187;
    TNode<JSReceiver> tmp188;
    TNode<Object> tmp189;
    TNode<Object> tmp190;
    TNode<JSArray> tmp191;
    TNode<Smi> tmp192;
    TNode<BoolT> tmp193;
    TNode<Int32T> tmp194;
    TNode<Smi> tmp195;
    TNode<FixedArray> tmp196;
    ca_.Bind(&block24, &tmp187, &tmp188, &tmp189, &tmp190, &tmp191, &tmp192, &tmp193, &tmp194, &tmp195, &tmp196);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3510);
    StoreFixedArrayDirect_217(state_, TNode<FixedArray>{tmp196}, TNode<Smi>{tmp192}, TNode<Object>{tmp195});
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3508);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3506);
    ca_.Goto(&block21, tmp187, tmp188, tmp189, tmp190, tmp191, tmp192, tmp193, tmp194, tmp195);
  }

  if (block21.is_used()) {
    TNode<Context> tmp197;
    TNode<JSReceiver> tmp198;
    TNode<Object> tmp199;
    TNode<Object> tmp200;
    TNode<JSArray> tmp201;
    TNode<Smi> tmp202;
    TNode<BoolT> tmp203;
    TNode<Int32T> tmp204;
    TNode<Smi> tmp205;
    ca_.Bind(&block21, &tmp197, &tmp198, &tmp199, &tmp200, &tmp201, &tmp202, &tmp203, &tmp204, &tmp205);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3504);
    ca_.Goto(&block16, tmp197, tmp198, tmp199, tmp200, tmp201, tmp202, tmp203, tmp204);
  }

  if (block15.is_used()) {
    TNode<Context> tmp206;
    TNode<JSReceiver> tmp207;
    TNode<Object> tmp208;
    TNode<Object> tmp209;
    TNode<JSArray> tmp210;
    TNode<Smi> tmp211;
    TNode<BoolT> tmp212;
    TNode<Int32T> tmp213;
    ca_.Bind(&block15, &tmp206, &tmp207, &tmp208, &tmp209, &tmp210, &tmp211, &tmp212, &tmp213);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3512);
    TNode<BoolT> tmp214;
    USE(tmp214);
    tmp214 = CodeStubAssembler(state_).IsDoubleElementsKind(TNode<Int32T>{tmp213});
    ca_.Branch(tmp214, &block28, &block29, tmp206, tmp207, tmp208, tmp209, tmp210, tmp211, tmp212, tmp213);
  }

  if (block28.is_used()) {
    TNode<Context> tmp215;
    TNode<JSReceiver> tmp216;
    TNode<Object> tmp217;
    TNode<Object> tmp218;
    TNode<JSArray> tmp219;
    TNode<Smi> tmp220;
    TNode<BoolT> tmp221;
    TNode<Int32T> tmp222;
    ca_.Bind(&block28, &tmp215, &tmp216, &tmp217, &tmp218, &tmp219, &tmp220, &tmp221, &tmp222);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3513);
    TNode<Number> tmp223;
    USE(tmp223);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp223 = Cast20UT5ATSmi10HeapNumber_85(state_, TNode<Object>{tmp218}, &label0);
    ca_.Goto(&block31, tmp215, tmp216, tmp217, tmp218, tmp219, tmp220, tmp221, tmp222, tmp218, tmp223);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block32, tmp215, tmp216, tmp217, tmp218, tmp219, tmp220, tmp221, tmp222, tmp218);
    }
  }

  if (block32.is_used()) {
    TNode<Context> tmp224;
    TNode<JSReceiver> tmp225;
    TNode<Object> tmp226;
    TNode<Object> tmp227;
    TNode<JSArray> tmp228;
    TNode<Smi> tmp229;
    TNode<BoolT> tmp230;
    TNode<Int32T> tmp231;
    TNode<Object> tmp232;
    ca_.Bind(&block32, &tmp224, &tmp225, &tmp226, &tmp227, &tmp228, &tmp229, &tmp230, &tmp231, &tmp232);
    ca_.Goto(&block2, tmp224, tmp225, tmp226, tmp227);
  }

  if (block31.is_used()) {
    TNode<Context> tmp233;
    TNode<JSReceiver> tmp234;
    TNode<Object> tmp235;
    TNode<Object> tmp236;
    TNode<JSArray> tmp237;
    TNode<Smi> tmp238;
    TNode<BoolT> tmp239;
    TNode<Int32T> tmp240;
    TNode<Object> tmp241;
    TNode<Number> tmp242;
    ca_.Bind(&block31, &tmp233, &tmp234, &tmp235, &tmp236, &tmp237, &tmp238, &tmp239, &tmp240, &tmp241, &tmp242);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3514);
    ca_.Branch(tmp239, &block33, &block34, tmp233, tmp234, tmp235, tmp236, tmp237, tmp238, tmp239, tmp240, tmp242);
  }

  if (block33.is_used()) {
    TNode<Context> tmp243;
    TNode<JSReceiver> tmp244;
    TNode<Object> tmp245;
    TNode<Object> tmp246;
    TNode<JSArray> tmp247;
    TNode<Smi> tmp248;
    TNode<BoolT> tmp249;
    TNode<Int32T> tmp250;
    TNode<Number> tmp251;
    ca_.Bind(&block33, &tmp243, &tmp244, &tmp245, &tmp246, &tmp247, &tmp248, &tmp249, &tmp250, &tmp251);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3515);
    compiler::CodeAssemblerLabel label0(&ca_);
    CodeStubAssembler(state_).BuildAppendJSArray(HOLEY_DOUBLE_ELEMENTS, TNode<JSArray>{tmp247}, TNode<Object>{tmp246}, &label0);
    ca_.Goto(&block36, tmp243, tmp244, tmp245, tmp246, tmp247, tmp248, tmp249, tmp250, tmp251, tmp247, tmp246);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block37, tmp243, tmp244, tmp245, tmp246, tmp247, tmp248, tmp249, tmp250, tmp251, tmp247, tmp246);
    }
  }

  if (block37.is_used()) {
    TNode<Context> tmp252;
    TNode<JSReceiver> tmp253;
    TNode<Object> tmp254;
    TNode<Object> tmp255;
    TNode<JSArray> tmp256;
    TNode<Smi> tmp257;
    TNode<BoolT> tmp258;
    TNode<Int32T> tmp259;
    TNode<Number> tmp260;
    TNode<JSArray> tmp261;
    TNode<Object> tmp262;
    ca_.Bind(&block37, &tmp252, &tmp253, &tmp254, &tmp255, &tmp256, &tmp257, &tmp258, &tmp259, &tmp260, &tmp261, &tmp262);
    ca_.Goto(&block2, tmp252, tmp253, tmp254, tmp255);
  }

  if (block36.is_used()) {
    TNode<Context> tmp263;
    TNode<JSReceiver> tmp264;
    TNode<Object> tmp265;
    TNode<Object> tmp266;
    TNode<JSArray> tmp267;
    TNode<Smi> tmp268;
    TNode<BoolT> tmp269;
    TNode<Int32T> tmp270;
    TNode<Number> tmp271;
    TNode<JSArray> tmp272;
    TNode<Object> tmp273;
    ca_.Bind(&block36, &tmp263, &tmp264, &tmp265, &tmp266, &tmp267, &tmp268, &tmp269, &tmp270, &tmp271, &tmp272, &tmp273);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3514);
    ca_.Goto(&block35, tmp263, tmp264, tmp265, tmp266, tmp267, tmp268, tmp269, tmp270, tmp271);
  }

  if (block34.is_used()) {
    TNode<Context> tmp274;
    TNode<JSReceiver> tmp275;
    TNode<Object> tmp276;
    TNode<Object> tmp277;
    TNode<JSArray> tmp278;
    TNode<Smi> tmp279;
    TNode<BoolT> tmp280;
    TNode<Int32T> tmp281;
    TNode<Number> tmp282;
    ca_.Bind(&block34, &tmp274, &tmp275, &tmp276, &tmp277, &tmp278, &tmp279, &tmp280, &tmp281, &tmp282);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3518);
    TNode<IntPtrT> tmp283 = ca_.IntPtrConstant(JSObject::kElementsOffset);
    USE(tmp283);
    TNode<FixedArrayBase>tmp284 = CodeStubAssembler(state_).LoadReference<FixedArrayBase>(CodeStubAssembler::Reference{tmp278, tmp283});
    TNode<FixedDoubleArray> tmp285;
    USE(tmp285);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp285 = Cast16FixedDoubleArray_104(state_, TNode<HeapObject>{tmp284}, &label0);
    ca_.Goto(&block40, tmp274, tmp275, tmp276, tmp277, tmp278, tmp279, tmp280, tmp281, tmp282, tmp284, tmp285);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block41, tmp274, tmp275, tmp276, tmp277, tmp278, tmp279, tmp280, tmp281, tmp282, tmp284);
    }
  }

  if (block41.is_used()) {
    TNode<Context> tmp286;
    TNode<JSReceiver> tmp287;
    TNode<Object> tmp288;
    TNode<Object> tmp289;
    TNode<JSArray> tmp290;
    TNode<Smi> tmp291;
    TNode<BoolT> tmp292;
    TNode<Int32T> tmp293;
    TNode<Number> tmp294;
    TNode<FixedArrayBase> tmp295;
    ca_.Bind(&block41, &tmp286, &tmp287, &tmp288, &tmp289, &tmp290, &tmp291, &tmp292, &tmp293, &tmp294, &tmp295);
    ca_.Goto(&block39, tmp286, tmp287, tmp288, tmp289, tmp290, tmp291, tmp292, tmp293, tmp294);
  }

  if (block40.is_used()) {
    TNode<Context> tmp296;
    TNode<JSReceiver> tmp297;
    TNode<Object> tmp298;
    TNode<Object> tmp299;
    TNode<JSArray> tmp300;
    TNode<Smi> tmp301;
    TNode<BoolT> tmp302;
    TNode<Int32T> tmp303;
    TNode<Number> tmp304;
    TNode<FixedArrayBase> tmp305;
    TNode<FixedDoubleArray> tmp306;
    ca_.Bind(&block40, &tmp296, &tmp297, &tmp298, &tmp299, &tmp300, &tmp301, &tmp302, &tmp303, &tmp304, &tmp305, &tmp306);
    ca_.Goto(&block38, tmp296, tmp297, tmp298, tmp299, tmp300, tmp301, tmp302, tmp303, tmp304, tmp306);
  }

  if (block39.is_used()) {
    TNode<Context> tmp307;
    TNode<JSReceiver> tmp308;
    TNode<Object> tmp309;
    TNode<Object> tmp310;
    TNode<JSArray> tmp311;
    TNode<Smi> tmp312;
    TNode<BoolT> tmp313;
    TNode<Int32T> tmp314;
    TNode<Number> tmp315;
    ca_.Bind(&block39, &tmp307, &tmp308, &tmp309, &tmp310, &tmp311, &tmp312, &tmp313, &tmp314, &tmp315);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3519);
    CodeStubAssembler(state_).Unreachable();
  }

  if (block38.is_used()) {
    TNode<Context> tmp316;
    TNode<JSReceiver> tmp317;
    TNode<Object> tmp318;
    TNode<Object> tmp319;
    TNode<JSArray> tmp320;
    TNode<Smi> tmp321;
    TNode<BoolT> tmp322;
    TNode<Int32T> tmp323;
    TNode<Number> tmp324;
    TNode<FixedDoubleArray> tmp325;
    ca_.Bind(&block38, &tmp316, &tmp317, &tmp318, &tmp319, &tmp320, &tmp321, &tmp322, &tmp323, &tmp324, &tmp325);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3520);
    StoreFixedDoubleArrayDirect_216(state_, TNode<FixedDoubleArray>{tmp325}, TNode<Smi>{tmp321}, TNode<Number>{tmp324});
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3517);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3514);
    ca_.Goto(&block35, tmp316, tmp317, tmp318, tmp319, tmp320, tmp321, tmp322, tmp323, tmp324);
  }

  if (block35.is_used()) {
    TNode<Context> tmp326;
    TNode<JSReceiver> tmp327;
    TNode<Object> tmp328;
    TNode<Object> tmp329;
    TNode<JSArray> tmp330;
    TNode<Smi> tmp331;
    TNode<BoolT> tmp332;
    TNode<Int32T> tmp333;
    TNode<Number> tmp334;
    ca_.Bind(&block35, &tmp326, &tmp327, &tmp328, &tmp329, &tmp330, &tmp331, &tmp332, &tmp333, &tmp334);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3512);
    ca_.Goto(&block30, tmp326, tmp327, tmp328, tmp329, tmp330, tmp331, tmp332, tmp333);
  }

  if (block29.is_used()) {
    TNode<Context> tmp335;
    TNode<JSReceiver> tmp336;
    TNode<Object> tmp337;
    TNode<Object> tmp338;
    TNode<JSArray> tmp339;
    TNode<Smi> tmp340;
    TNode<BoolT> tmp341;
    TNode<Int32T> tmp342;
    ca_.Bind(&block29, &tmp335, &tmp336, &tmp337, &tmp338, &tmp339, &tmp340, &tmp341, &tmp342);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3524);
    ca_.Branch(tmp341, &block42, &block43, tmp335, tmp336, tmp337, tmp338, tmp339, tmp340, tmp341, tmp342);
  }

  if (block42.is_used()) {
    TNode<Context> tmp343;
    TNode<JSReceiver> tmp344;
    TNode<Object> tmp345;
    TNode<Object> tmp346;
    TNode<JSArray> tmp347;
    TNode<Smi> tmp348;
    TNode<BoolT> tmp349;
    TNode<Int32T> tmp350;
    ca_.Bind(&block42, &tmp343, &tmp344, &tmp345, &tmp346, &tmp347, &tmp348, &tmp349, &tmp350);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3525);
    compiler::CodeAssemblerLabel label0(&ca_);
    CodeStubAssembler(state_).BuildAppendJSArray(HOLEY_ELEMENTS, TNode<JSArray>{tmp347}, TNode<Object>{tmp346}, &label0);
    ca_.Goto(&block45, tmp343, tmp344, tmp345, tmp346, tmp347, tmp348, tmp349, tmp350, tmp347, tmp346);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block46, tmp343, tmp344, tmp345, tmp346, tmp347, tmp348, tmp349, tmp350, tmp347, tmp346);
    }
  }

  if (block46.is_used()) {
    TNode<Context> tmp351;
    TNode<JSReceiver> tmp352;
    TNode<Object> tmp353;
    TNode<Object> tmp354;
    TNode<JSArray> tmp355;
    TNode<Smi> tmp356;
    TNode<BoolT> tmp357;
    TNode<Int32T> tmp358;
    TNode<JSArray> tmp359;
    TNode<Object> tmp360;
    ca_.Bind(&block46, &tmp351, &tmp352, &tmp353, &tmp354, &tmp355, &tmp356, &tmp357, &tmp358, &tmp359, &tmp360);
    ca_.Goto(&block2, tmp351, tmp352, tmp353, tmp354);
  }

  if (block45.is_used()) {
    TNode<Context> tmp361;
    TNode<JSReceiver> tmp362;
    TNode<Object> tmp363;
    TNode<Object> tmp364;
    TNode<JSArray> tmp365;
    TNode<Smi> tmp366;
    TNode<BoolT> tmp367;
    TNode<Int32T> tmp368;
    TNode<JSArray> tmp369;
    TNode<Object> tmp370;
    ca_.Bind(&block45, &tmp361, &tmp362, &tmp363, &tmp364, &tmp365, &tmp366, &tmp367, &tmp368, &tmp369, &tmp370);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3524);
    ca_.Goto(&block44, tmp361, tmp362, tmp363, tmp364, tmp365, tmp366, tmp367, tmp368);
  }

  if (block43.is_used()) {
    TNode<Context> tmp371;
    TNode<JSReceiver> tmp372;
    TNode<Object> tmp373;
    TNode<Object> tmp374;
    TNode<JSArray> tmp375;
    TNode<Smi> tmp376;
    TNode<BoolT> tmp377;
    TNode<Int32T> tmp378;
    ca_.Bind(&block43, &tmp371, &tmp372, &tmp373, &tmp374, &tmp375, &tmp376, &tmp377, &tmp378);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3527);
    TNode<IntPtrT> tmp379 = ca_.IntPtrConstant(JSObject::kElementsOffset);
    USE(tmp379);
    TNode<FixedArrayBase>tmp380 = CodeStubAssembler(state_).LoadReference<FixedArrayBase>(CodeStubAssembler::Reference{tmp375, tmp379});
    TNode<FixedArray> tmp381;
    USE(tmp381);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp381 = Cast10FixedArray_103(state_, TNode<HeapObject>{tmp380}, &label0);
    ca_.Goto(&block49, tmp371, tmp372, tmp373, tmp374, tmp375, tmp376, tmp377, tmp378, tmp380, tmp381);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block50, tmp371, tmp372, tmp373, tmp374, tmp375, tmp376, tmp377, tmp378, tmp380);
    }
  }

  if (block50.is_used()) {
    TNode<Context> tmp382;
    TNode<JSReceiver> tmp383;
    TNode<Object> tmp384;
    TNode<Object> tmp385;
    TNode<JSArray> tmp386;
    TNode<Smi> tmp387;
    TNode<BoolT> tmp388;
    TNode<Int32T> tmp389;
    TNode<FixedArrayBase> tmp390;
    ca_.Bind(&block50, &tmp382, &tmp383, &tmp384, &tmp385, &tmp386, &tmp387, &tmp388, &tmp389, &tmp390);
    ca_.Goto(&block48, tmp382, tmp383, tmp384, tmp385, tmp386, tmp387, tmp388, tmp389);
  }

  if (block49.is_used()) {
    TNode<Context> tmp391;
    TNode<JSReceiver> tmp392;
    TNode<Object> tmp393;
    TNode<Object> tmp394;
    TNode<JSArray> tmp395;
    TNode<Smi> tmp396;
    TNode<BoolT> tmp397;
    TNode<Int32T> tmp398;
    TNode<FixedArrayBase> tmp399;
    TNode<FixedArray> tmp400;
    ca_.Bind(&block49, &tmp391, &tmp392, &tmp393, &tmp394, &tmp395, &tmp396, &tmp397, &tmp398, &tmp399, &tmp400);
    ca_.Goto(&block47, tmp391, tmp392, tmp393, tmp394, tmp395, tmp396, tmp397, tmp398, tmp400);
  }

  if (block48.is_used()) {
    TNode<Context> tmp401;
    TNode<JSReceiver> tmp402;
    TNode<Object> tmp403;
    TNode<Object> tmp404;
    TNode<JSArray> tmp405;
    TNode<Smi> tmp406;
    TNode<BoolT> tmp407;
    TNode<Int32T> tmp408;
    ca_.Bind(&block48, &tmp401, &tmp402, &tmp403, &tmp404, &tmp405, &tmp406, &tmp407, &tmp408);
    CodeStubAssembler(state_).Unreachable();
  }

  if (block47.is_used()) {
    TNode<Context> tmp409;
    TNode<JSReceiver> tmp410;
    TNode<Object> tmp411;
    TNode<Object> tmp412;
    TNode<JSArray> tmp413;
    TNode<Smi> tmp414;
    TNode<BoolT> tmp415;
    TNode<Int32T> tmp416;
    TNode<FixedArray> tmp417;
    ca_.Bind(&block47, &tmp409, &tmp410, &tmp411, &tmp412, &tmp413, &tmp414, &tmp415, &tmp416, &tmp417);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3528);
    StoreFixedArrayDirect_217(state_, TNode<FixedArray>{tmp417}, TNode<Smi>{tmp414}, TNode<Object>{tmp412});
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3526);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3524);
    ca_.Goto(&block44, tmp409, tmp410, tmp411, tmp412, tmp413, tmp414, tmp415, tmp416);
  }

  if (block44.is_used()) {
    TNode<Context> tmp418;
    TNode<JSReceiver> tmp419;
    TNode<Object> tmp420;
    TNode<Object> tmp421;
    TNode<JSArray> tmp422;
    TNode<Smi> tmp423;
    TNode<BoolT> tmp424;
    TNode<Int32T> tmp425;
    ca_.Bind(&block44, &tmp418, &tmp419, &tmp420, &tmp421, &tmp422, &tmp423, &tmp424, &tmp425);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3512);
    ca_.Goto(&block30, tmp418, tmp419, tmp420, tmp421, tmp422, tmp423, tmp424, tmp425);
  }

  if (block30.is_used()) {
    TNode<Context> tmp426;
    TNode<JSReceiver> tmp427;
    TNode<Object> tmp428;
    TNode<Object> tmp429;
    TNode<JSArray> tmp430;
    TNode<Smi> tmp431;
    TNode<BoolT> tmp432;
    TNode<Int32T> tmp433;
    ca_.Bind(&block30, &tmp426, &tmp427, &tmp428, &tmp429, &tmp430, &tmp431, &tmp432, &tmp433);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3504);
    ca_.Goto(&block16, tmp426, tmp427, tmp428, tmp429, tmp430, tmp431, tmp432, tmp433);
  }

  if (block16.is_used()) {
    TNode<Context> tmp434;
    TNode<JSReceiver> tmp435;
    TNode<Object> tmp436;
    TNode<Object> tmp437;
    TNode<JSArray> tmp438;
    TNode<Smi> tmp439;
    TNode<BoolT> tmp440;
    TNode<Int32T> tmp441;
    ca_.Bind(&block16, &tmp434, &tmp435, &tmp436, &tmp437, &tmp438, &tmp439, &tmp440, &tmp441);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3495);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3532);
    ca_.Goto(&block1, tmp434, tmp435, tmp436, tmp437);
  }

  if (block2.is_used()) {
    TNode<Context> tmp442;
    TNode<JSReceiver> tmp443;
    TNode<Object> tmp444;
    TNode<Object> tmp445;
    ca_.Bind(&block2, &tmp442, &tmp443, &tmp444, &tmp445);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3533);
    CodeStubAssembler(state_).CallRuntime(Runtime::kCreateDataProperty, tmp442, tmp443, tmp444, tmp445);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3495);
    ca_.Goto(&block1, tmp442, tmp443, tmp444, tmp445);
  }

  if (block1.is_used()) {
    TNode<Context> tmp447;
    TNode<JSReceiver> tmp448;
    TNode<Object> tmp449;
    TNode<Object> tmp450;
    ca_.Bind(&block1, &tmp447, &tmp448, &tmp449, &tmp450);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3535);
    TNode<Oddball> tmp451;
    USE(tmp451);
    tmp451 = Undefined_64(state_);
    CodeStubAssembler(state_).Return(tmp451);
  }
}

TNode<String> ToStringImpl_253(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<Object> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Context, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, Object> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, Object, Object, Object> block8(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, Object, Object, Object, Number> block7(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, Object, Object> block6(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, Object, Object, HeapObject> block12(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, Object, Object, HeapObject, String> block11(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, Object, Object> block10(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, Object, Object, HeapObject> block16(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, Object, Object, HeapObject, Oddball> block15(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, Object, Object> block14(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, Object, Object, HeapObject> block20(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, Object, Object, HeapObject, JSReceiver> block19(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, Object, Object> block18(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, Object, Object, HeapObject> block24(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, Object, Object, HeapObject, Symbol> block23(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, Object, Object> block22(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, Object> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, String> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, String> block25(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_context, p_o);

  if (block0.is_used()) {
    TNode<Context> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3540);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3541);
    ca_.Goto(&block4, tmp0, tmp1, tmp1);
  }

  if (block4.is_used()) {
    TNode<Context> tmp2;
    TNode<Object> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block4, &tmp2, &tmp3, &tmp4);
    TNode<BoolT> tmp5;
    USE(tmp5);
    tmp5 = FromConstexpr6ATbool16ATconstexpr_bool_167(state_, true);
    ca_.Branch(tmp5, &block2, &block3, tmp2, tmp3, tmp4);
  }

  if (block2.is_used()) {
    TNode<Context> tmp6;
    TNode<Object> tmp7;
    TNode<Object> tmp8;
    ca_.Bind(&block2, &tmp6, &tmp7, &tmp8);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3542);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3543);
    TNode<Number> tmp9;
    USE(tmp9);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp9 = Cast20UT5ATSmi10HeapNumber_85(state_, TNode<Object>{tmp8}, &label0);
    ca_.Goto(&block7, tmp6, tmp7, tmp8, tmp8, tmp8, tmp9);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block8, tmp6, tmp7, tmp8, tmp8, tmp8);
    }
  }

  if (block8.is_used()) {
    TNode<Context> tmp10;
    TNode<Object> tmp11;
    TNode<Object> tmp12;
    TNode<Object> tmp13;
    TNode<Object> tmp14;
    ca_.Bind(&block8, &tmp10, &tmp11, &tmp12, &tmp13, &tmp14);
    ca_.Goto(&block6, tmp10, tmp11, tmp12, tmp13);
  }

  if (block7.is_used()) {
    TNode<Context> tmp15;
    TNode<Object> tmp16;
    TNode<Object> tmp17;
    TNode<Object> tmp18;
    TNode<Object> tmp19;
    TNode<Number> tmp20;
    ca_.Bind(&block7, &tmp15, &tmp16, &tmp17, &tmp18, &tmp19, &tmp20);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3544);
    TNode<String> tmp21;
    USE(tmp21);
    tmp21 = CodeStubAssembler(state_).NumberToString(TNode<Number>{tmp20});
    ca_.Goto(&block1, tmp15, tmp16, tmp21);
  }

  if (block6.is_used()) {
    TNode<Context> tmp22;
    TNode<Object> tmp23;
    TNode<Object> tmp24;
    TNode<Object> tmp25;
    ca_.Bind(&block6, &tmp22, &tmp23, &tmp24, &tmp25);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3546);
    TNode<String> tmp26;
    USE(tmp26);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp26 = Cast6String_119(state_, TNode<HeapObject>{ca_.UncheckedCast<HeapObject>(tmp25)}, &label0);
    ca_.Goto(&block11, tmp22, tmp23, tmp24, tmp25, ca_.UncheckedCast<HeapObject>(tmp25), tmp26);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block12, tmp22, tmp23, tmp24, tmp25, ca_.UncheckedCast<HeapObject>(tmp25));
    }
  }

  if (block12.is_used()) {
    TNode<Context> tmp27;
    TNode<Object> tmp28;
    TNode<Object> tmp29;
    TNode<Object> tmp30;
    TNode<HeapObject> tmp31;
    ca_.Bind(&block12, &tmp27, &tmp28, &tmp29, &tmp30, &tmp31);
    ca_.Goto(&block10, tmp27, tmp28, tmp29, tmp30);
  }

  if (block11.is_used()) {
    TNode<Context> tmp32;
    TNode<Object> tmp33;
    TNode<Object> tmp34;
    TNode<Object> tmp35;
    TNode<HeapObject> tmp36;
    TNode<String> tmp37;
    ca_.Bind(&block11, &tmp32, &tmp33, &tmp34, &tmp35, &tmp36, &tmp37);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3547);
    ca_.Goto(&block1, tmp32, tmp33, tmp37);
  }

  if (block10.is_used()) {
    TNode<Context> tmp38;
    TNode<Object> tmp39;
    TNode<Object> tmp40;
    TNode<Object> tmp41;
    ca_.Bind(&block10, &tmp38, &tmp39, &tmp40, &tmp41);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3549);
    TNode<Oddball> tmp42;
    USE(tmp42);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp42 = Cast7Oddball_120(state_, TNode<HeapObject>{ca_.UncheckedCast<HeapObject>(tmp41)}, &label0);
    ca_.Goto(&block15, tmp38, tmp39, tmp40, tmp41, ca_.UncheckedCast<HeapObject>(tmp41), tmp42);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block16, tmp38, tmp39, tmp40, tmp41, ca_.UncheckedCast<HeapObject>(tmp41));
    }
  }

  if (block16.is_used()) {
    TNode<Context> tmp43;
    TNode<Object> tmp44;
    TNode<Object> tmp45;
    TNode<Object> tmp46;
    TNode<HeapObject> tmp47;
    ca_.Bind(&block16, &tmp43, &tmp44, &tmp45, &tmp46, &tmp47);
    ca_.Goto(&block14, tmp43, tmp44, tmp45, tmp46);
  }

  if (block15.is_used()) {
    TNode<Context> tmp48;
    TNode<Object> tmp49;
    TNode<Object> tmp50;
    TNode<Object> tmp51;
    TNode<HeapObject> tmp52;
    TNode<Oddball> tmp53;
    ca_.Bind(&block15, &tmp48, &tmp49, &tmp50, &tmp51, &tmp52, &tmp53);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3550);
    TNode<IntPtrT> tmp54 = ca_.IntPtrConstant(Oddball::kToStringOffset);
    USE(tmp54);
    TNode<String>tmp55 = CodeStubAssembler(state_).LoadReference<String>(CodeStubAssembler::Reference{tmp53, tmp54});
    ca_.Goto(&block1, tmp48, tmp49, tmp55);
  }

  if (block14.is_used()) {
    TNode<Context> tmp56;
    TNode<Object> tmp57;
    TNode<Object> tmp58;
    TNode<Object> tmp59;
    ca_.Bind(&block14, &tmp56, &tmp57, &tmp58, &tmp59);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3552);
    TNode<JSReceiver> tmp60;
    USE(tmp60);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp60 = Cast10JSReceiver_142(state_, TNode<HeapObject>{ca_.UncheckedCast<HeapObject>(tmp59)}, &label0);
    ca_.Goto(&block19, tmp56, tmp57, tmp58, tmp59, ca_.UncheckedCast<HeapObject>(tmp59), tmp60);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block20, tmp56, tmp57, tmp58, tmp59, ca_.UncheckedCast<HeapObject>(tmp59));
    }
  }

  if (block20.is_used()) {
    TNode<Context> tmp61;
    TNode<Object> tmp62;
    TNode<Object> tmp63;
    TNode<Object> tmp64;
    TNode<HeapObject> tmp65;
    ca_.Bind(&block20, &tmp61, &tmp62, &tmp63, &tmp64, &tmp65);
    ca_.Goto(&block18, tmp61, tmp62, tmp63, tmp64);
  }

  if (block19.is_used()) {
    TNode<Context> tmp66;
    TNode<Object> tmp67;
    TNode<Object> tmp68;
    TNode<Object> tmp69;
    TNode<HeapObject> tmp70;
    TNode<JSReceiver> tmp71;
    ca_.Bind(&block19, &tmp66, &tmp67, &tmp68, &tmp69, &tmp70, &tmp71);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3553);
    TNode<Object> tmp72;
    tmp72 = CodeStubAssembler(state_).CallBuiltin(Builtins::kNonPrimitiveToPrimitive_String, tmp66, tmp68);
    USE(tmp72);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3554);
    ca_.Goto(&block4, tmp66, tmp67, tmp72);
  }

  if (block18.is_used()) {
    TNode<Context> tmp73;
    TNode<Object> tmp74;
    TNode<Object> tmp75;
    TNode<Object> tmp76;
    ca_.Bind(&block18, &tmp73, &tmp74, &tmp75, &tmp76);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3556);
    TNode<Symbol> tmp77;
    USE(tmp77);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp77 = Cast6Symbol_121(state_, TNode<HeapObject>{ca_.UncheckedCast<HeapObject>(tmp76)}, &label0);
    ca_.Goto(&block23, tmp73, tmp74, tmp75, tmp76, ca_.UncheckedCast<HeapObject>(tmp76), tmp77);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block24, tmp73, tmp74, tmp75, tmp76, ca_.UncheckedCast<HeapObject>(tmp76));
    }
  }

  if (block24.is_used()) {
    TNode<Context> tmp78;
    TNode<Object> tmp79;
    TNode<Object> tmp80;
    TNode<Object> tmp81;
    TNode<HeapObject> tmp82;
    ca_.Bind(&block24, &tmp78, &tmp79, &tmp80, &tmp81, &tmp82);
    ca_.Goto(&block22, tmp78, tmp79, tmp80, tmp81);
  }

  if (block23.is_used()) {
    TNode<Context> tmp83;
    TNode<Object> tmp84;
    TNode<Object> tmp85;
    TNode<Object> tmp86;
    TNode<HeapObject> tmp87;
    TNode<Symbol> tmp88;
    ca_.Bind(&block23, &tmp83, &tmp84, &tmp85, &tmp86, &tmp87, &tmp88);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3557);
    CodeStubAssembler(state_).ThrowTypeError(TNode<Context>{tmp83}, MessageTemplate::kSymbolToString);
  }

  if (block22.is_used()) {
    TNode<Context> tmp89;
    TNode<Object> tmp90;
    TNode<Object> tmp91;
    TNode<Object> tmp92;
    ca_.Bind(&block22, &tmp89, &tmp90, &tmp91, &tmp92);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3559);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3560);
    TNode<String> tmp93;
    tmp93 = TORQUE_CAST(CodeStubAssembler(state_).CallRuntime(Runtime::kToStringRT, tmp89, tmp90)); 
    USE(tmp93);
    ca_.Goto(&block1, tmp89, tmp90, tmp93);
  }

  if (block3.is_used()) {
    TNode<Context> tmp94;
    TNode<Object> tmp95;
    TNode<Object> tmp96;
    ca_.Bind(&block3, &tmp94, &tmp95, &tmp96);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3564);
    CodeStubAssembler(state_).Unreachable();
  }

  if (block1.is_used()) {
    TNode<Context> tmp97;
    TNode<Object> tmp98;
    TNode<String> tmp99;
    ca_.Bind(&block1, &tmp97, &tmp98, &tmp99);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3538);
    ca_.Goto(&block25, tmp97, tmp98, tmp99);
  }

    TNode<Context> tmp100;
    TNode<Object> tmp101;
    TNode<String> tmp102;
    ca_.Bind(&block25, &tmp100, &tmp101, &tmp102);
  return TNode<String>{tmp102};
}

void VerifiedUnreachable_254(compiler::CodeAssemblerState* state_) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0);

  if (block0.is_used()) {
    ca_.Bind(&block0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3568);
    TNode<BoolT> tmp0;
    USE(tmp0);
    tmp0 = FromConstexpr6ATbool16ATconstexpr_bool_167(state_, false);
    CodeStubAssembler(state_).StaticAssert(TNode<BoolT>{tmp0});
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3569);
    CodeStubAssembler(state_).Unreachable();
  }
}

TNode<BoolT> Float64IsSomeInfinity_255(compiler::CodeAssemblerState* state_, TNode<Float64T> p_value) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Float64T> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Float64T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Float64T> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Float64T, BoolT> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Float64T, BoolT> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_value);

  if (block0.is_used()) {
    TNode<Float64T> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3573);
    TNode<Float64T> tmp1;
    USE(tmp1);
    tmp1 = FromConstexpr9ATfloat6419ATconstexpr_float64_166(state_, V8_INFINITY);
    TNode<BoolT> tmp2;
    USE(tmp2);
    tmp2 = CodeStubAssembler(state_).Float64Equal(TNode<Float64T>{tmp0}, TNode<Float64T>{tmp1});
    ca_.Branch(tmp2, &block2, &block3, tmp0);
  }

  if (block2.is_used()) {
    TNode<Float64T> tmp3;
    ca_.Bind(&block2, &tmp3);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3574);
    TNode<BoolT> tmp4;
    USE(tmp4);
    tmp4 = FromConstexpr6ATbool16ATconstexpr_bool_167(state_, true);
    ca_.Goto(&block1, tmp3, tmp4);
  }

  if (block3.is_used()) {
    TNode<Float64T> tmp5;
    ca_.Bind(&block3, &tmp5);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3576);
    TNode<Float64T> tmp6;
    USE(tmp6);
    tmp6 = Convert9ATfloat6417ATconstexpr_int31_1483(state_, 0);
    TNode<Float64T> tmp7;
    USE(tmp7);
    tmp7 = FromConstexpr9ATfloat6419ATconstexpr_float64_166(state_, V8_INFINITY);
    TNode<Float64T> tmp8;
    USE(tmp8);
    tmp8 = CodeStubAssembler(state_).Float64Sub(TNode<Float64T>{tmp6}, TNode<Float64T>{tmp7});
    TNode<BoolT> tmp9;
    USE(tmp9);
    tmp9 = CodeStubAssembler(state_).Float64Equal(TNode<Float64T>{tmp5}, TNode<Float64T>{tmp8});
    ca_.Goto(&block1, tmp5, tmp9);
  }

  if (block1.is_used()) {
    TNode<Float64T> tmp10;
    TNode<BoolT> tmp11;
    ca_.Bind(&block1, &tmp10, &tmp11);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3572);
    ca_.Goto(&block4, tmp10, tmp11);
  }

    TNode<Float64T> tmp12;
    TNode<BoolT> tmp13;
    ca_.Bind(&block4, &tmp12, &tmp13);
  return TNode<BoolT>{tmp13};
}

TNode<BoolT> IsIntegerOrSomeInfinity_256(compiler::CodeAssemblerState* state_, TNode<Object> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object, Object> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object, Object, Smi> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object, HeapObject> block9(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object, HeapObject, HeapNumber> block8(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object, HeapNumber> block10(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object, HeapNumber> block11(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object> block7(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, BoolT> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, BoolT> block12(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<Object> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3581);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3582);
    TNode<Smi> tmp1;
    USE(tmp1);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp1 = Cast5ATSmi_83(state_, TNode<Object>{tmp0}, &label0);
    ca_.Goto(&block4, tmp0, tmp0, tmp0, tmp1);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block5, tmp0, tmp0, tmp0);
    }
  }

  if (block5.is_used()) {
    TNode<Object> tmp2;
    TNode<Object> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block5, &tmp2, &tmp3, &tmp4);
    ca_.Goto(&block3, tmp2, tmp3);
  }

  if (block4.is_used()) {
    TNode<Object> tmp5;
    TNode<Object> tmp6;
    TNode<Object> tmp7;
    TNode<Smi> tmp8;
    ca_.Bind(&block4, &tmp5, &tmp6, &tmp7, &tmp8);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3583);
    TNode<BoolT> tmp9;
    USE(tmp9);
    tmp9 = FromConstexpr6ATbool16ATconstexpr_bool_167(state_, true);
    ca_.Goto(&block1, tmp5, tmp9);
  }

  if (block3.is_used()) {
    TNode<Object> tmp10;
    TNode<Object> tmp11;
    ca_.Bind(&block3, &tmp10, &tmp11);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3585);
    TNode<HeapNumber> tmp12;
    USE(tmp12);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp12 = Cast10HeapNumber_128(state_, TNode<HeapObject>{ca_.UncheckedCast<HeapObject>(tmp11)}, &label0);
    ca_.Goto(&block8, tmp10, tmp11, ca_.UncheckedCast<HeapObject>(tmp11), tmp12);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block9, tmp10, tmp11, ca_.UncheckedCast<HeapObject>(tmp11));
    }
  }

  if (block9.is_used()) {
    TNode<Object> tmp13;
    TNode<Object> tmp14;
    TNode<HeapObject> tmp15;
    ca_.Bind(&block9, &tmp13, &tmp14, &tmp15);
    ca_.Goto(&block7, tmp13, tmp14);
  }

  if (block8.is_used()) {
    TNode<Object> tmp16;
    TNode<Object> tmp17;
    TNode<HeapObject> tmp18;
    TNode<HeapNumber> tmp19;
    ca_.Bind(&block8, &tmp16, &tmp17, &tmp18, &tmp19);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3586);
    TNode<Float64T> tmp20;
    USE(tmp20);
    tmp20 = Convert9ATfloat6410HeapNumber_195(state_, TNode<HeapNumber>{tmp19});
    TNode<BoolT> tmp21;
    USE(tmp21);
    tmp21 = Float64IsSomeInfinity_255(state_, TNode<Float64T>{tmp20});
    ca_.Branch(tmp21, &block10, &block11, tmp16, tmp17, tmp19);
  }

  if (block10.is_used()) {
    TNode<Object> tmp22;
    TNode<Object> tmp23;
    TNode<HeapNumber> tmp24;
    ca_.Bind(&block10, &tmp22, &tmp23, &tmp24);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3587);
    TNode<BoolT> tmp25;
    USE(tmp25);
    tmp25 = FromConstexpr6ATbool16ATconstexpr_bool_167(state_, true);
    ca_.Goto(&block1, tmp22, tmp25);
  }

  if (block11.is_used()) {
    TNode<Object> tmp26;
    TNode<Object> tmp27;
    TNode<HeapNumber> tmp28;
    ca_.Bind(&block11, &tmp26, &tmp27, &tmp28);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3589);
    TNode<BoolT> tmp29;
    USE(tmp29);
    tmp29 = CodeStubAssembler(state_).IsInteger(TNode<HeapNumber>{tmp28});
    ca_.Goto(&block1, tmp26, tmp29);
  }

  if (block7.is_used()) {
    TNode<Object> tmp30;
    TNode<Object> tmp31;
    ca_.Bind(&block7, &tmp30, &tmp31);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3591);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3592);
    TNode<BoolT> tmp32;
    USE(tmp32);
    tmp32 = FromConstexpr6ATbool16ATconstexpr_bool_167(state_, false);
    ca_.Goto(&block1, tmp30, tmp32);
  }

  if (block1.is_used()) {
    TNode<Object> tmp33;
    TNode<BoolT> tmp34;
    ca_.Bind(&block1, &tmp33, &tmp34);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3579);
    ca_.Goto(&block12, tmp33, tmp34);
  }

    TNode<Object> tmp35;
    TNode<BoolT> tmp36;
    ca_.Bind(&block12, &tmp35, &tmp36);
  return TNode<BoolT>{tmp36};
}

TF_BUILTIN(CheckNumberInRange, CodeStubAssembler) {
  compiler::CodeAssemblerState* state_ = state();  compiler::CodeAssembler ca_(state());
  TNode<Context> parameter0 = UncheckedCast<Context>(Parameter(Descriptor::kContext));
  USE(parameter0);
  TNode<Number> parameter1 = UncheckedCast<Number>(Parameter(Descriptor::kValue));
  USE(parameter1);
  TNode<Number> parameter2 = UncheckedCast<Number>(Parameter(Descriptor::kMin));
  USE(parameter2);
  TNode<Number> parameter3 = UncheckedCast<Number>(Parameter(Descriptor::kMax));
  USE(parameter3);
  compiler::CodeAssemblerParameterizedLabel<Context, Number, Number, Number> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Number, Number, Number, BoolT> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Number, Number, Number, BoolT> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Number, Number, Number, BoolT, BoolT> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Number, Number, Number, BoolT> block6(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Number, Number, Number, BoolT> block7(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Number, Number, Number, BoolT, BoolT> block8(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Number, Number, Number> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Number, Number, Number> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, parameter0, parameter1, parameter2, parameter3);

  if (block0.is_used()) {
    TNode<Context> tmp0;
    TNode<Number> tmp1;
    TNode<Number> tmp2;
    TNode<Number> tmp3;
    ca_.Bind(&block0, &tmp0, &tmp1, &tmp2, &tmp3);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3599);
    TNode<BoolT> tmp4;
    USE(tmp4);
    tmp4 = IsIntegerOrSomeInfinity_256(state_, TNode<Object>{tmp1});
    ca_.Branch(tmp4, &block3, &block4, tmp0, tmp1, tmp2, tmp3, tmp4);
  }

  if (block3.is_used()) {
    TNode<Context> tmp5;
    TNode<Number> tmp6;
    TNode<Number> tmp7;
    TNode<Number> tmp8;
    TNode<BoolT> tmp9;
    ca_.Bind(&block3, &tmp5, &tmp6, &tmp7, &tmp8, &tmp9);
    TNode<BoolT> tmp10;
    USE(tmp10);
    tmp10 = NumberIsLessThanOrEqual_76(state_, TNode<Number>{tmp7}, TNode<Number>{tmp6});
    ca_.Goto(&block5, tmp5, tmp6, tmp7, tmp8, tmp9, tmp10);
  }

  if (block4.is_used()) {
    TNode<Context> tmp11;
    TNode<Number> tmp12;
    TNode<Number> tmp13;
    TNode<Number> tmp14;
    TNode<BoolT> tmp15;
    ca_.Bind(&block4, &tmp11, &tmp12, &tmp13, &tmp14, &tmp15);
    TNode<BoolT> tmp16;
    USE(tmp16);
    tmp16 = FromConstexpr6ATbool16ATconstexpr_bool_167(state_, false);
    ca_.Goto(&block5, tmp11, tmp12, tmp13, tmp14, tmp15, tmp16);
  }

  if (block5.is_used()) {
    TNode<Context> tmp17;
    TNode<Number> tmp18;
    TNode<Number> tmp19;
    TNode<Number> tmp20;
    TNode<BoolT> tmp21;
    TNode<BoolT> tmp22;
    ca_.Bind(&block5, &tmp17, &tmp18, &tmp19, &tmp20, &tmp21, &tmp22);
    ca_.Branch(tmp22, &block6, &block7, tmp17, tmp18, tmp19, tmp20, tmp22);
  }

  if (block6.is_used()) {
    TNode<Context> tmp23;
    TNode<Number> tmp24;
    TNode<Number> tmp25;
    TNode<Number> tmp26;
    TNode<BoolT> tmp27;
    ca_.Bind(&block6, &tmp23, &tmp24, &tmp25, &tmp26, &tmp27);
    TNode<BoolT> tmp28;
    USE(tmp28);
    tmp28 = NumberIsLessThanOrEqual_76(state_, TNode<Number>{tmp24}, TNode<Number>{tmp26});
    ca_.Goto(&block8, tmp23, tmp24, tmp25, tmp26, tmp27, tmp28);
  }

  if (block7.is_used()) {
    TNode<Context> tmp29;
    TNode<Number> tmp30;
    TNode<Number> tmp31;
    TNode<Number> tmp32;
    TNode<BoolT> tmp33;
    ca_.Bind(&block7, &tmp29, &tmp30, &tmp31, &tmp32, &tmp33);
    TNode<BoolT> tmp34;
    USE(tmp34);
    tmp34 = FromConstexpr6ATbool16ATconstexpr_bool_167(state_, false);
    ca_.Goto(&block8, tmp29, tmp30, tmp31, tmp32, tmp33, tmp34);
  }

  if (block8.is_used()) {
    TNode<Context> tmp35;
    TNode<Number> tmp36;
    TNode<Number> tmp37;
    TNode<Number> tmp38;
    TNode<BoolT> tmp39;
    TNode<BoolT> tmp40;
    ca_.Bind(&block8, &tmp35, &tmp36, &tmp37, &tmp38, &tmp39, &tmp40);
    ca_.Branch(tmp40, &block1, &block2, tmp35, tmp36, tmp37, tmp38);
  }

  if (block1.is_used()) {
    TNode<Context> tmp41;
    TNode<Number> tmp42;
    TNode<Number> tmp43;
    TNode<Number> tmp44;
    ca_.Bind(&block1, &tmp41, &tmp42, &tmp43, &tmp44);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3600);
    TNode<Oddball> tmp45;
    USE(tmp45);
    tmp45 = Undefined_64(state_);
    CodeStubAssembler(state_).Return(tmp45);
  }

  if (block2.is_used()) {
    TNode<Context> tmp46;
    TNode<Number> tmp47;
    TNode<Number> tmp48;
    TNode<Number> tmp49;
    ca_.Bind(&block2, &tmp46, &tmp47, &tmp48, &tmp49);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3602);
    CodeStubAssembler(state_).Print("Range type assertion failed! (value/min/max)");
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3603);
    CodeStubAssembler(state_).Print(TNode<Object>{tmp47});
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3604);
    CodeStubAssembler(state_).Print(TNode<Object>{tmp48});
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3605);
    CodeStubAssembler(state_).Print(TNode<Object>{tmp49});
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3606);
    CodeStubAssembler(state_).Unreachable();
  }
}

TNode<Object> ReplaceTheHoleWithUndefined_257(compiler::CodeAssemblerState* state_, TNode<Object> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object, Object> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object, Object, Oddball> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Object, Object> block6(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<Object> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3611);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3612);
    TNode<Oddball> tmp1;
    USE(tmp1);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp1 = Cast9ATTheHole_88(state_, TNode<Object>{tmp0}, &label0);
    ca_.Goto(&block4, tmp0, tmp0, tmp0, tmp1);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block5, tmp0, tmp0, tmp0);
    }
  }

  if (block5.is_used()) {
    TNode<Object> tmp2;
    TNode<Object> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block5, &tmp2, &tmp3, &tmp4);
    ca_.Goto(&block3, tmp2, tmp3);
  }

  if (block4.is_used()) {
    TNode<Object> tmp5;
    TNode<Object> tmp6;
    TNode<Object> tmp7;
    TNode<Oddball> tmp8;
    ca_.Bind(&block4, &tmp5, &tmp6, &tmp7, &tmp8);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3613);
    TNode<Oddball> tmp9;
    USE(tmp9);
    tmp9 = Undefined_64(state_);
    ca_.Goto(&block1, tmp5, tmp9);
  }

  if (block3.is_used()) {
    TNode<Object> tmp10;
    TNode<Object> tmp11;
    ca_.Bind(&block3, &tmp10, &tmp11);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3615);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3616);
    ca_.Goto(&block1, tmp10, ca_.UncheckedCast<Object>(tmp11));
  }

  if (block1.is_used()) {
    TNode<Object> tmp12;
    TNode<Object> tmp13;
    ca_.Bind(&block1, &tmp12, &tmp13);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3610);
    ca_.Goto(&block6, tmp12, tmp13);
  }

    TNode<Object> tmp14;
    TNode<Object> tmp15;
    ca_.Bind(&block6, &tmp14, &tmp15);
  return TNode<Object>{tmp15};
}

TNode<Map> LoadHeapObjectMap_497(compiler::CodeAssemblerState* state_, TNode<HeapObject> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, Map> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, Map> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<HeapObject> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 41);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(HeapObject::kMapOffset);
    USE(tmp1);
    TNode<Map>tmp2 = CodeStubAssembler(state_).LoadReference<Map>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<HeapObject> tmp3;
    TNode<Map> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<HeapObject> tmp5;
    TNode<Map> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Map>{tmp6};
}

void StoreHeapObjectMap_498(compiler::CodeAssemblerState* state_, TNode<HeapObject> p_o, TNode<Map> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, Map> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, Map> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapObject, Map> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<HeapObject> tmp0;
    TNode<Map> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 41);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(HeapObject::kMapOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<HeapObject> tmp3;
    TNode<Map> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<HeapObject> tmp5;
    TNode<Map> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Smi> LoadContextLength_499(compiler::CodeAssemblerState* state_, TNode<Context> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Context> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<Context> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 99);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(Context::kLengthOffset);
    USE(tmp1);
    TNode<Smi>tmp2 = CodeStubAssembler(state_).LoadReference<Smi>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<Context> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Context> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Smi>{tmp6};
}

void StoreContextLength_500(compiler::CodeAssemblerState* state_, TNode<Context> p_o, TNode<Smi> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Context, Smi> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<Context> tmp0;
    TNode<Smi> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 99);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(Context::kLengthOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<Context> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Context> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<ScopeInfo> LoadContextScopeInfo_501(compiler::CodeAssemblerState* state_, TNode<Context> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Context> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, ScopeInfo> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, ScopeInfo> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<Context> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 100);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(Context::kScopeInfoOffset);
    USE(tmp1);
    TNode<ScopeInfo>tmp2 = CodeStubAssembler(state_).LoadReference<ScopeInfo>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<Context> tmp3;
    TNode<ScopeInfo> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Context> tmp5;
    TNode<ScopeInfo> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<ScopeInfo>{tmp6};
}

void StoreContextScopeInfo_502(compiler::CodeAssemblerState* state_, TNode<Context> p_o, TNode<ScopeInfo> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Context, ScopeInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, ScopeInfo> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, ScopeInfo> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<Context> tmp0;
    TNode<ScopeInfo> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 100);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(Context::kScopeInfoOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<Context> tmp3;
    TNode<ScopeInfo> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Context> tmp5;
    TNode<ScopeInfo> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadContextPrevious_503(compiler::CodeAssemblerState* state_, TNode<Context> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Context> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<Context> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 101);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(Context::kPreviousOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<Context> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Context> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreContextPrevious_504(compiler::CodeAssemblerState* state_, TNode<Context> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Context, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<Context> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 101);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(Context::kPreviousOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<Context> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Context> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadContextExtension_505(compiler::CodeAssemblerState* state_, TNode<Context> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Context> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<Context> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 102);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(Context::kExtensionOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<Context> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Context> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreContextExtension_506(compiler::CodeAssemblerState* state_, TNode<Context> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Context, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<Context> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 102);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(Context::kExtensionOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<Context> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Context> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadContextNativeContext_507(compiler::CodeAssemblerState* state_, TNode<Context> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Context> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<Context> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 103);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(Context::kNativeContextOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<Context> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Context> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreContextNativeContext_508(compiler::CodeAssemblerState* state_, TNode<Context> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Context, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<Context> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 103);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(Context::kNativeContextOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<Context> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Context> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadJSReceiverPropertiesOrHash_509(compiler::CodeAssemblerState* state_, TNode<JSReceiver> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSReceiver> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSReceiver, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSReceiver, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSReceiver> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 336);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSReceiver::kPropertiesOrHashOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSReceiver> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSReceiver> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreJSReceiverPropertiesOrHash_510(compiler::CodeAssemblerState* state_, TNode<JSReceiver> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSReceiver, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSReceiver, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSReceiver, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSReceiver> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 336);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSReceiver::kPropertiesOrHashOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSReceiver> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSReceiver> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Float64T> LoadHeapNumberValue_511(compiler::CodeAssemblerState* state_, TNode<HeapNumber> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<HeapNumber> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapNumber, Float64T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapNumber, Float64T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<HeapNumber> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 116);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(HeapNumber::kValueOffset);
    USE(tmp1);
    TNode<Float64T>tmp2 = CodeStubAssembler(state_).LoadReference<Float64T>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<HeapNumber> tmp3;
    TNode<Float64T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<HeapNumber> tmp5;
    TNode<Float64T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Float64T>{tmp6};
}

void StoreHeapNumberValue_512(compiler::CodeAssemblerState* state_, TNode<HeapNumber> p_o, TNode<Float64T> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<HeapNumber, Float64T> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapNumber, Float64T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<HeapNumber, Float64T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<HeapNumber> tmp0;
    TNode<Float64T> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 116);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(HeapNumber::kValueOffset);
    USE(tmp2);
    TNode<Float64T> tmp3;
    USE(tmp3);
    tmp3 = CodeStubAssembler(state_).Float64SilenceNaN(TNode<Float64T>{tmp1});
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp3);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<HeapNumber> tmp4;
    TNode<Float64T> tmp5;
    ca_.Bind(&block1, &tmp4, &tmp5);
    ca_.Goto(&block2, tmp4, tmp5);
  }

    TNode<HeapNumber> tmp6;
    TNode<Float64T> tmp7;
    ca_.Bind(&block2, &tmp6, &tmp7);
}

TNode<Uint32T> LoadNameHashField_513(compiler::CodeAssemblerState* state_, TNode<Name> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Name> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Name, Uint32T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Name, Uint32T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<Name> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 123);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(Name::kHashFieldOffset);
    USE(tmp1);
    TNode<Uint32T>tmp2 = CodeStubAssembler(state_).LoadReference<Uint32T>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<Name> tmp3;
    TNode<Uint32T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Name> tmp5;
    TNode<Uint32T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Uint32T>{tmp6};
}

void StoreNameHashField_514(compiler::CodeAssemblerState* state_, TNode<Name> p_o, TNode<Uint32T> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Name, Uint32T> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Name, Uint32T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Name, Uint32T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<Name> tmp0;
    TNode<Uint32T> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 123);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(Name::kHashFieldOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<Name> tmp3;
    TNode<Uint32T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Name> tmp5;
    TNode<Uint32T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Int32T> LoadStringLength_515(compiler::CodeAssemblerState* state_, TNode<String> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<String> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<String, Int32T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<String, Int32T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<String> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 141);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(String::kLengthOffset);
    USE(tmp1);
    TNode<Int32T>tmp2 = CodeStubAssembler(state_).LoadReference<Int32T>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<String> tmp3;
    TNode<Int32T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<String> tmp5;
    TNode<Int32T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Int32T>{tmp6};
}

void StoreStringLength_516(compiler::CodeAssemblerState* state_, TNode<String> p_o, TNode<Int32T> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<String, Int32T> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<String, Int32T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<String, Int32T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<String> tmp0;
    TNode<Int32T> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 141);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(String::kLengthOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<String> tmp3;
    TNode<Int32T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<String> tmp5;
    TNode<Int32T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Int32T> LoadSymbolFlags_517(compiler::CodeAssemblerState* state_, TNode<Symbol> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Symbol> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Symbol, Int32T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Symbol, Int32T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<Symbol> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 131);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(Symbol::kFlagsOffset);
    USE(tmp1);
    TNode<Int32T>tmp2 = CodeStubAssembler(state_).LoadReference<Int32T>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<Symbol> tmp3;
    TNode<Int32T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Symbol> tmp5;
    TNode<Int32T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Int32T>{tmp6};
}

void StoreSymbolFlags_518(compiler::CodeAssemblerState* state_, TNode<Symbol> p_o, TNode<Int32T> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Symbol, Int32T> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Symbol, Int32T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Symbol, Int32T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<Symbol> tmp0;
    TNode<Int32T> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 131);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(Symbol::kFlagsOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<Symbol> tmp3;
    TNode<Int32T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Symbol> tmp5;
    TNode<Int32T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadSymbolName_519(compiler::CodeAssemblerState* state_, TNode<Symbol> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Symbol> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Symbol, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Symbol, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<Symbol> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 132);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(Symbol::kNameOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<Symbol> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Symbol> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreSymbolName_520(compiler::CodeAssemblerState* state_, TNode<Symbol> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Symbol, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Symbol, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Symbol, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<Symbol> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 132);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(Symbol::kNameOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<Symbol> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Symbol> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Float64T> LoadOddballToNumberRaw_521(compiler::CodeAssemblerState* state_, TNode<Oddball> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Oddball> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Oddball, Float64T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Oddball, Float64T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<Oddball> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 109);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(Oddball::kToNumberRawOffset);
    USE(tmp1);
    TNode<Float64T>tmp2 = CodeStubAssembler(state_).LoadReference<Float64T>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<Oddball> tmp3;
    TNode<Float64T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Oddball> tmp5;
    TNode<Float64T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Float64T>{tmp6};
}

void StoreOddballToNumberRaw_522(compiler::CodeAssemblerState* state_, TNode<Oddball> p_o, TNode<Float64T> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Oddball, Float64T> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Oddball, Float64T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Oddball, Float64T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<Oddball> tmp0;
    TNode<Float64T> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 109);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(Oddball::kToNumberRawOffset);
    USE(tmp2);
    TNode<Float64T> tmp3;
    USE(tmp3);
    tmp3 = CodeStubAssembler(state_).Float64SilenceNaN(TNode<Float64T>{tmp1});
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp3);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<Oddball> tmp4;
    TNode<Float64T> tmp5;
    ca_.Bind(&block1, &tmp4, &tmp5);
    ca_.Goto(&block2, tmp4, tmp5);
  }

    TNode<Oddball> tmp6;
    TNode<Float64T> tmp7;
    ca_.Bind(&block2, &tmp6, &tmp7);
}

TNode<String> LoadOddballToString_523(compiler::CodeAssemblerState* state_, TNode<Oddball> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Oddball> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Oddball, String> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Oddball, String> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<Oddball> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 110);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(Oddball::kToStringOffset);
    USE(tmp1);
    TNode<String>tmp2 = CodeStubAssembler(state_).LoadReference<String>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<Oddball> tmp3;
    TNode<String> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Oddball> tmp5;
    TNode<String> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<String>{tmp6};
}

void StoreOddballToString_524(compiler::CodeAssemblerState* state_, TNode<Oddball> p_o, TNode<String> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Oddball, String> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Oddball, String> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Oddball, String> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<Oddball> tmp0;
    TNode<String> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 110);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(Oddball::kToStringOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<Oddball> tmp3;
    TNode<String> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Oddball> tmp5;
    TNode<String> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Number> LoadOddballToNumber_525(compiler::CodeAssemblerState* state_, TNode<Oddball> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Oddball> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Oddball, Number> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Oddball, Number> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<Oddball> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 111);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(Oddball::kToNumberOffset);
    USE(tmp1);
    TNode<Number>tmp2 = CodeStubAssembler(state_).LoadReference<Number>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<Oddball> tmp3;
    TNode<Number> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Oddball> tmp5;
    TNode<Number> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Number>{tmp6};
}

void StoreOddballToNumber_526(compiler::CodeAssemblerState* state_, TNode<Oddball> p_o, TNode<Number> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Oddball, Number> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Oddball, Number> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Oddball, Number> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<Oddball> tmp0;
    TNode<Number> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 111);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(Oddball::kToNumberOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<Oddball> tmp3;
    TNode<Number> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Oddball> tmp5;
    TNode<Number> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<String> LoadOddballTypeOf_527(compiler::CodeAssemblerState* state_, TNode<Oddball> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Oddball> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Oddball, String> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Oddball, String> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<Oddball> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 112);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(Oddball::kTypeOfOffset);
    USE(tmp1);
    TNode<String>tmp2 = CodeStubAssembler(state_).LoadReference<String>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<Oddball> tmp3;
    TNode<String> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Oddball> tmp5;
    TNode<String> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<String>{tmp6};
}

void StoreOddballTypeOf_528(compiler::CodeAssemblerState* state_, TNode<Oddball> p_o, TNode<String> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Oddball, String> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Oddball, String> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Oddball, String> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<Oddball> tmp0;
    TNode<String> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 112);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(Oddball::kTypeOfOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<Oddball> tmp3;
    TNode<String> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Oddball> tmp5;
    TNode<String> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Smi> LoadOddballKind_529(compiler::CodeAssemblerState* state_, TNode<Oddball> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Oddball> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Oddball, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Oddball, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<Oddball> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 113);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(Oddball::kKindOffset);
    USE(tmp1);
    TNode<Smi>tmp2 = CodeStubAssembler(state_).LoadReference<Smi>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<Oddball> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Oddball> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Smi>{tmp6};
}

void StoreOddballKind_530(compiler::CodeAssemblerState* state_, TNode<Oddball> p_o, TNode<Smi> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Oddball, Smi> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Oddball, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Oddball, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<Oddball> tmp0;
    TNode<Smi> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 113);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(Oddball::kKindOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<Oddball> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Oddball> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Smi> LoadFixedArrayBaseLength_531(compiler::CodeAssemblerState* state_, TNode<FixedArrayBase> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<FixedArrayBase> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FixedArrayBase, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FixedArrayBase, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<FixedArrayBase> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 222);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(FixedArrayBase::kLengthOffset);
    USE(tmp1);
    TNode<Smi>tmp2 = CodeStubAssembler(state_).LoadReference<Smi>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<FixedArrayBase> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<FixedArrayBase> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Smi>{tmp6};
}

void StoreFixedArrayBaseLength_532(compiler::CodeAssemblerState* state_, TNode<FixedArrayBase> p_o, TNode<Smi> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<FixedArrayBase, Smi> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FixedArrayBase, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FixedArrayBase, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<FixedArrayBase> tmp0;
    TNode<Smi> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 222);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(FixedArrayBase::kLengthOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<FixedArrayBase> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<FixedArrayBase> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<String> LoadConsStringFirst_533(compiler::CodeAssemblerState* state_, TNode<ConsString> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<ConsString> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<ConsString, String> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<ConsString, String> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<ConsString> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 146);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(ConsString::kFirstOffset);
    USE(tmp1);
    TNode<String>tmp2 = CodeStubAssembler(state_).LoadReference<String>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<ConsString> tmp3;
    TNode<String> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<ConsString> tmp5;
    TNode<String> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<String>{tmp6};
}

void StoreConsStringFirst_534(compiler::CodeAssemblerState* state_, TNode<ConsString> p_o, TNode<String> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<ConsString, String> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<ConsString, String> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<ConsString, String> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<ConsString> tmp0;
    TNode<String> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 146);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(ConsString::kFirstOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<ConsString> tmp3;
    TNode<String> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<ConsString> tmp5;
    TNode<String> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<String> LoadConsStringSecond_535(compiler::CodeAssemblerState* state_, TNode<ConsString> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<ConsString> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<ConsString, String> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<ConsString, String> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<ConsString> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 147);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(ConsString::kSecondOffset);
    USE(tmp1);
    TNode<String>tmp2 = CodeStubAssembler(state_).LoadReference<String>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<ConsString> tmp3;
    TNode<String> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<ConsString> tmp5;
    TNode<String> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<String>{tmp6};
}

void StoreConsStringSecond_536(compiler::CodeAssemblerState* state_, TNode<ConsString> p_o, TNode<String> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<ConsString, String> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<ConsString, String> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<ConsString, String> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<ConsString> tmp0;
    TNode<String> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 147);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(ConsString::kSecondOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<ConsString> tmp3;
    TNode<String> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<ConsString> tmp5;
    TNode<String> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<RawPtrT> LoadExternalStringResource_537(compiler::CodeAssemblerState* state_, TNode<ExternalString> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<ExternalString> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<ExternalString, RawPtrT> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<ExternalString, RawPtrT> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<ExternalString> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 152);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(ExternalString::kResourceOffset);
    USE(tmp1);
    TNode<RawPtrT>tmp2 = CodeStubAssembler(state_).LoadReference<RawPtrT>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<ExternalString> tmp3;
    TNode<RawPtrT> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<ExternalString> tmp5;
    TNode<RawPtrT> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<RawPtrT>{tmp6};
}

void StoreExternalStringResource_538(compiler::CodeAssemblerState* state_, TNode<ExternalString> p_o, TNode<RawPtrT> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<ExternalString, RawPtrT> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<ExternalString, RawPtrT> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<ExternalString, RawPtrT> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<ExternalString> tmp0;
    TNode<RawPtrT> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 152);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(ExternalString::kResourceOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<ExternalString> tmp3;
    TNode<RawPtrT> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<ExternalString> tmp5;
    TNode<RawPtrT> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<RawPtrT> LoadExternalStringResourceData_539(compiler::CodeAssemblerState* state_, TNode<ExternalString> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<ExternalString> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<ExternalString, RawPtrT> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<ExternalString, RawPtrT> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<ExternalString> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 153);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(ExternalString::kResourceDataOffset);
    USE(tmp1);
    TNode<RawPtrT>tmp2 = CodeStubAssembler(state_).LoadReference<RawPtrT>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<ExternalString> tmp3;
    TNode<RawPtrT> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<ExternalString> tmp5;
    TNode<RawPtrT> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<RawPtrT>{tmp6};
}

void StoreExternalStringResourceData_540(compiler::CodeAssemblerState* state_, TNode<ExternalString> p_o, TNode<RawPtrT> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<ExternalString, RawPtrT> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<ExternalString, RawPtrT> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<ExternalString, RawPtrT> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<ExternalString> tmp0;
    TNode<RawPtrT> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 153);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(ExternalString::kResourceDataOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<ExternalString> tmp3;
    TNode<RawPtrT> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<ExternalString> tmp5;
    TNode<RawPtrT> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<String> LoadSlicedStringParent_541(compiler::CodeAssemblerState* state_, TNode<SlicedString> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<SlicedString> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SlicedString, String> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SlicedString, String> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<SlicedString> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 179);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(SlicedString::kParentOffset);
    USE(tmp1);
    TNode<String>tmp2 = CodeStubAssembler(state_).LoadReference<String>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<SlicedString> tmp3;
    TNode<String> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<SlicedString> tmp5;
    TNode<String> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<String>{tmp6};
}

void StoreSlicedStringParent_542(compiler::CodeAssemblerState* state_, TNode<SlicedString> p_o, TNode<String> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<SlicedString, String> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SlicedString, String> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SlicedString, String> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<SlicedString> tmp0;
    TNode<String> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 179);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(SlicedString::kParentOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<SlicedString> tmp3;
    TNode<String> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<SlicedString> tmp5;
    TNode<String> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Smi> LoadSlicedStringOffset_543(compiler::CodeAssemblerState* state_, TNode<SlicedString> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<SlicedString> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SlicedString, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SlicedString, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<SlicedString> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 180);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(SlicedString::kOffsetOffset);
    USE(tmp1);
    TNode<Smi>tmp2 = CodeStubAssembler(state_).LoadReference<Smi>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<SlicedString> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<SlicedString> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Smi>{tmp6};
}

void StoreSlicedStringOffset_544(compiler::CodeAssemblerState* state_, TNode<SlicedString> p_o, TNode<Smi> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<SlicedString, Smi> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SlicedString, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SlicedString, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<SlicedString> tmp0;
    TNode<Smi> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 180);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(SlicedString::kOffsetOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<SlicedString> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<SlicedString> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<String> LoadThinStringActual_545(compiler::CodeAssemblerState* state_, TNode<ThinString> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<ThinString> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<ThinString, String> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<ThinString, String> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<ThinString> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 185);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(ThinString::kActualOffset);
    USE(tmp1);
    TNode<String>tmp2 = CodeStubAssembler(state_).LoadReference<String>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<ThinString> tmp3;
    TNode<String> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<ThinString> tmp5;
    TNode<String> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<String>{tmp6};
}

void StoreThinStringActual_546(compiler::CodeAssemblerState* state_, TNode<ThinString> p_o, TNode<String> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<ThinString, String> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<ThinString, String> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<ThinString, String> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<ThinString> tmp0;
    TNode<String> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 185);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(ThinString::kActualOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<ThinString> tmp3;
    TNode<String> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<ThinString> tmp5;
    TNode<String> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadTuple2Value1_547(compiler::CodeAssemblerState* state_, TNode<Tuple2> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Tuple2> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Tuple2, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Tuple2, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<Tuple2> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 202);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(Tuple2::kValue1Offset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<Tuple2> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Tuple2> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreTuple2Value1_548(compiler::CodeAssemblerState* state_, TNode<Tuple2> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Tuple2, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Tuple2, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Tuple2, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<Tuple2> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 202);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(Tuple2::kValue1Offset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<Tuple2> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Tuple2> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadTuple2Value2_549(compiler::CodeAssemblerState* state_, TNode<Tuple2> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Tuple2> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Tuple2, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Tuple2, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<Tuple2> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 203);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(Tuple2::kValue2Offset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<Tuple2> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Tuple2> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreTuple2Value2_550(compiler::CodeAssemblerState* state_, TNode<Tuple2> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Tuple2, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Tuple2, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Tuple2, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<Tuple2> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 203);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(Tuple2::kValue2Offset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<Tuple2> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Tuple2> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadTuple3Value3_551(compiler::CodeAssemblerState* state_, TNode<Tuple3> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Tuple3> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Tuple3, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Tuple3, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<Tuple3> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 211);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(Tuple3::kValue3Offset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<Tuple3> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Tuple3> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreTuple3Value3_552(compiler::CodeAssemblerState* state_, TNode<Tuple3> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Tuple3, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Tuple3, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Tuple3, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<Tuple3> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 211);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(Tuple3::kValue3Offset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<Tuple3> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Tuple3> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Smi> LoadWeakFixedArrayLength_553(compiler::CodeAssemblerState* state_, TNode<WeakFixedArray> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WeakFixedArray> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WeakFixedArray, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WeakFixedArray, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<WeakFixedArray> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 231);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(WeakFixedArray::kLengthOffset);
    USE(tmp1);
    TNode<Smi>tmp2 = CodeStubAssembler(state_).LoadReference<Smi>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<WeakFixedArray> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WeakFixedArray> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Smi>{tmp6};
}

void StoreWeakFixedArrayLength_554(compiler::CodeAssemblerState* state_, TNode<WeakFixedArray> p_o, TNode<Smi> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WeakFixedArray, Smi> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WeakFixedArray, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WeakFixedArray, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<WeakFixedArray> tmp0;
    TNode<Smi> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 231);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(WeakFixedArray::kLengthOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<WeakFixedArray> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WeakFixedArray> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Uint8T> LoadMapInstanceSizeInWords_555(compiler::CodeAssemblerState* state_, TNode<Map> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Map> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Map, Uint8T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Map, Uint8T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<Map> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 247);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(Map::kInstanceSizeInWordsOffset);
    USE(tmp1);
    TNode<Uint8T>tmp2 = CodeStubAssembler(state_).LoadReference<Uint8T>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<Map> tmp3;
    TNode<Uint8T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Map> tmp5;
    TNode<Uint8T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Uint8T>{tmp6};
}

void StoreMapInstanceSizeInWords_556(compiler::CodeAssemblerState* state_, TNode<Map> p_o, TNode<Uint8T> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Map, Uint8T> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Map, Uint8T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Map, Uint8T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<Map> tmp0;
    TNode<Uint8T> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 247);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(Map::kInstanceSizeInWordsOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<Map> tmp3;
    TNode<Uint8T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Map> tmp5;
    TNode<Uint8T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Uint8T> LoadMapInObjectPropertiesStartOrConstructorFunctionIndex_557(compiler::CodeAssemblerState* state_, TNode<Map> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Map> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Map, Uint8T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Map, Uint8T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<Map> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 248);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(Map::kInObjectPropertiesStartOrConstructorFunctionIndexOffset);
    USE(tmp1);
    TNode<Uint8T>tmp2 = CodeStubAssembler(state_).LoadReference<Uint8T>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<Map> tmp3;
    TNode<Uint8T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Map> tmp5;
    TNode<Uint8T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Uint8T>{tmp6};
}

void StoreMapInObjectPropertiesStartOrConstructorFunctionIndex_558(compiler::CodeAssemblerState* state_, TNode<Map> p_o, TNode<Uint8T> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Map, Uint8T> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Map, Uint8T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Map, Uint8T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<Map> tmp0;
    TNode<Uint8T> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 248);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(Map::kInObjectPropertiesStartOrConstructorFunctionIndexOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<Map> tmp3;
    TNode<Uint8T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Map> tmp5;
    TNode<Uint8T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Uint8T> LoadMapUsedOrUnusedInstanceSizeInWords_559(compiler::CodeAssemblerState* state_, TNode<Map> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Map> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Map, Uint8T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Map, Uint8T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<Map> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 249);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(Map::kUsedOrUnusedInstanceSizeInWordsOffset);
    USE(tmp1);
    TNode<Uint8T>tmp2 = CodeStubAssembler(state_).LoadReference<Uint8T>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<Map> tmp3;
    TNode<Uint8T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Map> tmp5;
    TNode<Uint8T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Uint8T>{tmp6};
}

void StoreMapUsedOrUnusedInstanceSizeInWords_560(compiler::CodeAssemblerState* state_, TNode<Map> p_o, TNode<Uint8T> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Map, Uint8T> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Map, Uint8T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Map, Uint8T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<Map> tmp0;
    TNode<Uint8T> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 249);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(Map::kUsedOrUnusedInstanceSizeInWordsOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<Map> tmp3;
    TNode<Uint8T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Map> tmp5;
    TNode<Uint8T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Uint8T> LoadMapVisitorId_561(compiler::CodeAssemblerState* state_, TNode<Map> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Map> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Map, Uint8T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Map, Uint8T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<Map> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 250);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(Map::kVisitorIdOffset);
    USE(tmp1);
    TNode<Uint8T>tmp2 = CodeStubAssembler(state_).LoadReference<Uint8T>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<Map> tmp3;
    TNode<Uint8T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Map> tmp5;
    TNode<Uint8T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Uint8T>{tmp6};
}

void StoreMapVisitorId_562(compiler::CodeAssemblerState* state_, TNode<Map> p_o, TNode<Uint8T> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Map, Uint8T> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Map, Uint8T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Map, Uint8T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<Map> tmp0;
    TNode<Uint8T> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 250);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(Map::kVisitorIdOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<Map> tmp3;
    TNode<Uint8T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Map> tmp5;
    TNode<Uint8T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Uint16T> LoadMapInstanceType_563(compiler::CodeAssemblerState* state_, TNode<Map> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Map> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Map, Uint16T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Map, Uint16T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<Map> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 251);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(Map::kInstanceTypeOffset);
    USE(tmp1);
    TNode<Uint16T>tmp2 = CodeStubAssembler(state_).LoadReference<Uint16T>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<Map> tmp3;
    TNode<Uint16T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Map> tmp5;
    TNode<Uint16T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Uint16T>{tmp6};
}

void StoreMapInstanceType_564(compiler::CodeAssemblerState* state_, TNode<Map> p_o, TNode<Uint16T> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Map, Uint16T> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Map, Uint16T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Map, Uint16T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<Map> tmp0;
    TNode<Uint16T> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 251);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(Map::kInstanceTypeOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<Map> tmp3;
    TNode<Uint16T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Map> tmp5;
    TNode<Uint16T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Uint8T> LoadMapBitField_565(compiler::CodeAssemblerState* state_, TNode<Map> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Map> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Map, Uint8T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Map, Uint8T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<Map> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 252);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(Map::kBitFieldOffset);
    USE(tmp1);
    TNode<Uint8T>tmp2 = CodeStubAssembler(state_).LoadReference<Uint8T>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<Map> tmp3;
    TNode<Uint8T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Map> tmp5;
    TNode<Uint8T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Uint8T>{tmp6};
}

void StoreMapBitField_566(compiler::CodeAssemblerState* state_, TNode<Map> p_o, TNode<Uint8T> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Map, Uint8T> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Map, Uint8T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Map, Uint8T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<Map> tmp0;
    TNode<Uint8T> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 252);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(Map::kBitFieldOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<Map> tmp3;
    TNode<Uint8T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Map> tmp5;
    TNode<Uint8T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Uint8T> LoadMapBitField2_567(compiler::CodeAssemblerState* state_, TNode<Map> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Map> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Map, Uint8T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Map, Uint8T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<Map> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 253);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(Map::kBitField2Offset);
    USE(tmp1);
    TNode<Uint8T>tmp2 = CodeStubAssembler(state_).LoadReference<Uint8T>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<Map> tmp3;
    TNode<Uint8T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Map> tmp5;
    TNode<Uint8T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Uint8T>{tmp6};
}

void StoreMapBitField2_568(compiler::CodeAssemblerState* state_, TNode<Map> p_o, TNode<Uint8T> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Map, Uint8T> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Map, Uint8T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Map, Uint8T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<Map> tmp0;
    TNode<Uint8T> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 253);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(Map::kBitField2Offset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<Map> tmp3;
    TNode<Uint8T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Map> tmp5;
    TNode<Uint8T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Uint32T> LoadMapBitField3_569(compiler::CodeAssemblerState* state_, TNode<Map> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Map> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Map, Uint32T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Map, Uint32T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<Map> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 254);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(Map::kBitField3Offset);
    USE(tmp1);
    TNode<Uint32T>tmp2 = CodeStubAssembler(state_).LoadReference<Uint32T>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<Map> tmp3;
    TNode<Uint32T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Map> tmp5;
    TNode<Uint32T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Uint32T>{tmp6};
}

void StoreMapBitField3_570(compiler::CodeAssemblerState* state_, TNode<Map> p_o, TNode<Uint32T> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Map, Uint32T> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Map, Uint32T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Map, Uint32T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<Map> tmp0;
    TNode<Uint32T> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 254);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(Map::kBitField3Offset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<Map> tmp3;
    TNode<Uint32T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Map> tmp5;
    TNode<Uint32T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Uint32T> LoadMapOptionalPadding_571(compiler::CodeAssemblerState* state_, TNode<Map> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Map> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Map, Uint32T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Map, Uint32T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<Map> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 256);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(Map::kOptionalPaddingOffset);
    USE(tmp1);
    TNode<Uint32T>tmp2 = CodeStubAssembler(state_).LoadReference<Uint32T>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<Map> tmp3;
    TNode<Uint32T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Map> tmp5;
    TNode<Uint32T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Uint32T>{tmp6};
}

void StoreMapOptionalPadding_572(compiler::CodeAssemblerState* state_, TNode<Map> p_o, TNode<Uint32T> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Map, Uint32T> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Map, Uint32T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Map, Uint32T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<Map> tmp0;
    TNode<Uint32T> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 256);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(Map::kOptionalPaddingOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<Map> tmp3;
    TNode<Uint32T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Map> tmp5;
    TNode<Uint32T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<HeapObject> LoadMapPrototype_573(compiler::CodeAssemblerState* state_, TNode<Map> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Map> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Map, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Map, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<Map> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 259);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(Map::kPrototypeOffset);
    USE(tmp1);
    TNode<HeapObject>tmp2 = CodeStubAssembler(state_).LoadReference<HeapObject>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<Map> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Map> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<HeapObject>{tmp6};
}

void StoreMapPrototype_574(compiler::CodeAssemblerState* state_, TNode<Map> p_o, TNode<HeapObject> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Map, HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Map, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Map, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<Map> tmp0;
    TNode<HeapObject> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 259);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(Map::kPrototypeOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<Map> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Map> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadMapConstructorOrBackPointer_575(compiler::CodeAssemblerState* state_, TNode<Map> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Map> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Map, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Map, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<Map> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 260);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(Map::kConstructorOrBackPointerOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<Map> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Map> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreMapConstructorOrBackPointer_576(compiler::CodeAssemblerState* state_, TNode<Map> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Map, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Map, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Map, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<Map> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 260);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(Map::kConstructorOrBackPointerOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<Map> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Map> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<DescriptorArray> LoadMapInstanceDescriptors_577(compiler::CodeAssemblerState* state_, TNode<Map> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Map> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Map, DescriptorArray> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Map, DescriptorArray> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<Map> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 261);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(Map::kInstanceDescriptorsOffset);
    USE(tmp1);
    TNode<DescriptorArray>tmp2 = CodeStubAssembler(state_).LoadReference<DescriptorArray>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<Map> tmp3;
    TNode<DescriptorArray> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Map> tmp5;
    TNode<DescriptorArray> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<DescriptorArray>{tmp6};
}

void StoreMapInstanceDescriptors_578(compiler::CodeAssemblerState* state_, TNode<Map> p_o, TNode<DescriptorArray> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Map, DescriptorArray> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Map, DescriptorArray> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Map, DescriptorArray> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<Map> tmp0;
    TNode<DescriptorArray> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 261);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(Map::kInstanceDescriptorsOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<Map> tmp3;
    TNode<DescriptorArray> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Map> tmp5;
    TNode<DescriptorArray> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<LayoutDescriptor> LoadMapLayoutDescriptor_579(compiler::CodeAssemblerState* state_, TNode<Map> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Map> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Map, LayoutDescriptor> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Map, LayoutDescriptor> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<Map> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 262);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(Map::kLayoutDescriptorOffset);
    USE(tmp1);
    TNode<LayoutDescriptor>tmp2 = CodeStubAssembler(state_).LoadReference<LayoutDescriptor>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<Map> tmp3;
    TNode<LayoutDescriptor> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Map> tmp5;
    TNode<LayoutDescriptor> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<LayoutDescriptor>{tmp6};
}

void StoreMapLayoutDescriptor_580(compiler::CodeAssemblerState* state_, TNode<Map> p_o, TNode<LayoutDescriptor> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Map, LayoutDescriptor> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Map, LayoutDescriptor> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Map, LayoutDescriptor> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<Map> tmp0;
    TNode<LayoutDescriptor> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 262);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(Map::kLayoutDescriptorOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<Map> tmp3;
    TNode<LayoutDescriptor> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Map> tmp5;
    TNode<LayoutDescriptor> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<WeakFixedArray> LoadMapDependentCode_581(compiler::CodeAssemblerState* state_, TNode<Map> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Map> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Map, WeakFixedArray> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Map, WeakFixedArray> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<Map> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 264);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(Map::kDependentCodeOffset);
    USE(tmp1);
    TNode<WeakFixedArray>tmp2 = CodeStubAssembler(state_).LoadReference<WeakFixedArray>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<Map> tmp3;
    TNode<WeakFixedArray> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Map> tmp5;
    TNode<WeakFixedArray> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<WeakFixedArray>{tmp6};
}

void StoreMapDependentCode_582(compiler::CodeAssemblerState* state_, TNode<Map> p_o, TNode<WeakFixedArray> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Map, WeakFixedArray> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Map, WeakFixedArray> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Map, WeakFixedArray> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<Map> tmp0;
    TNode<WeakFixedArray> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 264);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(Map::kDependentCodeOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<Map> tmp3;
    TNode<WeakFixedArray> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Map> tmp5;
    TNode<WeakFixedArray> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadMapPrototypeValidityCell_583(compiler::CodeAssemblerState* state_, TNode<Map> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Map> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Map, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Map, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<Map> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 265);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(Map::kPrototypeValidityCellOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<Map> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Map> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreMapPrototypeValidityCell_584(compiler::CodeAssemblerState* state_, TNode<Map> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Map, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Map, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Map, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<Map> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 265);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(Map::kPrototypeValidityCellOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<Map> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Map> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadMapTransitionsOrPrototypeInfo_585(compiler::CodeAssemblerState* state_, TNode<Map> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Map> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Map, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Map, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<Map> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 268);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(Map::kTransitionsOrPrototypeInfoOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<Map> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Map> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreMapTransitionsOrPrototypeInfo_586(compiler::CodeAssemblerState* state_, TNode<Map> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Map, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Map, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Map, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<Map> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 268);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(Map::kTransitionsOrPrototypeInfoOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<Map> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Map> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<FixedArray> LoadEnumCacheKeys_587(compiler::CodeAssemblerState* state_, TNode<EnumCache> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<EnumCache> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<EnumCache, FixedArray> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<EnumCache, FixedArray> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<EnumCache> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 275);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(EnumCache::kKeysOffset);
    USE(tmp1);
    TNode<FixedArray>tmp2 = CodeStubAssembler(state_).LoadReference<FixedArray>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<EnumCache> tmp3;
    TNode<FixedArray> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<EnumCache> tmp5;
    TNode<FixedArray> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<FixedArray>{tmp6};
}

void StoreEnumCacheKeys_588(compiler::CodeAssemblerState* state_, TNode<EnumCache> p_o, TNode<FixedArray> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<EnumCache, FixedArray> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<EnumCache, FixedArray> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<EnumCache, FixedArray> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<EnumCache> tmp0;
    TNode<FixedArray> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 275);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(EnumCache::kKeysOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<EnumCache> tmp3;
    TNode<FixedArray> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<EnumCache> tmp5;
    TNode<FixedArray> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<FixedArray> LoadEnumCacheIndices_589(compiler::CodeAssemblerState* state_, TNode<EnumCache> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<EnumCache> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<EnumCache, FixedArray> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<EnumCache, FixedArray> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<EnumCache> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 276);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(EnumCache::kIndicesOffset);
    USE(tmp1);
    TNode<FixedArray>tmp2 = CodeStubAssembler(state_).LoadReference<FixedArray>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<EnumCache> tmp3;
    TNode<FixedArray> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<EnumCache> tmp5;
    TNode<FixedArray> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<FixedArray>{tmp6};
}

void StoreEnumCacheIndices_590(compiler::CodeAssemblerState* state_, TNode<EnumCache> p_o, TNode<FixedArray> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<EnumCache, FixedArray> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<EnumCache, FixedArray> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<EnumCache, FixedArray> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<EnumCache> tmp0;
    TNode<FixedArray> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 276);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(EnumCache::kIndicesOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<EnumCache> tmp3;
    TNode<FixedArray> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<EnumCache> tmp5;
    TNode<FixedArray> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<ByteArray> LoadSourcePositionTableWithFrameCacheSourcePositionTable_591(compiler::CodeAssemblerState* state_, TNode<SourcePositionTableWithFrameCache> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<SourcePositionTableWithFrameCache> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourcePositionTableWithFrameCache, ByteArray> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourcePositionTableWithFrameCache, ByteArray> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<SourcePositionTableWithFrameCache> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 282);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(SourcePositionTableWithFrameCache::kSourcePositionTableOffset);
    USE(tmp1);
    TNode<ByteArray>tmp2 = CodeStubAssembler(state_).LoadReference<ByteArray>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<SourcePositionTableWithFrameCache> tmp3;
    TNode<ByteArray> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<SourcePositionTableWithFrameCache> tmp5;
    TNode<ByteArray> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<ByteArray>{tmp6};
}

void StoreSourcePositionTableWithFrameCacheSourcePositionTable_592(compiler::CodeAssemblerState* state_, TNode<SourcePositionTableWithFrameCache> p_o, TNode<ByteArray> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<SourcePositionTableWithFrameCache, ByteArray> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourcePositionTableWithFrameCache, ByteArray> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourcePositionTableWithFrameCache, ByteArray> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<SourcePositionTableWithFrameCache> tmp0;
    TNode<ByteArray> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 282);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(SourcePositionTableWithFrameCache::kSourcePositionTableOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<SourcePositionTableWithFrameCache> tmp3;
    TNode<ByteArray> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<SourcePositionTableWithFrameCache> tmp5;
    TNode<ByteArray> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadSourcePositionTableWithFrameCacheStackFrameCache_593(compiler::CodeAssemblerState* state_, TNode<SourcePositionTableWithFrameCache> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<SourcePositionTableWithFrameCache> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourcePositionTableWithFrameCache, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourcePositionTableWithFrameCache, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<SourcePositionTableWithFrameCache> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 283);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(SourcePositionTableWithFrameCache::kStackFrameCacheOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<SourcePositionTableWithFrameCache> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<SourcePositionTableWithFrameCache> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreSourcePositionTableWithFrameCacheStackFrameCache_594(compiler::CodeAssemblerState* state_, TNode<SourcePositionTableWithFrameCache> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<SourcePositionTableWithFrameCache, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourcePositionTableWithFrameCache, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourcePositionTableWithFrameCache, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<SourcePositionTableWithFrameCache> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 283);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(SourcePositionTableWithFrameCache::kStackFrameCacheOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<SourcePositionTableWithFrameCache> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<SourcePositionTableWithFrameCache> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Uint16T> LoadDescriptorArrayNumberOfAllDescriptors_595(compiler::CodeAssemblerState* state_, TNode<DescriptorArray> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<DescriptorArray> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<DescriptorArray, Uint16T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<DescriptorArray, Uint16T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<DescriptorArray> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 290);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(DescriptorArray::kNumberOfAllDescriptorsOffset);
    USE(tmp1);
    TNode<Uint16T>tmp2 = CodeStubAssembler(state_).LoadReference<Uint16T>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<DescriptorArray> tmp3;
    TNode<Uint16T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<DescriptorArray> tmp5;
    TNode<Uint16T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Uint16T>{tmp6};
}

void StoreDescriptorArrayNumberOfAllDescriptors_596(compiler::CodeAssemblerState* state_, TNode<DescriptorArray> p_o, TNode<Uint16T> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<DescriptorArray, Uint16T> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<DescriptorArray, Uint16T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<DescriptorArray, Uint16T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<DescriptorArray> tmp0;
    TNode<Uint16T> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 290);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(DescriptorArray::kNumberOfAllDescriptorsOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<DescriptorArray> tmp3;
    TNode<Uint16T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<DescriptorArray> tmp5;
    TNode<Uint16T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Uint16T> LoadDescriptorArrayNumberOfDescriptors_597(compiler::CodeAssemblerState* state_, TNode<DescriptorArray> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<DescriptorArray> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<DescriptorArray, Uint16T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<DescriptorArray, Uint16T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<DescriptorArray> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 291);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(DescriptorArray::kNumberOfDescriptorsOffset);
    USE(tmp1);
    TNode<Uint16T>tmp2 = CodeStubAssembler(state_).LoadReference<Uint16T>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<DescriptorArray> tmp3;
    TNode<Uint16T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<DescriptorArray> tmp5;
    TNode<Uint16T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Uint16T>{tmp6};
}

void StoreDescriptorArrayNumberOfDescriptors_598(compiler::CodeAssemblerState* state_, TNode<DescriptorArray> p_o, TNode<Uint16T> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<DescriptorArray, Uint16T> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<DescriptorArray, Uint16T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<DescriptorArray, Uint16T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<DescriptorArray> tmp0;
    TNode<Uint16T> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 291);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(DescriptorArray::kNumberOfDescriptorsOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<DescriptorArray> tmp3;
    TNode<Uint16T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<DescriptorArray> tmp5;
    TNode<Uint16T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Uint16T> LoadDescriptorArrayRawNumberOfMarkedDescriptors_599(compiler::CodeAssemblerState* state_, TNode<DescriptorArray> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<DescriptorArray> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<DescriptorArray, Uint16T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<DescriptorArray, Uint16T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<DescriptorArray> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 292);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(DescriptorArray::kRawNumberOfMarkedDescriptorsOffset);
    USE(tmp1);
    TNode<Uint16T>tmp2 = CodeStubAssembler(state_).LoadReference<Uint16T>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<DescriptorArray> tmp3;
    TNode<Uint16T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<DescriptorArray> tmp5;
    TNode<Uint16T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Uint16T>{tmp6};
}

void StoreDescriptorArrayRawNumberOfMarkedDescriptors_600(compiler::CodeAssemblerState* state_, TNode<DescriptorArray> p_o, TNode<Uint16T> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<DescriptorArray, Uint16T> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<DescriptorArray, Uint16T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<DescriptorArray, Uint16T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<DescriptorArray> tmp0;
    TNode<Uint16T> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 292);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(DescriptorArray::kRawNumberOfMarkedDescriptorsOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<DescriptorArray> tmp3;
    TNode<Uint16T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<DescriptorArray> tmp5;
    TNode<Uint16T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Uint16T> LoadDescriptorArrayFiller16Bits_601(compiler::CodeAssemblerState* state_, TNode<DescriptorArray> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<DescriptorArray> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<DescriptorArray, Uint16T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<DescriptorArray, Uint16T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<DescriptorArray> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 293);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(DescriptorArray::kFiller16BitsOffset);
    USE(tmp1);
    TNode<Uint16T>tmp2 = CodeStubAssembler(state_).LoadReference<Uint16T>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<DescriptorArray> tmp3;
    TNode<Uint16T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<DescriptorArray> tmp5;
    TNode<Uint16T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Uint16T>{tmp6};
}

void StoreDescriptorArrayFiller16Bits_602(compiler::CodeAssemblerState* state_, TNode<DescriptorArray> p_o, TNode<Uint16T> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<DescriptorArray, Uint16T> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<DescriptorArray, Uint16T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<DescriptorArray, Uint16T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<DescriptorArray> tmp0;
    TNode<Uint16T> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 293);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(DescriptorArray::kFiller16BitsOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<DescriptorArray> tmp3;
    TNode<Uint16T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<DescriptorArray> tmp5;
    TNode<Uint16T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<EnumCache> LoadDescriptorArrayEnumCache_603(compiler::CodeAssemblerState* state_, TNode<DescriptorArray> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<DescriptorArray> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<DescriptorArray, EnumCache> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<DescriptorArray, EnumCache> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<DescriptorArray> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 294);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(DescriptorArray::kEnumCacheOffset);
    USE(tmp1);
    TNode<EnumCache>tmp2 = CodeStubAssembler(state_).LoadReference<EnumCache>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<DescriptorArray> tmp3;
    TNode<EnumCache> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<DescriptorArray> tmp5;
    TNode<EnumCache> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<EnumCache>{tmp6};
}

void StoreDescriptorArrayEnumCache_604(compiler::CodeAssemblerState* state_, TNode<DescriptorArray> p_o, TNode<EnumCache> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<DescriptorArray, EnumCache> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<DescriptorArray, EnumCache> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<DescriptorArray, EnumCache> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<DescriptorArray> tmp0;
    TNode<EnumCache> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 294);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(DescriptorArray::kEnumCacheOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<DescriptorArray> tmp3;
    TNode<EnumCache> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<DescriptorArray> tmp5;
    TNode<EnumCache> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<FixedArrayBase> LoadJSObjectElements_605(compiler::CodeAssemblerState* state_, TNode<JSObject> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSObject, FixedArrayBase> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSObject, FixedArrayBase> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSObject> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 361);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSObject::kElementsOffset);
    USE(tmp1);
    TNode<FixedArrayBase>tmp2 = CodeStubAssembler(state_).LoadReference<FixedArrayBase>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSObject> tmp3;
    TNode<FixedArrayBase> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSObject> tmp5;
    TNode<FixedArrayBase> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<FixedArrayBase>{tmp6};
}

void StoreJSObjectElements_606(compiler::CodeAssemblerState* state_, TNode<JSObject> p_o, TNode<FixedArrayBase> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSObject, FixedArrayBase> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSObject, FixedArrayBase> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSObject, FixedArrayBase> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSObject> tmp0;
    TNode<FixedArrayBase> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 361);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSObject::kElementsOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSObject> tmp3;
    TNode<FixedArrayBase> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSObject> tmp5;
    TNode<FixedArrayBase> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<SharedFunctionInfo> LoadJSFunctionSharedFunctionInfo_607(compiler::CodeAssemblerState* state_, TNode<JSFunction> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSFunction> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSFunction, SharedFunctionInfo> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSFunction, SharedFunctionInfo> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSFunction> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 409);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSFunction::kSharedFunctionInfoOffset);
    USE(tmp1);
    TNode<SharedFunctionInfo>tmp2 = CodeStubAssembler(state_).LoadReference<SharedFunctionInfo>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSFunction> tmp3;
    TNode<SharedFunctionInfo> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSFunction> tmp5;
    TNode<SharedFunctionInfo> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<SharedFunctionInfo>{tmp6};
}

void StoreJSFunctionSharedFunctionInfo_608(compiler::CodeAssemblerState* state_, TNode<JSFunction> p_o, TNode<SharedFunctionInfo> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSFunction, SharedFunctionInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSFunction, SharedFunctionInfo> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSFunction, SharedFunctionInfo> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSFunction> tmp0;
    TNode<SharedFunctionInfo> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 409);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSFunction::kSharedFunctionInfoOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSFunction> tmp3;
    TNode<SharedFunctionInfo> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSFunction> tmp5;
    TNode<SharedFunctionInfo> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Context> LoadJSFunctionContext_609(compiler::CodeAssemblerState* state_, TNode<JSFunction> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSFunction> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSFunction, Context> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSFunction, Context> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSFunction> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 410);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSFunction::kContextOffset);
    USE(tmp1);
    TNode<Context>tmp2 = CodeStubAssembler(state_).LoadReference<Context>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSFunction> tmp3;
    TNode<Context> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSFunction> tmp5;
    TNode<Context> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Context>{tmp6};
}

void StoreJSFunctionContext_610(compiler::CodeAssemblerState* state_, TNode<JSFunction> p_o, TNode<Context> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSFunction, Context> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSFunction, Context> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSFunction, Context> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSFunction> tmp0;
    TNode<Context> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 410);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSFunction::kContextOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSFunction> tmp3;
    TNode<Context> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSFunction> tmp5;
    TNode<Context> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<FeedbackCell> LoadJSFunctionFeedbackCell_611(compiler::CodeAssemblerState* state_, TNode<JSFunction> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSFunction> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSFunction, FeedbackCell> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSFunction, FeedbackCell> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSFunction> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 411);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSFunction::kFeedbackCellOffset);
    USE(tmp1);
    TNode<FeedbackCell>tmp2 = CodeStubAssembler(state_).LoadReference<FeedbackCell>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSFunction> tmp3;
    TNode<FeedbackCell> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSFunction> tmp5;
    TNode<FeedbackCell> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<FeedbackCell>{tmp6};
}

void StoreJSFunctionFeedbackCell_612(compiler::CodeAssemblerState* state_, TNode<JSFunction> p_o, TNode<FeedbackCell> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSFunction, FeedbackCell> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSFunction, FeedbackCell> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSFunction, FeedbackCell> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSFunction> tmp0;
    TNode<FeedbackCell> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 411);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSFunction::kFeedbackCellOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSFunction> tmp3;
    TNode<FeedbackCell> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSFunction> tmp5;
    TNode<FeedbackCell> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Code> LoadJSFunctionCode_613(compiler::CodeAssemblerState* state_, TNode<JSFunction> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSFunction> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSFunction, Code> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSFunction, Code> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSFunction> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 412);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSFunction::kCodeOffset);
    USE(tmp1);
    TNode<Code>tmp2 = CodeStubAssembler(state_).LoadReference<Code>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSFunction> tmp3;
    TNode<Code> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSFunction> tmp5;
    TNode<Code> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Code>{tmp6};
}

void StoreJSFunctionCode_614(compiler::CodeAssemblerState* state_, TNode<JSFunction> p_o, TNode<Code> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSFunction, Code> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSFunction, Code> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSFunction, Code> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSFunction> tmp0;
    TNode<Code> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 412);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSFunction::kCodeOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSFunction> tmp3;
    TNode<Code> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSFunction> tmp5;
    TNode<Code> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<HeapObject> LoadJSFunctionPrototypeOrInitialMap_615(compiler::CodeAssemblerState* state_, TNode<JSFunction> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSFunction> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSFunction, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSFunction, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSFunction> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 415);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSFunction::kPrototypeOrInitialMapOffset);
    USE(tmp1);
    TNode<HeapObject>tmp2 = CodeStubAssembler(state_).LoadReference<HeapObject>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSFunction> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSFunction> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<HeapObject>{tmp6};
}

void StoreJSFunctionPrototypeOrInitialMap_616(compiler::CodeAssemblerState* state_, TNode<JSFunction> p_o, TNode<HeapObject> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSFunction, HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSFunction, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSFunction, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSFunction> tmp0;
    TNode<HeapObject> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 415);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSFunction::kPrototypeOrInitialMapOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSFunction> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSFunction> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<HeapObject> LoadJSProxyTarget_617(compiler::CodeAssemblerState* state_, TNode<JSProxy> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSProxy> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSProxy, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSProxy, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSProxy> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 420);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSProxy::kTargetOffset);
    USE(tmp1);
    TNode<HeapObject>tmp2 = CodeStubAssembler(state_).LoadReference<HeapObject>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSProxy> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSProxy> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<HeapObject>{tmp6};
}

void StoreJSProxyTarget_618(compiler::CodeAssemblerState* state_, TNode<JSProxy> p_o, TNode<HeapObject> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSProxy, HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSProxy, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSProxy, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSProxy> tmp0;
    TNode<HeapObject> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 420);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSProxy::kTargetOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSProxy> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSProxy> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<HeapObject> LoadJSProxyHandler_619(compiler::CodeAssemblerState* state_, TNode<JSProxy> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSProxy> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSProxy, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSProxy, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSProxy> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 421);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSProxy::kHandlerOffset);
    USE(tmp1);
    TNode<HeapObject>tmp2 = CodeStubAssembler(state_).LoadReference<HeapObject>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSProxy> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSProxy> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<HeapObject>{tmp6};
}

void StoreJSProxyHandler_620(compiler::CodeAssemblerState* state_, TNode<JSProxy> p_o, TNode<HeapObject> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSProxy, HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSProxy, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSProxy, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSProxy> tmp0;
    TNode<HeapObject> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 421);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSProxy::kHandlerOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSProxy> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSProxy> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadJSProxyRevocableResultProxy_621(compiler::CodeAssemblerState* state_, TNode<JSProxyRevocableResult> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSProxyRevocableResult> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSProxyRevocableResult, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSProxyRevocableResult, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSProxyRevocableResult> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 427);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSProxyRevocableResult::kProxyOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSProxyRevocableResult> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSProxyRevocableResult> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreJSProxyRevocableResultProxy_622(compiler::CodeAssemblerState* state_, TNode<JSProxyRevocableResult> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSProxyRevocableResult, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSProxyRevocableResult, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSProxyRevocableResult, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSProxyRevocableResult> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 427);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSProxyRevocableResult::kProxyOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSProxyRevocableResult> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSProxyRevocableResult> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadJSProxyRevocableResultRevoke_623(compiler::CodeAssemblerState* state_, TNode<JSProxyRevocableResult> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSProxyRevocableResult> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSProxyRevocableResult, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSProxyRevocableResult, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSProxyRevocableResult> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 428);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSProxyRevocableResult::kRevokeOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSProxyRevocableResult> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSProxyRevocableResult> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreJSProxyRevocableResultRevoke_624(compiler::CodeAssemblerState* state_, TNode<JSProxyRevocableResult> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSProxyRevocableResult, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSProxyRevocableResult, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSProxyRevocableResult, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSProxyRevocableResult> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 428);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSProxyRevocableResult::kRevokeOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSProxyRevocableResult> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSProxyRevocableResult> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadJSGlobalProxyNativeContext_625(compiler::CodeAssemblerState* state_, TNode<JSGlobalProxy> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSGlobalProxy> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSGlobalProxy, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSGlobalProxy, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSGlobalProxy> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 446);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSGlobalProxy::kNativeContextOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSGlobalProxy> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSGlobalProxy> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreJSGlobalProxyNativeContext_626(compiler::CodeAssemblerState* state_, TNode<JSGlobalProxy> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSGlobalProxy, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSGlobalProxy, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSGlobalProxy, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSGlobalProxy> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 446);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSGlobalProxy::kNativeContextOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSGlobalProxy> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSGlobalProxy> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadJSPrimitiveWrapperValue_627(compiler::CodeAssemblerState* state_, TNode<JSPrimitiveWrapper> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSPrimitiveWrapper> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSPrimitiveWrapper, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSPrimitiveWrapper, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSPrimitiveWrapper> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 451);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSPrimitiveWrapper::kValueOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSPrimitiveWrapper> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSPrimitiveWrapper> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreJSPrimitiveWrapperValue_628(compiler::CodeAssemblerState* state_, TNode<JSPrimitiveWrapper> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSPrimitiveWrapper, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSPrimitiveWrapper, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSPrimitiveWrapper, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSPrimitiveWrapper> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 451);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSPrimitiveWrapper::kValueOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSPrimitiveWrapper> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSPrimitiveWrapper> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadJSArgumentsObjectWithLengthLength_629(compiler::CodeAssemblerState* state_, TNode<JSArgumentsObjectWithLength> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSArgumentsObjectWithLength> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSArgumentsObjectWithLength, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSArgumentsObjectWithLength, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSArgumentsObjectWithLength> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 462);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSArgumentsObjectWithLength::kLengthOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSArgumentsObjectWithLength> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSArgumentsObjectWithLength> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreJSArgumentsObjectWithLengthLength_630(compiler::CodeAssemblerState* state_, TNode<JSArgumentsObjectWithLength> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSArgumentsObjectWithLength, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSArgumentsObjectWithLength, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSArgumentsObjectWithLength, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSArgumentsObjectWithLength> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 462);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSArgumentsObjectWithLength::kLengthOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSArgumentsObjectWithLength> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSArgumentsObjectWithLength> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadJSSloppyArgumentsObjectCallee_631(compiler::CodeAssemblerState* state_, TNode<JSSloppyArgumentsObject> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSSloppyArgumentsObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSSloppyArgumentsObject, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSSloppyArgumentsObject, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSSloppyArgumentsObject> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 468);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSSloppyArgumentsObject::kCalleeOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSSloppyArgumentsObject> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSSloppyArgumentsObject> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreJSSloppyArgumentsObjectCallee_632(compiler::CodeAssemblerState* state_, TNode<JSSloppyArgumentsObject> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSSloppyArgumentsObject, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSSloppyArgumentsObject, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSSloppyArgumentsObject, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSSloppyArgumentsObject> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 468);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSSloppyArgumentsObject::kCalleeOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSSloppyArgumentsObject> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSSloppyArgumentsObject> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<JSReceiver> LoadJSArrayIteratorIteratedObject_633(compiler::CodeAssemblerState* state_, TNode<JSArrayIterator> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSArrayIterator> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSArrayIterator, JSReceiver> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSArrayIterator, JSReceiver> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSArrayIterator> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 478);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSArrayIterator::kIteratedObjectOffset);
    USE(tmp1);
    TNode<JSReceiver>tmp2 = CodeStubAssembler(state_).LoadReference<JSReceiver>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSArrayIterator> tmp3;
    TNode<JSReceiver> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSArrayIterator> tmp5;
    TNode<JSReceiver> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<JSReceiver>{tmp6};
}

void StoreJSArrayIteratorIteratedObject_634(compiler::CodeAssemblerState* state_, TNode<JSArrayIterator> p_o, TNode<JSReceiver> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSArrayIterator, JSReceiver> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSArrayIterator, JSReceiver> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSArrayIterator, JSReceiver> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSArrayIterator> tmp0;
    TNode<JSReceiver> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 478);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSArrayIterator::kIteratedObjectOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSArrayIterator> tmp3;
    TNode<JSReceiver> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSArrayIterator> tmp5;
    TNode<JSReceiver> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Number> LoadJSArrayIteratorNextIndex_635(compiler::CodeAssemblerState* state_, TNode<JSArrayIterator> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSArrayIterator> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSArrayIterator, Number> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSArrayIterator, Number> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSArrayIterator> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 479);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSArrayIterator::kNextIndexOffset);
    USE(tmp1);
    TNode<Number>tmp2 = CodeStubAssembler(state_).LoadReference<Number>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSArrayIterator> tmp3;
    TNode<Number> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSArrayIterator> tmp5;
    TNode<Number> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Number>{tmp6};
}

void StoreJSArrayIteratorNextIndex_636(compiler::CodeAssemblerState* state_, TNode<JSArrayIterator> p_o, TNode<Number> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSArrayIterator, Number> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSArrayIterator, Number> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSArrayIterator, Number> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSArrayIterator> tmp0;
    TNode<Number> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 479);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSArrayIterator::kNextIndexOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSArrayIterator> tmp3;
    TNode<Number> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSArrayIterator> tmp5;
    TNode<Number> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Smi> LoadJSArrayIteratorKind_637(compiler::CodeAssemblerState* state_, TNode<JSArrayIterator> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSArrayIterator> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSArrayIterator, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSArrayIterator, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSArrayIterator> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 480);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSArrayIterator::kKindOffset);
    USE(tmp1);
    TNode<Smi>tmp2 = CodeStubAssembler(state_).LoadReference<Smi>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSArrayIterator> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSArrayIterator> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Smi>{tmp6};
}

void StoreJSArrayIteratorKind_638(compiler::CodeAssemblerState* state_, TNode<JSArrayIterator> p_o, TNode<Smi> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSArrayIterator, Smi> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSArrayIterator, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSArrayIterator, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSArrayIterator> tmp0;
    TNode<Smi> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 480);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSArrayIterator::kKindOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSArrayIterator> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSArrayIterator> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Number> LoadJSArrayLength_639(compiler::CodeAssemblerState* state_, TNode<JSArray> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSArray> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSArray, Number> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSArray, Number> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSArray> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 487);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSArray::kLengthOffset);
    USE(tmp1);
    TNode<Number>tmp2 = CodeStubAssembler(state_).LoadReference<Number>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSArray> tmp3;
    TNode<Number> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSArray> tmp5;
    TNode<Number> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Number>{tmp6};
}

void StoreJSArrayLength_640(compiler::CodeAssemblerState* state_, TNode<JSArray> p_o, TNode<Number> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSArray, Number> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSArray, Number> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSArray, Number> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSArray> tmp0;
    TNode<Number> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 487);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSArray::kLengthOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSArray> tmp3;
    TNode<Number> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSArray> tmp5;
    TNode<Number> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<BoolT> _method_JSArray_IsEmpty(compiler::CodeAssemblerState* state_, TNode<JSArray> p_this) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSArray> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSArray, BoolT> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSArray, BoolT> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_this);

  if (block0.is_used()) {
    TNode<JSArray> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 485);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSArray::kLengthOffset);
    USE(tmp1);
    TNode<Number>tmp2 = CodeStubAssembler(state_).LoadReference<Number>(CodeStubAssembler::Reference{tmp0, tmp1});
    TNode<Number> tmp3;
    USE(tmp3);
    tmp3 = FromConstexpr20UT5ATSmi10HeapNumber17ATconstexpr_int31_160(state_, 0);
    TNode<BoolT> tmp4;
    USE(tmp4);
    tmp4 = IsNumberEqual_73(state_, TNode<Number>{tmp2}, TNode<Number>{tmp3});
    ca_.Goto(&block1, tmp0, tmp4);
  }

  if (block1.is_used()) {
    TNode<JSArray> tmp5;
    TNode<BoolT> tmp6;
    ca_.Bind(&block1, &tmp5, &tmp6);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 484);
    ca_.Goto(&block2, tmp5, tmp6);
  }

    TNode<JSArray> tmp7;
    TNode<BoolT> tmp8;
    ca_.Bind(&block2, &tmp7, &tmp8);
  return TNode<BoolT>{tmp8};
}

TNode<Object> LoadCallHandlerInfoCallback_641(compiler::CodeAssemblerState* state_, TNode<CallHandlerInfo> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<CallHandlerInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<CallHandlerInfo, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<CallHandlerInfo, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<CallHandlerInfo> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 533);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(CallHandlerInfo::kCallbackOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<CallHandlerInfo> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<CallHandlerInfo> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreCallHandlerInfoCallback_642(compiler::CodeAssemblerState* state_, TNode<CallHandlerInfo> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<CallHandlerInfo, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<CallHandlerInfo, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<CallHandlerInfo, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<CallHandlerInfo> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 533);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(CallHandlerInfo::kCallbackOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<CallHandlerInfo> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<CallHandlerInfo> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadCallHandlerInfoJsCallback_643(compiler::CodeAssemblerState* state_, TNode<CallHandlerInfo> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<CallHandlerInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<CallHandlerInfo, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<CallHandlerInfo, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<CallHandlerInfo> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 534);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(CallHandlerInfo::kJsCallbackOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<CallHandlerInfo> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<CallHandlerInfo> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreCallHandlerInfoJsCallback_644(compiler::CodeAssemblerState* state_, TNode<CallHandlerInfo> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<CallHandlerInfo, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<CallHandlerInfo, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<CallHandlerInfo, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<CallHandlerInfo> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 534);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(CallHandlerInfo::kJsCallbackOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<CallHandlerInfo> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<CallHandlerInfo> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadCallHandlerInfoData_645(compiler::CodeAssemblerState* state_, TNode<CallHandlerInfo> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<CallHandlerInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<CallHandlerInfo, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<CallHandlerInfo, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<CallHandlerInfo> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 535);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(CallHandlerInfo::kDataOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<CallHandlerInfo> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<CallHandlerInfo> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreCallHandlerInfoData_646(compiler::CodeAssemblerState* state_, TNode<CallHandlerInfo> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<CallHandlerInfo, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<CallHandlerInfo, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<CallHandlerInfo, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<CallHandlerInfo> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 535);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(CallHandlerInfo::kDataOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<CallHandlerInfo> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<CallHandlerInfo> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<FixedArray> LoadModuleExports_647(compiler::CodeAssemblerState* state_, TNode<Module> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Module> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Module, FixedArray> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Module, FixedArray> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<Module> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 542);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(Module::kExportsOffset);
    USE(tmp1);
    TNode<FixedArray>tmp2 = CodeStubAssembler(state_).LoadReference<FixedArray>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<Module> tmp3;
    TNode<FixedArray> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Module> tmp5;
    TNode<FixedArray> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<FixedArray>{tmp6};
}

void StoreModuleExports_648(compiler::CodeAssemblerState* state_, TNode<Module> p_o, TNode<FixedArray> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Module, FixedArray> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Module, FixedArray> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Module, FixedArray> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<Module> tmp0;
    TNode<FixedArray> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 542);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(Module::kExportsOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<Module> tmp3;
    TNode<FixedArray> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Module> tmp5;
    TNode<FixedArray> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Smi> LoadModuleHash_649(compiler::CodeAssemblerState* state_, TNode<Module> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Module> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Module, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Module, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<Module> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 543);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(Module::kHashOffset);
    USE(tmp1);
    TNode<Smi>tmp2 = CodeStubAssembler(state_).LoadReference<Smi>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<Module> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Module> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Smi>{tmp6};
}

void StoreModuleHash_650(compiler::CodeAssemblerState* state_, TNode<Module> p_o, TNode<Smi> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Module, Smi> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Module, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Module, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<Module> tmp0;
    TNode<Smi> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 543);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(Module::kHashOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<Module> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Module> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Smi> LoadModuleStatus_651(compiler::CodeAssemblerState* state_, TNode<Module> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Module> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Module, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Module, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<Module> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 544);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(Module::kStatusOffset);
    USE(tmp1);
    TNode<Smi>tmp2 = CodeStubAssembler(state_).LoadReference<Smi>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<Module> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Module> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Smi>{tmp6};
}

void StoreModuleStatus_652(compiler::CodeAssemblerState* state_, TNode<Module> p_o, TNode<Smi> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Module, Smi> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Module, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Module, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<Module> tmp0;
    TNode<Smi> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 544);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(Module::kStatusOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<Module> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Module> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<HeapObject> LoadModuleModuleNamespace_653(compiler::CodeAssemblerState* state_, TNode<Module> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Module> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Module, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Module, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<Module> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 545);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(Module::kModuleNamespaceOffset);
    USE(tmp1);
    TNode<HeapObject>tmp2 = CodeStubAssembler(state_).LoadReference<HeapObject>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<Module> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Module> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<HeapObject>{tmp6};
}

void StoreModuleModuleNamespace_654(compiler::CodeAssemblerState* state_, TNode<Module> p_o, TNode<HeapObject> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Module, HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Module, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Module, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<Module> tmp0;
    TNode<HeapObject> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 545);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(Module::kModuleNamespaceOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<Module> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Module> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadModuleException_655(compiler::CodeAssemblerState* state_, TNode<Module> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Module> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Module, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Module, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<Module> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 546);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(Module::kExceptionOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<Module> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Module> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreModuleException_656(compiler::CodeAssemblerState* state_, TNode<Module> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Module, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Module, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Module, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<Module> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 546);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(Module::kExceptionOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<Module> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Module> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<HeapObject> LoadSourceTextModuleCode_657(compiler::CodeAssemblerState* state_, TNode<SourceTextModule> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModule> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModule, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModule, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<SourceTextModule> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 554);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(SourceTextModule::kCodeOffset);
    USE(tmp1);
    TNode<HeapObject>tmp2 = CodeStubAssembler(state_).LoadReference<HeapObject>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<SourceTextModule> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<SourceTextModule> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<HeapObject>{tmp6};
}

void StoreSourceTextModuleCode_658(compiler::CodeAssemblerState* state_, TNode<SourceTextModule> p_o, TNode<HeapObject> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModule, HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModule, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModule, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<SourceTextModule> tmp0;
    TNode<HeapObject> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 554);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(SourceTextModule::kCodeOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<SourceTextModule> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<SourceTextModule> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<FixedArray> LoadSourceTextModuleRegularExports_659(compiler::CodeAssemblerState* state_, TNode<SourceTextModule> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModule> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModule, FixedArray> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModule, FixedArray> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<SourceTextModule> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 561);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(SourceTextModule::kRegularExportsOffset);
    USE(tmp1);
    TNode<FixedArray>tmp2 = CodeStubAssembler(state_).LoadReference<FixedArray>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<SourceTextModule> tmp3;
    TNode<FixedArray> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<SourceTextModule> tmp5;
    TNode<FixedArray> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<FixedArray>{tmp6};
}

void StoreSourceTextModuleRegularExports_660(compiler::CodeAssemblerState* state_, TNode<SourceTextModule> p_o, TNode<FixedArray> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModule, FixedArray> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModule, FixedArray> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModule, FixedArray> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<SourceTextModule> tmp0;
    TNode<FixedArray> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 561);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(SourceTextModule::kRegularExportsOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<SourceTextModule> tmp3;
    TNode<FixedArray> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<SourceTextModule> tmp5;
    TNode<FixedArray> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<FixedArray> LoadSourceTextModuleRegularImports_661(compiler::CodeAssemblerState* state_, TNode<SourceTextModule> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModule> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModule, FixedArray> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModule, FixedArray> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<SourceTextModule> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 562);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(SourceTextModule::kRegularImportsOffset);
    USE(tmp1);
    TNode<FixedArray>tmp2 = CodeStubAssembler(state_).LoadReference<FixedArray>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<SourceTextModule> tmp3;
    TNode<FixedArray> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<SourceTextModule> tmp5;
    TNode<FixedArray> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<FixedArray>{tmp6};
}

void StoreSourceTextModuleRegularImports_662(compiler::CodeAssemblerState* state_, TNode<SourceTextModule> p_o, TNode<FixedArray> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModule, FixedArray> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModule, FixedArray> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModule, FixedArray> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<SourceTextModule> tmp0;
    TNode<FixedArray> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 562);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(SourceTextModule::kRegularImportsOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<SourceTextModule> tmp3;
    TNode<FixedArray> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<SourceTextModule> tmp5;
    TNode<FixedArray> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<FixedArray> LoadSourceTextModuleRequestedModules_663(compiler::CodeAssemblerState* state_, TNode<SourceTextModule> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModule> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModule, FixedArray> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModule, FixedArray> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<SourceTextModule> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 567);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(SourceTextModule::kRequestedModulesOffset);
    USE(tmp1);
    TNode<FixedArray>tmp2 = CodeStubAssembler(state_).LoadReference<FixedArray>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<SourceTextModule> tmp3;
    TNode<FixedArray> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<SourceTextModule> tmp5;
    TNode<FixedArray> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<FixedArray>{tmp6};
}

void StoreSourceTextModuleRequestedModules_664(compiler::CodeAssemblerState* state_, TNode<SourceTextModule> p_o, TNode<FixedArray> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModule, FixedArray> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModule, FixedArray> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModule, FixedArray> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<SourceTextModule> tmp0;
    TNode<FixedArray> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 567);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(SourceTextModule::kRequestedModulesOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<SourceTextModule> tmp3;
    TNode<FixedArray> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<SourceTextModule> tmp5;
    TNode<FixedArray> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Script> LoadSourceTextModuleScript_665(compiler::CodeAssemblerState* state_, TNode<SourceTextModule> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModule> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModule, Script> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModule, Script> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<SourceTextModule> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 570);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(SourceTextModule::kScriptOffset);
    USE(tmp1);
    TNode<Script>tmp2 = CodeStubAssembler(state_).LoadReference<Script>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<SourceTextModule> tmp3;
    TNode<Script> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<SourceTextModule> tmp5;
    TNode<Script> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Script>{tmp6};
}

void StoreSourceTextModuleScript_666(compiler::CodeAssemblerState* state_, TNode<SourceTextModule> p_o, TNode<Script> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModule, Script> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModule, Script> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModule, Script> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<SourceTextModule> tmp0;
    TNode<Script> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 570);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(SourceTextModule::kScriptOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<SourceTextModule> tmp3;
    TNode<Script> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<SourceTextModule> tmp5;
    TNode<Script> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<HeapObject> LoadSourceTextModuleImportMeta_667(compiler::CodeAssemblerState* state_, TNode<SourceTextModule> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModule> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModule, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModule, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<SourceTextModule> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 575);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(SourceTextModule::kImportMetaOffset);
    USE(tmp1);
    TNode<HeapObject>tmp2 = CodeStubAssembler(state_).LoadReference<HeapObject>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<SourceTextModule> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<SourceTextModule> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<HeapObject>{tmp6};
}

void StoreSourceTextModuleImportMeta_668(compiler::CodeAssemblerState* state_, TNode<SourceTextModule> p_o, TNode<HeapObject> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModule, HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModule, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModule, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<SourceTextModule> tmp0;
    TNode<HeapObject> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 575);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(SourceTextModule::kImportMetaOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<SourceTextModule> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<SourceTextModule> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<ArrayList> LoadSourceTextModuleAsyncParentModules_669(compiler::CodeAssemblerState* state_, TNode<SourceTextModule> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModule> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModule, ArrayList> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModule, ArrayList> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<SourceTextModule> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 576);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(SourceTextModule::kAsyncParentModulesOffset);
    USE(tmp1);
    TNode<ArrayList>tmp2 = CodeStubAssembler(state_).LoadReference<ArrayList>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<SourceTextModule> tmp3;
    TNode<ArrayList> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<SourceTextModule> tmp5;
    TNode<ArrayList> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<ArrayList>{tmp6};
}

void StoreSourceTextModuleAsyncParentModules_670(compiler::CodeAssemblerState* state_, TNode<SourceTextModule> p_o, TNode<ArrayList> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModule, ArrayList> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModule, ArrayList> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModule, ArrayList> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<SourceTextModule> tmp0;
    TNode<ArrayList> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 576);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(SourceTextModule::kAsyncParentModulesOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<SourceTextModule> tmp3;
    TNode<ArrayList> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<SourceTextModule> tmp5;
    TNode<ArrayList> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<HeapObject> LoadSourceTextModuleTopLevelCapability_671(compiler::CodeAssemblerState* state_, TNode<SourceTextModule> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModule> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModule, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModule, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<SourceTextModule> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 577);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(SourceTextModule::kTopLevelCapabilityOffset);
    USE(tmp1);
    TNode<HeapObject>tmp2 = CodeStubAssembler(state_).LoadReference<HeapObject>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<SourceTextModule> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<SourceTextModule> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<HeapObject>{tmp6};
}

void StoreSourceTextModuleTopLevelCapability_672(compiler::CodeAssemblerState* state_, TNode<SourceTextModule> p_o, TNode<HeapObject> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModule, HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModule, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModule, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<SourceTextModule> tmp0;
    TNode<HeapObject> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 577);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(SourceTextModule::kTopLevelCapabilityOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<SourceTextModule> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<SourceTextModule> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Smi> LoadSourceTextModuleDfsIndex_673(compiler::CodeAssemblerState* state_, TNode<SourceTextModule> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModule> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModule, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModule, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<SourceTextModule> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 578);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(SourceTextModule::kDfsIndexOffset);
    USE(tmp1);
    TNode<Smi>tmp2 = CodeStubAssembler(state_).LoadReference<Smi>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<SourceTextModule> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<SourceTextModule> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Smi>{tmp6};
}

void StoreSourceTextModuleDfsIndex_674(compiler::CodeAssemblerState* state_, TNode<SourceTextModule> p_o, TNode<Smi> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModule, Smi> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModule, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModule, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<SourceTextModule> tmp0;
    TNode<Smi> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 578);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(SourceTextModule::kDfsIndexOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<SourceTextModule> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<SourceTextModule> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Smi> LoadSourceTextModuleDfsAncestorIndex_675(compiler::CodeAssemblerState* state_, TNode<SourceTextModule> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModule> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModule, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModule, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<SourceTextModule> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 579);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(SourceTextModule::kDfsAncestorIndexOffset);
    USE(tmp1);
    TNode<Smi>tmp2 = CodeStubAssembler(state_).LoadReference<Smi>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<SourceTextModule> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<SourceTextModule> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Smi>{tmp6};
}

void StoreSourceTextModuleDfsAncestorIndex_676(compiler::CodeAssemblerState* state_, TNode<SourceTextModule> p_o, TNode<Smi> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModule, Smi> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModule, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModule, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<SourceTextModule> tmp0;
    TNode<Smi> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 579);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(SourceTextModule::kDfsAncestorIndexOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<SourceTextModule> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<SourceTextModule> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Smi> LoadSourceTextModulePendingAsyncDependencies_677(compiler::CodeAssemblerState* state_, TNode<SourceTextModule> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModule> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModule, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModule, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<SourceTextModule> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 580);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(SourceTextModule::kPendingAsyncDependenciesOffset);
    USE(tmp1);
    TNode<Smi>tmp2 = CodeStubAssembler(state_).LoadReference<Smi>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<SourceTextModule> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<SourceTextModule> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Smi>{tmp6};
}

void StoreSourceTextModulePendingAsyncDependencies_678(compiler::CodeAssemblerState* state_, TNode<SourceTextModule> p_o, TNode<Smi> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModule, Smi> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModule, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModule, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<SourceTextModule> tmp0;
    TNode<Smi> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 580);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(SourceTextModule::kPendingAsyncDependenciesOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<SourceTextModule> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<SourceTextModule> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Smi> LoadSourceTextModuleFlags_679(compiler::CodeAssemblerState* state_, TNode<SourceTextModule> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModule> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModule, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModule, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<SourceTextModule> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 581);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(SourceTextModule::kFlagsOffset);
    USE(tmp1);
    TNode<Smi>tmp2 = CodeStubAssembler(state_).LoadReference<Smi>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<SourceTextModule> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<SourceTextModule> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Smi>{tmp6};
}

void StoreSourceTextModuleFlags_680(compiler::CodeAssemblerState* state_, TNode<SourceTextModule> p_o, TNode<Smi> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModule, Smi> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModule, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModule, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<SourceTextModule> tmp0;
    TNode<Smi> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 581);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(SourceTextModule::kFlagsOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<SourceTextModule> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<SourceTextModule> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<String> LoadSyntheticModuleName_681(compiler::CodeAssemblerState* state_, TNode<SyntheticModule> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<SyntheticModule> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SyntheticModule, String> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SyntheticModule, String> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<SyntheticModule> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 586);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(SyntheticModule::kNameOffset);
    USE(tmp1);
    TNode<String>tmp2 = CodeStubAssembler(state_).LoadReference<String>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<SyntheticModule> tmp3;
    TNode<String> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<SyntheticModule> tmp5;
    TNode<String> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<String>{tmp6};
}

void StoreSyntheticModuleName_682(compiler::CodeAssemblerState* state_, TNode<SyntheticModule> p_o, TNode<String> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<SyntheticModule, String> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SyntheticModule, String> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SyntheticModule, String> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<SyntheticModule> tmp0;
    TNode<String> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 586);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(SyntheticModule::kNameOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<SyntheticModule> tmp3;
    TNode<String> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<SyntheticModule> tmp5;
    TNode<String> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<FixedArray> LoadSyntheticModuleExportNames_683(compiler::CodeAssemblerState* state_, TNode<SyntheticModule> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<SyntheticModule> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SyntheticModule, FixedArray> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SyntheticModule, FixedArray> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<SyntheticModule> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 587);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(SyntheticModule::kExportNamesOffset);
    USE(tmp1);
    TNode<FixedArray>tmp2 = CodeStubAssembler(state_).LoadReference<FixedArray>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<SyntheticModule> tmp3;
    TNode<FixedArray> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<SyntheticModule> tmp5;
    TNode<FixedArray> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<FixedArray>{tmp6};
}

void StoreSyntheticModuleExportNames_684(compiler::CodeAssemblerState* state_, TNode<SyntheticModule> p_o, TNode<FixedArray> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<SyntheticModule, FixedArray> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SyntheticModule, FixedArray> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SyntheticModule, FixedArray> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<SyntheticModule> tmp0;
    TNode<FixedArray> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 587);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(SyntheticModule::kExportNamesOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<SyntheticModule> tmp3;
    TNode<FixedArray> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<SyntheticModule> tmp5;
    TNode<FixedArray> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Foreign> LoadSyntheticModuleEvaluationSteps_685(compiler::CodeAssemblerState* state_, TNode<SyntheticModule> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<SyntheticModule> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SyntheticModule, Foreign> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SyntheticModule, Foreign> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<SyntheticModule> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 588);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(SyntheticModule::kEvaluationStepsOffset);
    USE(tmp1);
    TNode<Foreign>tmp2 = CodeStubAssembler(state_).LoadReference<Foreign>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<SyntheticModule> tmp3;
    TNode<Foreign> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<SyntheticModule> tmp5;
    TNode<Foreign> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Foreign>{tmp6};
}

void StoreSyntheticModuleEvaluationSteps_686(compiler::CodeAssemblerState* state_, TNode<SyntheticModule> p_o, TNode<Foreign> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<SyntheticModule, Foreign> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SyntheticModule, Foreign> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SyntheticModule, Foreign> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<SyntheticModule> tmp0;
    TNode<Foreign> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 588);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(SyntheticModule::kEvaluationStepsOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<SyntheticModule> tmp3;
    TNode<Foreign> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<SyntheticModule> tmp5;
    TNode<Foreign> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Module> LoadJSModuleNamespaceModule_687(compiler::CodeAssemblerState* state_, TNode<JSModuleNamespace> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSModuleNamespace> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSModuleNamespace, Module> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSModuleNamespace, Module> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSModuleNamespace> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 594);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSModuleNamespace::kModuleOffset);
    USE(tmp1);
    TNode<Module>tmp2 = CodeStubAssembler(state_).LoadReference<Module>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSModuleNamespace> tmp3;
    TNode<Module> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSModuleNamespace> tmp5;
    TNode<Module> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Module>{tmp6};
}

void StoreJSModuleNamespaceModule_688(compiler::CodeAssemblerState* state_, TNode<JSModuleNamespace> p_o, TNode<Module> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSModuleNamespace, Module> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSModuleNamespace, Module> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSModuleNamespace, Module> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSModuleNamespace> tmp0;
    TNode<Module> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 594);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSModuleNamespace::kModuleOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSModuleNamespace> tmp3;
    TNode<Module> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSModuleNamespace> tmp5;
    TNode<Module> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadJSWeakCollectionTable_689(compiler::CodeAssemblerState* state_, TNode<JSWeakCollection> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSWeakCollection> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSWeakCollection, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSWeakCollection, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSWeakCollection> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 606);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSWeakCollection::kTableOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSWeakCollection> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSWeakCollection> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreJSWeakCollectionTable_690(compiler::CodeAssemblerState* state_, TNode<JSWeakCollection> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSWeakCollection, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSWeakCollection, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSWeakCollection, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSWeakCollection> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 606);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSWeakCollection::kTableOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSWeakCollection> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSWeakCollection> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadJSCollectionIteratorTable_691(compiler::CodeAssemblerState* state_, TNode<JSCollectionIterator> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSCollectionIterator> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSCollectionIterator, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSCollectionIterator, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSCollectionIterator> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 618);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSCollectionIterator::kTableOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSCollectionIterator> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSCollectionIterator> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreJSCollectionIteratorTable_692(compiler::CodeAssemblerState* state_, TNode<JSCollectionIterator> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSCollectionIterator, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSCollectionIterator, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSCollectionIterator, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSCollectionIterator> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 618);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSCollectionIterator::kTableOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSCollectionIterator> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSCollectionIterator> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadJSCollectionIteratorIndex_693(compiler::CodeAssemblerState* state_, TNode<JSCollectionIterator> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSCollectionIterator> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSCollectionIterator, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSCollectionIterator, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSCollectionIterator> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 620);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSCollectionIterator::kIndexOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSCollectionIterator> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSCollectionIterator> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreJSCollectionIteratorIndex_694(compiler::CodeAssemblerState* state_, TNode<JSCollectionIterator> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSCollectionIterator, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSCollectionIterator, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSCollectionIterator, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSCollectionIterator> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 620);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSCollectionIterator::kIndexOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSCollectionIterator> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSCollectionIterator> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Smi> LoadJSMessageObjectMessageType_695(compiler::CodeAssemblerState* state_, TNode<JSMessageObject> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSMessageObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSMessageObject, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSMessageObject, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSMessageObject> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 625);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSMessageObject::kMessageTypeOffset);
    USE(tmp1);
    TNode<Smi>tmp2 = CodeStubAssembler(state_).LoadReference<Smi>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSMessageObject> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSMessageObject> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Smi>{tmp6};
}

void StoreJSMessageObjectMessageType_696(compiler::CodeAssemblerState* state_, TNode<JSMessageObject> p_o, TNode<Smi> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSMessageObject, Smi> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSMessageObject, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSMessageObject, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSMessageObject> tmp0;
    TNode<Smi> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 625);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSMessageObject::kMessageTypeOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSMessageObject> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSMessageObject> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadJSMessageObjectArguments_697(compiler::CodeAssemblerState* state_, TNode<JSMessageObject> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSMessageObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSMessageObject, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSMessageObject, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSMessageObject> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 626);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSMessageObject::kArgumentsOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSMessageObject> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSMessageObject> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreJSMessageObjectArguments_698(compiler::CodeAssemblerState* state_, TNode<JSMessageObject> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSMessageObject, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSMessageObject, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSMessageObject, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSMessageObject> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 626);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSMessageObject::kArgumentsOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSMessageObject> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSMessageObject> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Script> LoadJSMessageObjectScript_699(compiler::CodeAssemblerState* state_, TNode<JSMessageObject> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSMessageObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSMessageObject, Script> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSMessageObject, Script> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSMessageObject> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 627);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSMessageObject::kScriptOffset);
    USE(tmp1);
    TNode<Script>tmp2 = CodeStubAssembler(state_).LoadReference<Script>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSMessageObject> tmp3;
    TNode<Script> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSMessageObject> tmp5;
    TNode<Script> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Script>{tmp6};
}

void StoreJSMessageObjectScript_700(compiler::CodeAssemblerState* state_, TNode<JSMessageObject> p_o, TNode<Script> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSMessageObject, Script> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSMessageObject, Script> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSMessageObject, Script> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSMessageObject> tmp0;
    TNode<Script> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 627);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSMessageObject::kScriptOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSMessageObject> tmp3;
    TNode<Script> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSMessageObject> tmp5;
    TNode<Script> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadJSMessageObjectStackFrames_701(compiler::CodeAssemblerState* state_, TNode<JSMessageObject> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSMessageObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSMessageObject, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSMessageObject, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSMessageObject> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 628);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSMessageObject::kStackFramesOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSMessageObject> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSMessageObject> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreJSMessageObjectStackFrames_702(compiler::CodeAssemblerState* state_, TNode<JSMessageObject> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSMessageObject, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSMessageObject, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSMessageObject, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSMessageObject> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 628);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSMessageObject::kStackFramesOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSMessageObject> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSMessageObject> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<HeapObject> LoadJSMessageObjectSharedInfo_703(compiler::CodeAssemblerState* state_, TNode<JSMessageObject> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSMessageObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSMessageObject, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSMessageObject, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSMessageObject> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 629);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSMessageObject::kSharedInfoOffset);
    USE(tmp1);
    TNode<HeapObject>tmp2 = CodeStubAssembler(state_).LoadReference<HeapObject>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSMessageObject> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSMessageObject> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<HeapObject>{tmp6};
}

void StoreJSMessageObjectSharedInfo_704(compiler::CodeAssemblerState* state_, TNode<JSMessageObject> p_o, TNode<HeapObject> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSMessageObject, HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSMessageObject, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSMessageObject, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSMessageObject> tmp0;
    TNode<HeapObject> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 629);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSMessageObject::kSharedInfoOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSMessageObject> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSMessageObject> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Smi> LoadJSMessageObjectBytecodeOffset_705(compiler::CodeAssemblerState* state_, TNode<JSMessageObject> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSMessageObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSMessageObject, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSMessageObject, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSMessageObject> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 633);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSMessageObject::kBytecodeOffsetOffset);
    USE(tmp1);
    TNode<Smi>tmp2 = CodeStubAssembler(state_).LoadReference<Smi>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSMessageObject> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSMessageObject> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Smi>{tmp6};
}

void StoreJSMessageObjectBytecodeOffset_706(compiler::CodeAssemblerState* state_, TNode<JSMessageObject> p_o, TNode<Smi> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSMessageObject, Smi> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSMessageObject, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSMessageObject, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSMessageObject> tmp0;
    TNode<Smi> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 633);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSMessageObject::kBytecodeOffsetOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSMessageObject> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSMessageObject> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Smi> LoadJSMessageObjectStartPosition_707(compiler::CodeAssemblerState* state_, TNode<JSMessageObject> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSMessageObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSMessageObject, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSMessageObject, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSMessageObject> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 634);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSMessageObject::kStartPositionOffset);
    USE(tmp1);
    TNode<Smi>tmp2 = CodeStubAssembler(state_).LoadReference<Smi>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSMessageObject> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSMessageObject> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Smi>{tmp6};
}

void StoreJSMessageObjectStartPosition_708(compiler::CodeAssemblerState* state_, TNode<JSMessageObject> p_o, TNode<Smi> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSMessageObject, Smi> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSMessageObject, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSMessageObject, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSMessageObject> tmp0;
    TNode<Smi> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 634);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSMessageObject::kStartPositionOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSMessageObject> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSMessageObject> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Smi> LoadJSMessageObjectEndPosition_709(compiler::CodeAssemblerState* state_, TNode<JSMessageObject> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSMessageObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSMessageObject, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSMessageObject, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSMessageObject> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 635);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSMessageObject::kEndPositionOffset);
    USE(tmp1);
    TNode<Smi>tmp2 = CodeStubAssembler(state_).LoadReference<Smi>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSMessageObject> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSMessageObject> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Smi>{tmp6};
}

void StoreJSMessageObjectEndPosition_710(compiler::CodeAssemblerState* state_, TNode<JSMessageObject> p_o, TNode<Smi> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSMessageObject, Smi> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSMessageObject, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSMessageObject, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSMessageObject> tmp0;
    TNode<Smi> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 635);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSMessageObject::kEndPositionOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSMessageObject> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSMessageObject> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Smi> LoadJSMessageObjectErrorLevel_711(compiler::CodeAssemblerState* state_, TNode<JSMessageObject> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSMessageObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSMessageObject, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSMessageObject, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSMessageObject> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 636);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSMessageObject::kErrorLevelOffset);
    USE(tmp1);
    TNode<Smi>tmp2 = CodeStubAssembler(state_).LoadReference<Smi>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSMessageObject> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSMessageObject> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Smi>{tmp6};
}

void StoreJSMessageObjectErrorLevel_712(compiler::CodeAssemblerState* state_, TNode<JSMessageObject> p_o, TNode<Smi> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSMessageObject, Smi> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSMessageObject, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSMessageObject, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSMessageObject> tmp0;
    TNode<Smi> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 636);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSMessageObject::kErrorLevelOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSMessageObject> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSMessageObject> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Smi> LoadWeakArrayListCapacity_713(compiler::CodeAssemblerState* state_, TNode<WeakArrayList> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WeakArrayList> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WeakArrayList, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WeakArrayList, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<WeakArrayList> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 640);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(WeakArrayList::kCapacityOffset);
    USE(tmp1);
    TNode<Smi>tmp2 = CodeStubAssembler(state_).LoadReference<Smi>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<WeakArrayList> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WeakArrayList> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Smi>{tmp6};
}

void StoreWeakArrayListCapacity_714(compiler::CodeAssemblerState* state_, TNode<WeakArrayList> p_o, TNode<Smi> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WeakArrayList, Smi> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WeakArrayList, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WeakArrayList, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<WeakArrayList> tmp0;
    TNode<Smi> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 640);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(WeakArrayList::kCapacityOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<WeakArrayList> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WeakArrayList> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Smi> LoadWeakArrayListLength_715(compiler::CodeAssemblerState* state_, TNode<WeakArrayList> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WeakArrayList> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WeakArrayList, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WeakArrayList, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<WeakArrayList> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 641);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(WeakArrayList::kLengthOffset);
    USE(tmp1);
    TNode<Smi>tmp2 = CodeStubAssembler(state_).LoadReference<Smi>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<WeakArrayList> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WeakArrayList> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Smi>{tmp6};
}

void StoreWeakArrayListLength_716(compiler::CodeAssemblerState* state_, TNode<WeakArrayList> p_o, TNode<Smi> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WeakArrayList, Smi> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WeakArrayList, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WeakArrayList, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<WeakArrayList> tmp0;
    TNode<Smi> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 641);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(WeakArrayList::kLengthOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<WeakArrayList> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WeakArrayList> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<HeapObject> LoadPrototypeInfoJsModuleNamespace_717(compiler::CodeAssemblerState* state_, TNode<PrototypeInfo> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<PrototypeInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PrototypeInfo, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PrototypeInfo, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<PrototypeInfo> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 647);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(PrototypeInfo::kJsModuleNamespaceOffset);
    USE(tmp1);
    TNode<HeapObject>tmp2 = CodeStubAssembler(state_).LoadReference<HeapObject>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<PrototypeInfo> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<PrototypeInfo> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<HeapObject>{tmp6};
}

void StorePrototypeInfoJsModuleNamespace_718(compiler::CodeAssemblerState* state_, TNode<PrototypeInfo> p_o, TNode<HeapObject> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<PrototypeInfo, HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PrototypeInfo, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PrototypeInfo, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<PrototypeInfo> tmp0;
    TNode<HeapObject> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 647);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(PrototypeInfo::kJsModuleNamespaceOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<PrototypeInfo> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<PrototypeInfo> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadPrototypeInfoPrototypeUsers_719(compiler::CodeAssemblerState* state_, TNode<PrototypeInfo> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<PrototypeInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PrototypeInfo, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PrototypeInfo, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<PrototypeInfo> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 648);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(PrototypeInfo::kPrototypeUsersOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<PrototypeInfo> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<PrototypeInfo> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StorePrototypeInfoPrototypeUsers_720(compiler::CodeAssemblerState* state_, TNode<PrototypeInfo> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<PrototypeInfo, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PrototypeInfo, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PrototypeInfo, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<PrototypeInfo> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 648);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(PrototypeInfo::kPrototypeUsersOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<PrototypeInfo> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<PrototypeInfo> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Smi> LoadPrototypeInfoRegistrySlot_721(compiler::CodeAssemblerState* state_, TNode<PrototypeInfo> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<PrototypeInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PrototypeInfo, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PrototypeInfo, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<PrototypeInfo> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 649);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(PrototypeInfo::kRegistrySlotOffset);
    USE(tmp1);
    TNode<Smi>tmp2 = CodeStubAssembler(state_).LoadReference<Smi>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<PrototypeInfo> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<PrototypeInfo> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Smi>{tmp6};
}

void StorePrototypeInfoRegistrySlot_722(compiler::CodeAssemblerState* state_, TNode<PrototypeInfo> p_o, TNode<Smi> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<PrototypeInfo, Smi> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PrototypeInfo, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PrototypeInfo, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<PrototypeInfo> tmp0;
    TNode<Smi> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 649);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(PrototypeInfo::kRegistrySlotOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<PrototypeInfo> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<PrototypeInfo> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadPrototypeInfoValidityCell_723(compiler::CodeAssemblerState* state_, TNode<PrototypeInfo> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<PrototypeInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PrototypeInfo, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PrototypeInfo, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<PrototypeInfo> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 650);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(PrototypeInfo::kValidityCellOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<PrototypeInfo> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<PrototypeInfo> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StorePrototypeInfoValidityCell_724(compiler::CodeAssemblerState* state_, TNode<PrototypeInfo> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<PrototypeInfo, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PrototypeInfo, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PrototypeInfo, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<PrototypeInfo> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 650);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(PrototypeInfo::kValidityCellOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<PrototypeInfo> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<PrototypeInfo> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<HeapObject> LoadPrototypeInfoObjectCreateMap_725(compiler::CodeAssemblerState* state_, TNode<PrototypeInfo> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<PrototypeInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PrototypeInfo, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PrototypeInfo, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<PrototypeInfo> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 652);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(PrototypeInfo::kObjectCreateMapOffset);
    USE(tmp1);
    TNode<HeapObject>tmp2 = CodeStubAssembler(state_).LoadReference<HeapObject>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<PrototypeInfo> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<PrototypeInfo> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<HeapObject>{tmp6};
}

void StorePrototypeInfoObjectCreateMap_726(compiler::CodeAssemblerState* state_, TNode<PrototypeInfo> p_o, TNode<HeapObject> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<PrototypeInfo, HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PrototypeInfo, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PrototypeInfo, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<PrototypeInfo> tmp0;
    TNode<HeapObject> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 652);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(PrototypeInfo::kObjectCreateMapOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<PrototypeInfo> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<PrototypeInfo> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Smi> LoadPrototypeInfoBitField_727(compiler::CodeAssemblerState* state_, TNode<PrototypeInfo> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<PrototypeInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PrototypeInfo, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PrototypeInfo, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<PrototypeInfo> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 653);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(PrototypeInfo::kBitFieldOffset);
    USE(tmp1);
    TNode<Smi>tmp2 = CodeStubAssembler(state_).LoadReference<Smi>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<PrototypeInfo> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<PrototypeInfo> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Smi>{tmp6};
}

void StorePrototypeInfoBitField_728(compiler::CodeAssemblerState* state_, TNode<PrototypeInfo> p_o, TNode<Smi> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<PrototypeInfo, Smi> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PrototypeInfo, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PrototypeInfo, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<PrototypeInfo> tmp0;
    TNode<Smi> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 653);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(PrototypeInfo::kBitFieldOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<PrototypeInfo> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<PrototypeInfo> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadScriptSource_729(compiler::CodeAssemblerState* state_, TNode<Script> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Script> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Script, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Script, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<Script> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 657);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(Script::kSourceOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<Script> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Script> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreScriptSource_730(compiler::CodeAssemblerState* state_, TNode<Script> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Script, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Script, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Script, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<Script> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 657);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(Script::kSourceOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<Script> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Script> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadScriptName_731(compiler::CodeAssemblerState* state_, TNode<Script> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Script> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Script, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Script, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<Script> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 658);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(Script::kNameOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<Script> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Script> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreScriptName_732(compiler::CodeAssemblerState* state_, TNode<Script> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Script, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Script, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Script, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<Script> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 658);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(Script::kNameOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<Script> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Script> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Smi> LoadScriptLineOffset_733(compiler::CodeAssemblerState* state_, TNode<Script> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Script> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Script, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Script, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<Script> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 659);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(Script::kLineOffsetOffset);
    USE(tmp1);
    TNode<Smi>tmp2 = CodeStubAssembler(state_).LoadReference<Smi>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<Script> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Script> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Smi>{tmp6};
}

void StoreScriptLineOffset_734(compiler::CodeAssemblerState* state_, TNode<Script> p_o, TNode<Smi> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Script, Smi> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Script, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Script, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<Script> tmp0;
    TNode<Smi> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 659);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(Script::kLineOffsetOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<Script> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Script> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Smi> LoadScriptColumnOffset_735(compiler::CodeAssemblerState* state_, TNode<Script> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Script> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Script, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Script, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<Script> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 660);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(Script::kColumnOffsetOffset);
    USE(tmp1);
    TNode<Smi>tmp2 = CodeStubAssembler(state_).LoadReference<Smi>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<Script> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Script> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Smi>{tmp6};
}

void StoreScriptColumnOffset_736(compiler::CodeAssemblerState* state_, TNode<Script> p_o, TNode<Smi> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Script, Smi> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Script, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Script, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<Script> tmp0;
    TNode<Smi> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 660);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(Script::kColumnOffsetOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<Script> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Script> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadScriptContext_737(compiler::CodeAssemblerState* state_, TNode<Script> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Script> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Script, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Script, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<Script> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 661);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(Script::kContextOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<Script> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Script> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreScriptContext_738(compiler::CodeAssemblerState* state_, TNode<Script> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Script, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Script, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Script, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<Script> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 661);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(Script::kContextOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<Script> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Script> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Smi> LoadScriptScriptType_739(compiler::CodeAssemblerState* state_, TNode<Script> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Script> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Script, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Script, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<Script> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 662);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(Script::kScriptTypeOffset);
    USE(tmp1);
    TNode<Smi>tmp2 = CodeStubAssembler(state_).LoadReference<Smi>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<Script> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Script> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Smi>{tmp6};
}

void StoreScriptScriptType_740(compiler::CodeAssemblerState* state_, TNode<Script> p_o, TNode<Smi> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Script, Smi> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Script, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Script, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<Script> tmp0;
    TNode<Smi> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 662);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(Script::kScriptTypeOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<Script> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Script> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadScriptLineEnds_741(compiler::CodeAssemblerState* state_, TNode<Script> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Script> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Script, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Script, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<Script> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 663);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(Script::kLineEndsOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<Script> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Script> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreScriptLineEnds_742(compiler::CodeAssemblerState* state_, TNode<Script> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Script, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Script, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Script, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<Script> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 663);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(Script::kLineEndsOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<Script> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Script> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Smi> LoadScriptId_743(compiler::CodeAssemblerState* state_, TNode<Script> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Script> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Script, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Script, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<Script> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 664);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(Script::kIdOffset);
    USE(tmp1);
    TNode<Smi>tmp2 = CodeStubAssembler(state_).LoadReference<Smi>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<Script> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Script> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Smi>{tmp6};
}

void StoreScriptId_744(compiler::CodeAssemblerState* state_, TNode<Script> p_o, TNode<Smi> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Script, Smi> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Script, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Script, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<Script> tmp0;
    TNode<Smi> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 664);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(Script::kIdOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<Script> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Script> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadScriptEvalFromSharedOrWrappedArguments_745(compiler::CodeAssemblerState* state_, TNode<Script> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Script> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Script, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Script, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<Script> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 665);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(Script::kEvalFromSharedOrWrappedArgumentsOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<Script> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Script> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreScriptEvalFromSharedOrWrappedArguments_746(compiler::CodeAssemblerState* state_, TNode<Script> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Script, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Script, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Script, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<Script> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 665);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(Script::kEvalFromSharedOrWrappedArgumentsOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<Script> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Script> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadScriptEvalFromPosition_747(compiler::CodeAssemblerState* state_, TNode<Script> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Script> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Script, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Script, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<Script> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 666);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(Script::kEvalFromPositionOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<Script> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Script> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreScriptEvalFromPosition_748(compiler::CodeAssemblerState* state_, TNode<Script> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Script, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Script, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Script, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<Script> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 666);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(Script::kEvalFromPositionOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<Script> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Script> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadScriptSharedFunctionInfos_749(compiler::CodeAssemblerState* state_, TNode<Script> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Script> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Script, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Script, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<Script> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 667);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(Script::kSharedFunctionInfosOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<Script> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Script> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreScriptSharedFunctionInfos_750(compiler::CodeAssemblerState* state_, TNode<Script> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Script, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Script, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Script, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<Script> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 667);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(Script::kSharedFunctionInfosOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<Script> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Script> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Smi> LoadScriptFlags_751(compiler::CodeAssemblerState* state_, TNode<Script> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Script> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Script, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Script, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<Script> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 668);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(Script::kFlagsOffset);
    USE(tmp1);
    TNode<Smi>tmp2 = CodeStubAssembler(state_).LoadReference<Smi>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<Script> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Script> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Smi>{tmp6};
}

void StoreScriptFlags_752(compiler::CodeAssemblerState* state_, TNode<Script> p_o, TNode<Smi> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Script, Smi> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Script, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Script, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<Script> tmp0;
    TNode<Smi> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 668);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(Script::kFlagsOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<Script> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Script> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadScriptSourceUrl_753(compiler::CodeAssemblerState* state_, TNode<Script> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Script> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Script, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Script, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<Script> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 669);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(Script::kSourceUrlOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<Script> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Script> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreScriptSourceUrl_754(compiler::CodeAssemblerState* state_, TNode<Script> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Script, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Script, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Script, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<Script> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 669);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(Script::kSourceUrlOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<Script> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Script> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadScriptSourceMappingUrl_755(compiler::CodeAssemblerState* state_, TNode<Script> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Script> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Script, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Script, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<Script> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 670);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(Script::kSourceMappingUrlOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<Script> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Script> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreScriptSourceMappingUrl_756(compiler::CodeAssemblerState* state_, TNode<Script> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Script, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Script, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Script, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<Script> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 670);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(Script::kSourceMappingUrlOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<Script> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Script> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadScriptHostDefinedOptions_757(compiler::CodeAssemblerState* state_, TNode<Script> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Script> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Script, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Script, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<Script> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 671);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(Script::kHostDefinedOptionsOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<Script> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Script> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreScriptHostDefinedOptions_758(compiler::CodeAssemblerState* state_, TNode<Script> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Script, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Script, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Script, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<Script> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 671);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(Script::kHostDefinedOptionsOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<Script> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Script> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Smi> LoadEmbedderDataArrayLength_759(compiler::CodeAssemblerState* state_, TNode<EmbedderDataArray> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<EmbedderDataArray> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<EmbedderDataArray, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<EmbedderDataArray, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<EmbedderDataArray> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 676);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(EmbedderDataArray::kLengthOffset);
    USE(tmp1);
    TNode<Smi>tmp2 = CodeStubAssembler(state_).LoadReference<Smi>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<EmbedderDataArray> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<EmbedderDataArray> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Smi>{tmp6};
}

void StoreEmbedderDataArrayLength_760(compiler::CodeAssemblerState* state_, TNode<EmbedderDataArray> p_o, TNode<Smi> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<EmbedderDataArray, Smi> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<EmbedderDataArray, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<EmbedderDataArray, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<EmbedderDataArray> tmp0;
    TNode<Smi> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 676);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(EmbedderDataArray::kLengthOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<EmbedderDataArray> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<EmbedderDataArray> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Int32T> LoadPreparseDataDataLength_761(compiler::CodeAssemblerState* state_, TNode<PreparseData> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<PreparseData> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PreparseData, Int32T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PreparseData, Int32T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<PreparseData> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 683);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(PreparseData::kDataLengthOffset);
    USE(tmp1);
    TNode<Int32T>tmp2 = CodeStubAssembler(state_).LoadReference<Int32T>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<PreparseData> tmp3;
    TNode<Int32T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<PreparseData> tmp5;
    TNode<Int32T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Int32T>{tmp6};
}

void StorePreparseDataDataLength_762(compiler::CodeAssemblerState* state_, TNode<PreparseData> p_o, TNode<Int32T> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<PreparseData, Int32T> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PreparseData, Int32T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PreparseData, Int32T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<PreparseData> tmp0;
    TNode<Int32T> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 683);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(PreparseData::kDataLengthOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<PreparseData> tmp3;
    TNode<Int32T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<PreparseData> tmp5;
    TNode<Int32T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Int32T> LoadPreparseDataInnerLength_763(compiler::CodeAssemblerState* state_, TNode<PreparseData> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<PreparseData> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PreparseData, Int32T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PreparseData, Int32T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<PreparseData> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 684);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(PreparseData::kInnerLengthOffset);
    USE(tmp1);
    TNode<Int32T>tmp2 = CodeStubAssembler(state_).LoadReference<Int32T>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<PreparseData> tmp3;
    TNode<Int32T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<PreparseData> tmp5;
    TNode<Int32T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Int32T>{tmp6};
}

void StorePreparseDataInnerLength_764(compiler::CodeAssemblerState* state_, TNode<PreparseData> p_o, TNode<Int32T> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<PreparseData, Int32T> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PreparseData, Int32T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PreparseData, Int32T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<PreparseData> tmp0;
    TNode<Int32T> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 684);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(PreparseData::kInnerLengthOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<PreparseData> tmp3;
    TNode<Int32T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<PreparseData> tmp5;
    TNode<Int32T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<BytecodeArray> LoadInterpreterDataBytecodeArray_765(compiler::CodeAssemblerState* state_, TNode<InterpreterData> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<InterpreterData> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<InterpreterData, BytecodeArray> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<InterpreterData, BytecodeArray> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<InterpreterData> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 688);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(InterpreterData::kBytecodeArrayOffset);
    USE(tmp1);
    TNode<BytecodeArray>tmp2 = CodeStubAssembler(state_).LoadReference<BytecodeArray>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<InterpreterData> tmp3;
    TNode<BytecodeArray> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<InterpreterData> tmp5;
    TNode<BytecodeArray> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<BytecodeArray>{tmp6};
}

void StoreInterpreterDataBytecodeArray_766(compiler::CodeAssemblerState* state_, TNode<InterpreterData> p_o, TNode<BytecodeArray> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<InterpreterData, BytecodeArray> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<InterpreterData, BytecodeArray> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<InterpreterData, BytecodeArray> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<InterpreterData> tmp0;
    TNode<BytecodeArray> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 688);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(InterpreterData::kBytecodeArrayOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<InterpreterData> tmp3;
    TNode<BytecodeArray> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<InterpreterData> tmp5;
    TNode<BytecodeArray> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Code> LoadInterpreterDataInterpreterTrampoline_767(compiler::CodeAssemblerState* state_, TNode<InterpreterData> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<InterpreterData> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<InterpreterData, Code> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<InterpreterData, Code> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<InterpreterData> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 689);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(InterpreterData::kInterpreterTrampolineOffset);
    USE(tmp1);
    TNode<Code>tmp2 = CodeStubAssembler(state_).LoadReference<Code>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<InterpreterData> tmp3;
    TNode<Code> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<InterpreterData> tmp5;
    TNode<Code> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Code>{tmp6};
}

void StoreInterpreterDataInterpreterTrampoline_768(compiler::CodeAssemblerState* state_, TNode<InterpreterData> p_o, TNode<Code> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<InterpreterData, Code> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<InterpreterData, Code> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<InterpreterData, Code> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<InterpreterData> tmp0;
    TNode<Code> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 689);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(InterpreterData::kInterpreterTrampolineOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<InterpreterData> tmp3;
    TNode<Code> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<InterpreterData> tmp5;
    TNode<Code> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadSharedFunctionInfoFunctionData_769(compiler::CodeAssemblerState* state_, TNode<SharedFunctionInfo> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<SharedFunctionInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SharedFunctionInfo, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SharedFunctionInfo, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<SharedFunctionInfo> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 693);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(SharedFunctionInfo::kFunctionDataOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<SharedFunctionInfo> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<SharedFunctionInfo> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreSharedFunctionInfoFunctionData_770(compiler::CodeAssemblerState* state_, TNode<SharedFunctionInfo> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<SharedFunctionInfo, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SharedFunctionInfo, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SharedFunctionInfo, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<SharedFunctionInfo> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 693);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(SharedFunctionInfo::kFunctionDataOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<SharedFunctionInfo> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<SharedFunctionInfo> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadSharedFunctionInfoNameOrScopeInfo_771(compiler::CodeAssemblerState* state_, TNode<SharedFunctionInfo> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<SharedFunctionInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SharedFunctionInfo, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SharedFunctionInfo, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<SharedFunctionInfo> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 694);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(SharedFunctionInfo::kNameOrScopeInfoOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<SharedFunctionInfo> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<SharedFunctionInfo> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreSharedFunctionInfoNameOrScopeInfo_772(compiler::CodeAssemblerState* state_, TNode<SharedFunctionInfo> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<SharedFunctionInfo, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SharedFunctionInfo, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SharedFunctionInfo, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<SharedFunctionInfo> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 694);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(SharedFunctionInfo::kNameOrScopeInfoOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<SharedFunctionInfo> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<SharedFunctionInfo> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<HeapObject> LoadSharedFunctionInfoOuterScopeInfoOrFeedbackMetadata_773(compiler::CodeAssemblerState* state_, TNode<SharedFunctionInfo> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<SharedFunctionInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SharedFunctionInfo, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SharedFunctionInfo, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<SharedFunctionInfo> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 695);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(SharedFunctionInfo::kOuterScopeInfoOrFeedbackMetadataOffset);
    USE(tmp1);
    TNode<HeapObject>tmp2 = CodeStubAssembler(state_).LoadReference<HeapObject>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<SharedFunctionInfo> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<SharedFunctionInfo> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<HeapObject>{tmp6};
}

void StoreSharedFunctionInfoOuterScopeInfoOrFeedbackMetadata_774(compiler::CodeAssemblerState* state_, TNode<SharedFunctionInfo> p_o, TNode<HeapObject> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<SharedFunctionInfo, HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SharedFunctionInfo, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SharedFunctionInfo, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<SharedFunctionInfo> tmp0;
    TNode<HeapObject> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 695);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(SharedFunctionInfo::kOuterScopeInfoOrFeedbackMetadataOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<SharedFunctionInfo> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<SharedFunctionInfo> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<HeapObject> LoadSharedFunctionInfoScriptOrDebugInfo_775(compiler::CodeAssemblerState* state_, TNode<SharedFunctionInfo> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<SharedFunctionInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SharedFunctionInfo, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SharedFunctionInfo, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<SharedFunctionInfo> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 696);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(SharedFunctionInfo::kScriptOrDebugInfoOffset);
    USE(tmp1);
    TNode<HeapObject>tmp2 = CodeStubAssembler(state_).LoadReference<HeapObject>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<SharedFunctionInfo> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<SharedFunctionInfo> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<HeapObject>{tmp6};
}

void StoreSharedFunctionInfoScriptOrDebugInfo_776(compiler::CodeAssemblerState* state_, TNode<SharedFunctionInfo> p_o, TNode<HeapObject> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<SharedFunctionInfo, HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SharedFunctionInfo, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SharedFunctionInfo, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<SharedFunctionInfo> tmp0;
    TNode<HeapObject> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 696);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(SharedFunctionInfo::kScriptOrDebugInfoOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<SharedFunctionInfo> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<SharedFunctionInfo> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Int16T> LoadSharedFunctionInfoLength_777(compiler::CodeAssemblerState* state_, TNode<SharedFunctionInfo> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<SharedFunctionInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SharedFunctionInfo, Int16T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SharedFunctionInfo, Int16T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<SharedFunctionInfo> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 697);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(SharedFunctionInfo::kLengthOffset);
    USE(tmp1);
    TNode<Int16T>tmp2 = CodeStubAssembler(state_).LoadReference<Int16T>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<SharedFunctionInfo> tmp3;
    TNode<Int16T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<SharedFunctionInfo> tmp5;
    TNode<Int16T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Int16T>{tmp6};
}

void StoreSharedFunctionInfoLength_778(compiler::CodeAssemblerState* state_, TNode<SharedFunctionInfo> p_o, TNode<Int16T> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<SharedFunctionInfo, Int16T> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SharedFunctionInfo, Int16T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SharedFunctionInfo, Int16T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<SharedFunctionInfo> tmp0;
    TNode<Int16T> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 697);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(SharedFunctionInfo::kLengthOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<SharedFunctionInfo> tmp3;
    TNode<Int16T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<SharedFunctionInfo> tmp5;
    TNode<Int16T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Uint16T> LoadSharedFunctionInfoFormalParameterCount_779(compiler::CodeAssemblerState* state_, TNode<SharedFunctionInfo> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<SharedFunctionInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SharedFunctionInfo, Uint16T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SharedFunctionInfo, Uint16T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<SharedFunctionInfo> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 698);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(SharedFunctionInfo::kFormalParameterCountOffset);
    USE(tmp1);
    TNode<Uint16T>tmp2 = CodeStubAssembler(state_).LoadReference<Uint16T>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<SharedFunctionInfo> tmp3;
    TNode<Uint16T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<SharedFunctionInfo> tmp5;
    TNode<Uint16T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Uint16T>{tmp6};
}

void StoreSharedFunctionInfoFormalParameterCount_780(compiler::CodeAssemblerState* state_, TNode<SharedFunctionInfo> p_o, TNode<Uint16T> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<SharedFunctionInfo, Uint16T> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SharedFunctionInfo, Uint16T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SharedFunctionInfo, Uint16T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<SharedFunctionInfo> tmp0;
    TNode<Uint16T> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 698);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(SharedFunctionInfo::kFormalParameterCountOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<SharedFunctionInfo> tmp3;
    TNode<Uint16T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<SharedFunctionInfo> tmp5;
    TNode<Uint16T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Uint16T> LoadSharedFunctionInfoExpectedNofProperties_781(compiler::CodeAssemblerState* state_, TNode<SharedFunctionInfo> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<SharedFunctionInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SharedFunctionInfo, Uint16T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SharedFunctionInfo, Uint16T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<SharedFunctionInfo> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 700);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(SharedFunctionInfo::kExpectedNofPropertiesOffset);
    USE(tmp1);
    TNode<Uint16T>tmp2 = CodeStubAssembler(state_).LoadReference<Uint16T>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<SharedFunctionInfo> tmp3;
    TNode<Uint16T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<SharedFunctionInfo> tmp5;
    TNode<Uint16T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Uint16T>{tmp6};
}

void StoreSharedFunctionInfoExpectedNofProperties_782(compiler::CodeAssemblerState* state_, TNode<SharedFunctionInfo> p_o, TNode<Uint16T> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<SharedFunctionInfo, Uint16T> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SharedFunctionInfo, Uint16T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SharedFunctionInfo, Uint16T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<SharedFunctionInfo> tmp0;
    TNode<Uint16T> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 700);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(SharedFunctionInfo::kExpectedNofPropertiesOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<SharedFunctionInfo> tmp3;
    TNode<Uint16T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<SharedFunctionInfo> tmp5;
    TNode<Uint16T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Int16T> LoadSharedFunctionInfoFunctionTokenOffset_783(compiler::CodeAssemblerState* state_, TNode<SharedFunctionInfo> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<SharedFunctionInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SharedFunctionInfo, Int16T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SharedFunctionInfo, Int16T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<SharedFunctionInfo> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 701);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(SharedFunctionInfo::kFunctionTokenOffsetOffset);
    USE(tmp1);
    TNode<Int16T>tmp2 = CodeStubAssembler(state_).LoadReference<Int16T>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<SharedFunctionInfo> tmp3;
    TNode<Int16T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<SharedFunctionInfo> tmp5;
    TNode<Int16T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Int16T>{tmp6};
}

void StoreSharedFunctionInfoFunctionTokenOffset_784(compiler::CodeAssemblerState* state_, TNode<SharedFunctionInfo> p_o, TNode<Int16T> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<SharedFunctionInfo, Int16T> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SharedFunctionInfo, Int16T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SharedFunctionInfo, Int16T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<SharedFunctionInfo> tmp0;
    TNode<Int16T> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 701);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(SharedFunctionInfo::kFunctionTokenOffsetOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<SharedFunctionInfo> tmp3;
    TNode<Int16T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<SharedFunctionInfo> tmp5;
    TNode<Int16T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Int32T> LoadSharedFunctionInfoFlags_785(compiler::CodeAssemblerState* state_, TNode<SharedFunctionInfo> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<SharedFunctionInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SharedFunctionInfo, Int32T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SharedFunctionInfo, Int32T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<SharedFunctionInfo> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 702);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(SharedFunctionInfo::kFlagsOffset);
    USE(tmp1);
    TNode<Int32T>tmp2 = CodeStubAssembler(state_).LoadReference<Int32T>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<SharedFunctionInfo> tmp3;
    TNode<Int32T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<SharedFunctionInfo> tmp5;
    TNode<Int32T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Int32T>{tmp6};
}

void StoreSharedFunctionInfoFlags_786(compiler::CodeAssemblerState* state_, TNode<SharedFunctionInfo> p_o, TNode<Int32T> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<SharedFunctionInfo, Int32T> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SharedFunctionInfo, Int32T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SharedFunctionInfo, Int32T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<SharedFunctionInfo> tmp0;
    TNode<Int32T> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 702);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(SharedFunctionInfo::kFlagsOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<SharedFunctionInfo> tmp3;
    TNode<Int32T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<SharedFunctionInfo> tmp5;
    TNode<Int32T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Int32T> LoadSharedFunctionInfoFunctionLiteralId_787(compiler::CodeAssemblerState* state_, TNode<SharedFunctionInfo> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<SharedFunctionInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SharedFunctionInfo, Int32T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SharedFunctionInfo, Int32T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<SharedFunctionInfo> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 703);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(SharedFunctionInfo::kFunctionLiteralIdOffset);
    USE(tmp1);
    TNode<Int32T>tmp2 = CodeStubAssembler(state_).LoadReference<Int32T>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<SharedFunctionInfo> tmp3;
    TNode<Int32T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<SharedFunctionInfo> tmp5;
    TNode<Int32T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Int32T>{tmp6};
}

void StoreSharedFunctionInfoFunctionLiteralId_788(compiler::CodeAssemblerState* state_, TNode<SharedFunctionInfo> p_o, TNode<Int32T> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<SharedFunctionInfo, Int32T> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SharedFunctionInfo, Int32T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SharedFunctionInfo, Int32T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<SharedFunctionInfo> tmp0;
    TNode<Int32T> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 703);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(SharedFunctionInfo::kFunctionLiteralIdOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<SharedFunctionInfo> tmp3;
    TNode<Int32T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<SharedFunctionInfo> tmp5;
    TNode<Int32T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<String> LoadUncompiledDataInferredName_789(compiler::CodeAssemblerState* state_, TNode<UncompiledData> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<UncompiledData> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<UncompiledData, String> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<UncompiledData, String> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<UncompiledData> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 710);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(UncompiledData::kInferredNameOffset);
    USE(tmp1);
    TNode<String>tmp2 = CodeStubAssembler(state_).LoadReference<String>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<UncompiledData> tmp3;
    TNode<String> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<UncompiledData> tmp5;
    TNode<String> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<String>{tmp6};
}

void StoreUncompiledDataInferredName_790(compiler::CodeAssemblerState* state_, TNode<UncompiledData> p_o, TNode<String> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<UncompiledData, String> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<UncompiledData, String> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<UncompiledData, String> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<UncompiledData> tmp0;
    TNode<String> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 710);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(UncompiledData::kInferredNameOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<UncompiledData> tmp3;
    TNode<String> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<UncompiledData> tmp5;
    TNode<String> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Int32T> LoadUncompiledDataStartPosition_791(compiler::CodeAssemblerState* state_, TNode<UncompiledData> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<UncompiledData> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<UncompiledData, Int32T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<UncompiledData, Int32T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<UncompiledData> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 711);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(UncompiledData::kStartPositionOffset);
    USE(tmp1);
    TNode<Int32T>tmp2 = CodeStubAssembler(state_).LoadReference<Int32T>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<UncompiledData> tmp3;
    TNode<Int32T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<UncompiledData> tmp5;
    TNode<Int32T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Int32T>{tmp6};
}

void StoreUncompiledDataStartPosition_792(compiler::CodeAssemblerState* state_, TNode<UncompiledData> p_o, TNode<Int32T> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<UncompiledData, Int32T> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<UncompiledData, Int32T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<UncompiledData, Int32T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<UncompiledData> tmp0;
    TNode<Int32T> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 711);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(UncompiledData::kStartPositionOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<UncompiledData> tmp3;
    TNode<Int32T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<UncompiledData> tmp5;
    TNode<Int32T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Int32T> LoadUncompiledDataEndPosition_793(compiler::CodeAssemblerState* state_, TNode<UncompiledData> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<UncompiledData> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<UncompiledData, Int32T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<UncompiledData, Int32T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<UncompiledData> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 712);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(UncompiledData::kEndPositionOffset);
    USE(tmp1);
    TNode<Int32T>tmp2 = CodeStubAssembler(state_).LoadReference<Int32T>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<UncompiledData> tmp3;
    TNode<Int32T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<UncompiledData> tmp5;
    TNode<Int32T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Int32T>{tmp6};
}

void StoreUncompiledDataEndPosition_794(compiler::CodeAssemblerState* state_, TNode<UncompiledData> p_o, TNode<Int32T> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<UncompiledData, Int32T> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<UncompiledData, Int32T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<UncompiledData, Int32T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<UncompiledData> tmp0;
    TNode<Int32T> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 712);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(UncompiledData::kEndPositionOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<UncompiledData> tmp3;
    TNode<Int32T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<UncompiledData> tmp5;
    TNode<Int32T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<PreparseData> LoadUncompiledDataWithPreparseDataPreparseData_795(compiler::CodeAssemblerState* state_, TNode<UncompiledDataWithPreparseData> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<UncompiledDataWithPreparseData> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<UncompiledDataWithPreparseData, PreparseData> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<UncompiledDataWithPreparseData, PreparseData> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<UncompiledDataWithPreparseData> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 721);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(UncompiledDataWithPreparseData::kPreparseDataOffset);
    USE(tmp1);
    TNode<PreparseData>tmp2 = CodeStubAssembler(state_).LoadReference<PreparseData>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<UncompiledDataWithPreparseData> tmp3;
    TNode<PreparseData> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<UncompiledDataWithPreparseData> tmp5;
    TNode<PreparseData> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<PreparseData>{tmp6};
}

void StoreUncompiledDataWithPreparseDataPreparseData_796(compiler::CodeAssemblerState* state_, TNode<UncompiledDataWithPreparseData> p_o, TNode<PreparseData> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<UncompiledDataWithPreparseData, PreparseData> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<UncompiledDataWithPreparseData, PreparseData> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<UncompiledDataWithPreparseData, PreparseData> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<UncompiledDataWithPreparseData> tmp0;
    TNode<PreparseData> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 721);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(UncompiledDataWithPreparseData::kPreparseDataOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<UncompiledDataWithPreparseData> tmp3;
    TNode<PreparseData> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<UncompiledDataWithPreparseData> tmp5;
    TNode<PreparseData> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<JSReceiver> LoadJSBoundFunctionBoundTargetFunction_797(compiler::CodeAssemblerState* state_, TNode<JSBoundFunction> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSBoundFunction> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSBoundFunction, JSReceiver> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSBoundFunction, JSReceiver> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSBoundFunction> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 727);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSBoundFunction::kBoundTargetFunctionOffset);
    USE(tmp1);
    TNode<JSReceiver>tmp2 = CodeStubAssembler(state_).LoadReference<JSReceiver>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSBoundFunction> tmp3;
    TNode<JSReceiver> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSBoundFunction> tmp5;
    TNode<JSReceiver> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<JSReceiver>{tmp6};
}

void StoreJSBoundFunctionBoundTargetFunction_798(compiler::CodeAssemblerState* state_, TNode<JSBoundFunction> p_o, TNode<JSReceiver> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSBoundFunction, JSReceiver> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSBoundFunction, JSReceiver> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSBoundFunction, JSReceiver> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSBoundFunction> tmp0;
    TNode<JSReceiver> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 727);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSBoundFunction::kBoundTargetFunctionOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSBoundFunction> tmp3;
    TNode<JSReceiver> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSBoundFunction> tmp5;
    TNode<JSReceiver> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadJSBoundFunctionBoundThis_799(compiler::CodeAssemblerState* state_, TNode<JSBoundFunction> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSBoundFunction> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSBoundFunction, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSBoundFunction, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSBoundFunction> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 730);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSBoundFunction::kBoundThisOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSBoundFunction> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSBoundFunction> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreJSBoundFunctionBoundThis_800(compiler::CodeAssemblerState* state_, TNode<JSBoundFunction> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSBoundFunction, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSBoundFunction, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSBoundFunction, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSBoundFunction> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 730);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSBoundFunction::kBoundThisOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSBoundFunction> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSBoundFunction> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<FixedArray> LoadJSBoundFunctionBoundArguments_801(compiler::CodeAssemblerState* state_, TNode<JSBoundFunction> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSBoundFunction> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSBoundFunction, FixedArray> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSBoundFunction, FixedArray> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSBoundFunction> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 733);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSBoundFunction::kBoundArgumentsOffset);
    USE(tmp1);
    TNode<FixedArray>tmp2 = CodeStubAssembler(state_).LoadReference<FixedArray>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSBoundFunction> tmp3;
    TNode<FixedArray> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSBoundFunction> tmp5;
    TNode<FixedArray> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<FixedArray>{tmp6};
}

void StoreJSBoundFunctionBoundArguments_802(compiler::CodeAssemblerState* state_, TNode<JSBoundFunction> p_o, TNode<FixedArray> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSBoundFunction, FixedArray> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSBoundFunction, FixedArray> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSBoundFunction, FixedArray> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSBoundFunction> tmp0;
    TNode<FixedArray> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 733);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSBoundFunction::kBoundArgumentsOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSBoundFunction> tmp3;
    TNode<FixedArray> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSBoundFunction> tmp5;
    TNode<FixedArray> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<RawPtrT> LoadForeignForeignAddress_803(compiler::CodeAssemblerState* state_, TNode<Foreign> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Foreign> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Foreign, RawPtrT> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Foreign, RawPtrT> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<Foreign> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 973);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(Foreign::kForeignAddressOffset);
    USE(tmp1);
    TNode<RawPtrT>tmp2 = CodeStubAssembler(state_).LoadReference<RawPtrT>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<Foreign> tmp3;
    TNode<RawPtrT> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Foreign> tmp5;
    TNode<RawPtrT> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<RawPtrT>{tmp6};
}

void StoreForeignForeignAddress_804(compiler::CodeAssemblerState* state_, TNode<Foreign> p_o, TNode<RawPtrT> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Foreign, RawPtrT> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Foreign, RawPtrT> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Foreign, RawPtrT> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<Foreign> tmp0;
    TNode<RawPtrT> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 973);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(Foreign::kForeignAddressOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<Foreign> tmp3;
    TNode<RawPtrT> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Foreign> tmp5;
    TNode<RawPtrT> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Smi> LoadFreeSpaceSize_805(compiler::CodeAssemblerState* state_, TNode<FreeSpace> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<FreeSpace> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FreeSpace, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FreeSpace, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<FreeSpace> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 759);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(FreeSpace::kSizeOffset);
    USE(tmp1);
    TNode<Smi>tmp2 = CodeStubAssembler(state_).LoadReference<Smi>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<FreeSpace> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<FreeSpace> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Smi>{tmp6};
}

void StoreFreeSpaceSize_806(compiler::CodeAssemblerState* state_, TNode<FreeSpace> p_o, TNode<Smi> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<FreeSpace, Smi> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FreeSpace, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FreeSpace, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<FreeSpace> tmp0;
    TNode<Smi> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 759);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(FreeSpace::kSizeOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<FreeSpace> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<FreeSpace> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadFreeSpaceNext_807(compiler::CodeAssemblerState* state_, TNode<FreeSpace> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<FreeSpace> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FreeSpace, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FreeSpace, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<FreeSpace> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 760);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(FreeSpace::kNextOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<FreeSpace> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<FreeSpace> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreFreeSpaceNext_808(compiler::CodeAssemblerState* state_, TNode<FreeSpace> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<FreeSpace, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FreeSpace, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FreeSpace, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<FreeSpace> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 760);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(FreeSpace::kNextOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<FreeSpace> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<FreeSpace> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<UintPtrT> LoadJSArrayBufferByteLength_809(compiler::CodeAssemblerState* state_, TNode<JSArrayBuffer> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSArrayBuffer> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSArrayBuffer, UintPtrT> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSArrayBuffer, UintPtrT> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSArrayBuffer> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 810);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSArrayBuffer::kByteLengthOffset);
    USE(tmp1);
    TNode<UintPtrT>tmp2 = CodeStubAssembler(state_).LoadReference<UintPtrT>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSArrayBuffer> tmp3;
    TNode<UintPtrT> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSArrayBuffer> tmp5;
    TNode<UintPtrT> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<UintPtrT>{tmp6};
}

void StoreJSArrayBufferByteLength_810(compiler::CodeAssemblerState* state_, TNode<JSArrayBuffer> p_o, TNode<UintPtrT> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSArrayBuffer, UintPtrT> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSArrayBuffer, UintPtrT> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSArrayBuffer, UintPtrT> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSArrayBuffer> tmp0;
    TNode<UintPtrT> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 810);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSArrayBuffer::kByteLengthOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSArrayBuffer> tmp3;
    TNode<UintPtrT> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSArrayBuffer> tmp5;
    TNode<UintPtrT> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<RawPtrT> LoadJSArrayBufferBackingStore_811(compiler::CodeAssemblerState* state_, TNode<JSArrayBuffer> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSArrayBuffer> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSArrayBuffer, RawPtrT> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSArrayBuffer, RawPtrT> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSArrayBuffer> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 811);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSArrayBuffer::kBackingStoreOffset);
    USE(tmp1);
    TNode<RawPtrT>tmp2 = CodeStubAssembler(state_).LoadReference<RawPtrT>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSArrayBuffer> tmp3;
    TNode<RawPtrT> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSArrayBuffer> tmp5;
    TNode<RawPtrT> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<RawPtrT>{tmp6};
}

void StoreJSArrayBufferBackingStore_812(compiler::CodeAssemblerState* state_, TNode<JSArrayBuffer> p_o, TNode<RawPtrT> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSArrayBuffer, RawPtrT> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSArrayBuffer, RawPtrT> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSArrayBuffer, RawPtrT> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSArrayBuffer> tmp0;
    TNode<RawPtrT> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 811);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSArrayBuffer::kBackingStoreOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSArrayBuffer> tmp3;
    TNode<RawPtrT> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSArrayBuffer> tmp5;
    TNode<RawPtrT> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<JSArrayBuffer> LoadJSArrayBufferViewBuffer_813(compiler::CodeAssemblerState* state_, TNode<JSArrayBufferView> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSArrayBufferView> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSArrayBufferView, JSArrayBuffer> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSArrayBufferView, JSArrayBuffer> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSArrayBufferView> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 816);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSArrayBufferView::kBufferOffset);
    USE(tmp1);
    TNode<JSArrayBuffer>tmp2 = CodeStubAssembler(state_).LoadReference<JSArrayBuffer>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSArrayBufferView> tmp3;
    TNode<JSArrayBuffer> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSArrayBufferView> tmp5;
    TNode<JSArrayBuffer> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<JSArrayBuffer>{tmp6};
}

void StoreJSArrayBufferViewBuffer_814(compiler::CodeAssemblerState* state_, TNode<JSArrayBufferView> p_o, TNode<JSArrayBuffer> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSArrayBufferView, JSArrayBuffer> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSArrayBufferView, JSArrayBuffer> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSArrayBufferView, JSArrayBuffer> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSArrayBufferView> tmp0;
    TNode<JSArrayBuffer> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 816);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSArrayBufferView::kBufferOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSArrayBufferView> tmp3;
    TNode<JSArrayBuffer> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSArrayBufferView> tmp5;
    TNode<JSArrayBuffer> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<UintPtrT> LoadJSArrayBufferViewByteOffset_815(compiler::CodeAssemblerState* state_, TNode<JSArrayBufferView> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSArrayBufferView> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSArrayBufferView, UintPtrT> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSArrayBufferView, UintPtrT> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSArrayBufferView> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 817);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSArrayBufferView::kByteOffsetOffset);
    USE(tmp1);
    TNode<UintPtrT>tmp2 = CodeStubAssembler(state_).LoadReference<UintPtrT>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSArrayBufferView> tmp3;
    TNode<UintPtrT> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSArrayBufferView> tmp5;
    TNode<UintPtrT> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<UintPtrT>{tmp6};
}

void StoreJSArrayBufferViewByteOffset_816(compiler::CodeAssemblerState* state_, TNode<JSArrayBufferView> p_o, TNode<UintPtrT> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSArrayBufferView, UintPtrT> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSArrayBufferView, UintPtrT> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSArrayBufferView, UintPtrT> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSArrayBufferView> tmp0;
    TNode<UintPtrT> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 817);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSArrayBufferView::kByteOffsetOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSArrayBufferView> tmp3;
    TNode<UintPtrT> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSArrayBufferView> tmp5;
    TNode<UintPtrT> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<UintPtrT> LoadJSArrayBufferViewByteLength_817(compiler::CodeAssemblerState* state_, TNode<JSArrayBufferView> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSArrayBufferView> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSArrayBufferView, UintPtrT> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSArrayBufferView, UintPtrT> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSArrayBufferView> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 818);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSArrayBufferView::kByteLengthOffset);
    USE(tmp1);
    TNode<UintPtrT>tmp2 = CodeStubAssembler(state_).LoadReference<UintPtrT>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSArrayBufferView> tmp3;
    TNode<UintPtrT> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSArrayBufferView> tmp5;
    TNode<UintPtrT> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<UintPtrT>{tmp6};
}

void StoreJSArrayBufferViewByteLength_818(compiler::CodeAssemblerState* state_, TNode<JSArrayBufferView> p_o, TNode<UintPtrT> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSArrayBufferView, UintPtrT> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSArrayBufferView, UintPtrT> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSArrayBufferView, UintPtrT> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSArrayBufferView> tmp0;
    TNode<UintPtrT> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 818);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSArrayBufferView::kByteLengthOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSArrayBufferView> tmp3;
    TNode<UintPtrT> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSArrayBufferView> tmp5;
    TNode<UintPtrT> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<UintPtrT> LoadJSTypedArrayLength_819(compiler::CodeAssemblerState* state_, TNode<JSTypedArray> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSTypedArray> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSTypedArray, UintPtrT> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSTypedArray, UintPtrT> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSTypedArray> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 822);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSTypedArray::kLengthOffset);
    USE(tmp1);
    TNode<UintPtrT>tmp2 = CodeStubAssembler(state_).LoadReference<UintPtrT>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSTypedArray> tmp3;
    TNode<UintPtrT> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSTypedArray> tmp5;
    TNode<UintPtrT> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<UintPtrT>{tmp6};
}

void StoreJSTypedArrayLength_820(compiler::CodeAssemblerState* state_, TNode<JSTypedArray> p_o, TNode<UintPtrT> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSTypedArray, UintPtrT> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSTypedArray, UintPtrT> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSTypedArray, UintPtrT> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSTypedArray> tmp0;
    TNode<UintPtrT> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 822);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSTypedArray::kLengthOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSTypedArray> tmp3;
    TNode<UintPtrT> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSTypedArray> tmp5;
    TNode<UintPtrT> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<RawPtrT> LoadJSTypedArrayExternalPointer_821(compiler::CodeAssemblerState* state_, TNode<JSTypedArray> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSTypedArray> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSTypedArray, RawPtrT> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSTypedArray, RawPtrT> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSTypedArray> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 823);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSTypedArray::kExternalPointerOffset);
    USE(tmp1);
    TNode<RawPtrT>tmp2 = CodeStubAssembler(state_).LoadReference<RawPtrT>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSTypedArray> tmp3;
    TNode<RawPtrT> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSTypedArray> tmp5;
    TNode<RawPtrT> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<RawPtrT>{tmp6};
}

void StoreJSTypedArrayExternalPointer_822(compiler::CodeAssemblerState* state_, TNode<JSTypedArray> p_o, TNode<RawPtrT> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSTypedArray, RawPtrT> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSTypedArray, RawPtrT> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSTypedArray, RawPtrT> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSTypedArray> tmp0;
    TNode<RawPtrT> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 823);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSTypedArray::kExternalPointerOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSTypedArray> tmp3;
    TNode<RawPtrT> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSTypedArray> tmp5;
    TNode<RawPtrT> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadJSTypedArrayBasePointer_823(compiler::CodeAssemblerState* state_, TNode<JSTypedArray> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSTypedArray> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSTypedArray, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSTypedArray, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSTypedArray> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 824);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSTypedArray::kBasePointerOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSTypedArray> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSTypedArray> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreJSTypedArrayBasePointer_824(compiler::CodeAssemblerState* state_, TNode<JSTypedArray> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSTypedArray, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSTypedArray, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSTypedArray, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSTypedArray> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 824);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSTypedArray::kBasePointerOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSTypedArray> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSTypedArray> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadJSCollectionTable_825(compiler::CodeAssemblerState* state_, TNode<JSCollection> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSCollection> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSCollection, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSCollection, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSCollection> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 831);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSCollection::kTableOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSCollection> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSCollection> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreJSCollectionTable_826(compiler::CodeAssemblerState* state_, TNode<JSCollection> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSCollection, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSCollection, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSCollection, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSCollection> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 831);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSCollection::kTableOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSCollection> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSCollection> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadJSDateValue_827(compiler::CodeAssemblerState* state_, TNode<JSDate> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSDate> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSDate, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSDate, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSDate> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 845);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSDate::kValueOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSDate> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSDate> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreJSDateValue_828(compiler::CodeAssemblerState* state_, TNode<JSDate> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSDate, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSDate, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSDate, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSDate> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 845);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSDate::kValueOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSDate> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSDate> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadJSDateYear_829(compiler::CodeAssemblerState* state_, TNode<JSDate> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSDate> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSDate, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSDate, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSDate> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 848);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSDate::kYearOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSDate> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSDate> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreJSDateYear_830(compiler::CodeAssemblerState* state_, TNode<JSDate> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSDate, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSDate, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSDate, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSDate> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 848);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSDate::kYearOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSDate> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSDate> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadJSDateMonth_831(compiler::CodeAssemblerState* state_, TNode<JSDate> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSDate> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSDate, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSDate, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSDate> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 849);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSDate::kMonthOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSDate> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSDate> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreJSDateMonth_832(compiler::CodeAssemblerState* state_, TNode<JSDate> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSDate, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSDate, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSDate, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSDate> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 849);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSDate::kMonthOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSDate> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSDate> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadJSDateDay_833(compiler::CodeAssemblerState* state_, TNode<JSDate> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSDate> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSDate, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSDate, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSDate> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 850);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSDate::kDayOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSDate> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSDate> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreJSDateDay_834(compiler::CodeAssemblerState* state_, TNode<JSDate> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSDate, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSDate, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSDate, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSDate> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 850);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSDate::kDayOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSDate> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSDate> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadJSDateWeekday_835(compiler::CodeAssemblerState* state_, TNode<JSDate> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSDate> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSDate, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSDate, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSDate> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 851);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSDate::kWeekdayOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSDate> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSDate> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreJSDateWeekday_836(compiler::CodeAssemblerState* state_, TNode<JSDate> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSDate, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSDate, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSDate, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSDate> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 851);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSDate::kWeekdayOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSDate> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSDate> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadJSDateHour_837(compiler::CodeAssemblerState* state_, TNode<JSDate> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSDate> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSDate, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSDate, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSDate> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 852);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSDate::kHourOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSDate> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSDate> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreJSDateHour_838(compiler::CodeAssemblerState* state_, TNode<JSDate> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSDate, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSDate, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSDate, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSDate> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 852);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSDate::kHourOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSDate> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSDate> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadJSDateMin_839(compiler::CodeAssemblerState* state_, TNode<JSDate> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSDate> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSDate, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSDate, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSDate> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 853);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSDate::kMinOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSDate> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSDate> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreJSDateMin_840(compiler::CodeAssemblerState* state_, TNode<JSDate> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSDate, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSDate, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSDate, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSDate> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 853);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSDate::kMinOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSDate> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSDate> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadJSDateSec_841(compiler::CodeAssemblerState* state_, TNode<JSDate> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSDate> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSDate, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSDate, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSDate> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 854);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSDate::kSecOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSDate> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSDate> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreJSDateSec_842(compiler::CodeAssemblerState* state_, TNode<JSDate> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSDate, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSDate, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSDate, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSDate> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 854);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSDate::kSecOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSDate> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSDate> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadJSDateCacheStamp_843(compiler::CodeAssemblerState* state_, TNode<JSDate> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSDate> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSDate, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSDate, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSDate> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 858);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSDate::kCacheStampOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSDate> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSDate> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreJSDateCacheStamp_844(compiler::CodeAssemblerState* state_, TNode<JSDate> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSDate, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSDate, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSDate, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSDate> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 858);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSDate::kCacheStampOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSDate> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSDate> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<NativeContext> LoadJSGlobalObjectNativeContext_845(compiler::CodeAssemblerState* state_, TNode<JSGlobalObject> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSGlobalObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSGlobalObject, NativeContext> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSGlobalObject, NativeContext> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSGlobalObject> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 862);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSGlobalObject::kNativeContextOffset);
    USE(tmp1);
    TNode<NativeContext>tmp2 = CodeStubAssembler(state_).LoadReference<NativeContext>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSGlobalObject> tmp3;
    TNode<NativeContext> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSGlobalObject> tmp5;
    TNode<NativeContext> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<NativeContext>{tmp6};
}

void StoreJSGlobalObjectNativeContext_846(compiler::CodeAssemblerState* state_, TNode<JSGlobalObject> p_o, TNode<NativeContext> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSGlobalObject, NativeContext> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSGlobalObject, NativeContext> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSGlobalObject, NativeContext> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSGlobalObject> tmp0;
    TNode<NativeContext> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 862);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSGlobalObject::kNativeContextOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSGlobalObject> tmp3;
    TNode<NativeContext> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSGlobalObject> tmp5;
    TNode<NativeContext> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<JSGlobalProxy> LoadJSGlobalObjectGlobalProxy_847(compiler::CodeAssemblerState* state_, TNode<JSGlobalObject> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSGlobalObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSGlobalObject, JSGlobalProxy> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSGlobalObject, JSGlobalProxy> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSGlobalObject> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 863);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSGlobalObject::kGlobalProxyOffset);
    USE(tmp1);
    TNode<JSGlobalProxy>tmp2 = CodeStubAssembler(state_).LoadReference<JSGlobalProxy>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSGlobalObject> tmp3;
    TNode<JSGlobalProxy> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSGlobalObject> tmp5;
    TNode<JSGlobalProxy> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<JSGlobalProxy>{tmp6};
}

void StoreJSGlobalObjectGlobalProxy_848(compiler::CodeAssemblerState* state_, TNode<JSGlobalObject> p_o, TNode<JSGlobalProxy> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSGlobalObject, JSGlobalProxy> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSGlobalObject, JSGlobalProxy> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSGlobalObject, JSGlobalProxy> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSGlobalObject> tmp0;
    TNode<JSGlobalProxy> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 863);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSGlobalObject::kGlobalProxyOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSGlobalObject> tmp3;
    TNode<JSGlobalProxy> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSGlobalObject> tmp5;
    TNode<JSGlobalProxy> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<JSReceiver> LoadJSAsyncFromSyncIteratorSyncIterator_849(compiler::CodeAssemblerState* state_, TNode<JSAsyncFromSyncIterator> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSAsyncFromSyncIterator> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSAsyncFromSyncIterator, JSReceiver> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSAsyncFromSyncIterator, JSReceiver> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSAsyncFromSyncIterator> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 868);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSAsyncFromSyncIterator::kSyncIteratorOffset);
    USE(tmp1);
    TNode<JSReceiver>tmp2 = CodeStubAssembler(state_).LoadReference<JSReceiver>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSAsyncFromSyncIterator> tmp3;
    TNode<JSReceiver> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSAsyncFromSyncIterator> tmp5;
    TNode<JSReceiver> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<JSReceiver>{tmp6};
}

void StoreJSAsyncFromSyncIteratorSyncIterator_850(compiler::CodeAssemblerState* state_, TNode<JSAsyncFromSyncIterator> p_o, TNode<JSReceiver> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSAsyncFromSyncIterator, JSReceiver> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSAsyncFromSyncIterator, JSReceiver> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSAsyncFromSyncIterator, JSReceiver> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSAsyncFromSyncIterator> tmp0;
    TNode<JSReceiver> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 868);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSAsyncFromSyncIterator::kSyncIteratorOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSAsyncFromSyncIterator> tmp3;
    TNode<JSReceiver> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSAsyncFromSyncIterator> tmp5;
    TNode<JSReceiver> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadJSAsyncFromSyncIteratorNext_851(compiler::CodeAssemblerState* state_, TNode<JSAsyncFromSyncIterator> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSAsyncFromSyncIterator> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSAsyncFromSyncIterator, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSAsyncFromSyncIterator, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSAsyncFromSyncIterator> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 871);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSAsyncFromSyncIterator::kNextOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSAsyncFromSyncIterator> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSAsyncFromSyncIterator> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreJSAsyncFromSyncIteratorNext_852(compiler::CodeAssemblerState* state_, TNode<JSAsyncFromSyncIterator> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSAsyncFromSyncIterator, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSAsyncFromSyncIterator, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSAsyncFromSyncIterator, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSAsyncFromSyncIterator> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 871);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSAsyncFromSyncIterator::kNextOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSAsyncFromSyncIterator> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSAsyncFromSyncIterator> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<String> LoadJSStringIteratorString_853(compiler::CodeAssemblerState* state_, TNode<JSStringIterator> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSStringIterator> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSStringIterator, String> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSStringIterator, String> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSStringIterator> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 875);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSStringIterator::kStringOffset);
    USE(tmp1);
    TNode<String>tmp2 = CodeStubAssembler(state_).LoadReference<String>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSStringIterator> tmp3;
    TNode<String> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSStringIterator> tmp5;
    TNode<String> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<String>{tmp6};
}

void StoreJSStringIteratorString_854(compiler::CodeAssemblerState* state_, TNode<JSStringIterator> p_o, TNode<String> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSStringIterator, String> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSStringIterator, String> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSStringIterator, String> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSStringIterator> tmp0;
    TNode<String> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 875);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSStringIterator::kStringOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSStringIterator> tmp3;
    TNode<String> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSStringIterator> tmp5;
    TNode<String> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Smi> LoadJSStringIteratorNextIndex_855(compiler::CodeAssemblerState* state_, TNode<JSStringIterator> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSStringIterator> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSStringIterator, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSStringIterator, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSStringIterator> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 876);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSStringIterator::kNextIndexOffset);
    USE(tmp1);
    TNode<Smi>tmp2 = CodeStubAssembler(state_).LoadReference<Smi>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSStringIterator> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSStringIterator> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Smi>{tmp6};
}

void StoreJSStringIteratorNextIndex_856(compiler::CodeAssemblerState* state_, TNode<JSStringIterator> p_o, TNode<Smi> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSStringIterator, Smi> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSStringIterator, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSStringIterator, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSStringIterator> tmp0;
    TNode<Smi> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 876);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSStringIterator::kNextIndexOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSStringIterator> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSStringIterator> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadTemplateInfoTag_857(compiler::CodeAssemblerState* state_, TNode<TemplateInfo> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<TemplateInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<TemplateInfo, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<TemplateInfo, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<TemplateInfo> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 882);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(TemplateInfo::kTagOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<TemplateInfo> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<TemplateInfo> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreTemplateInfoTag_858(compiler::CodeAssemblerState* state_, TNode<TemplateInfo> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<TemplateInfo, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<TemplateInfo, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<TemplateInfo, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<TemplateInfo> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 882);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(TemplateInfo::kTagOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<TemplateInfo> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<TemplateInfo> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadTemplateInfoSerialNumber_859(compiler::CodeAssemblerState* state_, TNode<TemplateInfo> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<TemplateInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<TemplateInfo, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<TemplateInfo, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<TemplateInfo> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 883);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(TemplateInfo::kSerialNumberOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<TemplateInfo> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<TemplateInfo> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreTemplateInfoSerialNumber_860(compiler::CodeAssemblerState* state_, TNode<TemplateInfo> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<TemplateInfo, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<TemplateInfo, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<TemplateInfo, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<TemplateInfo> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 883);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(TemplateInfo::kSerialNumberOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<TemplateInfo> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<TemplateInfo> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Smi> LoadTemplateInfoNumberOfProperties_861(compiler::CodeAssemblerState* state_, TNode<TemplateInfo> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<TemplateInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<TemplateInfo, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<TemplateInfo, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<TemplateInfo> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 884);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(TemplateInfo::kNumberOfPropertiesOffset);
    USE(tmp1);
    TNode<Smi>tmp2 = CodeStubAssembler(state_).LoadReference<Smi>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<TemplateInfo> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<TemplateInfo> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Smi>{tmp6};
}

void StoreTemplateInfoNumberOfProperties_862(compiler::CodeAssemblerState* state_, TNode<TemplateInfo> p_o, TNode<Smi> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<TemplateInfo, Smi> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<TemplateInfo, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<TemplateInfo, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<TemplateInfo> tmp0;
    TNode<Smi> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 884);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(TemplateInfo::kNumberOfPropertiesOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<TemplateInfo> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<TemplateInfo> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadTemplateInfoPropertyList_863(compiler::CodeAssemblerState* state_, TNode<TemplateInfo> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<TemplateInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<TemplateInfo, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<TemplateInfo, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<TemplateInfo> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 885);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(TemplateInfo::kPropertyListOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<TemplateInfo> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<TemplateInfo> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreTemplateInfoPropertyList_864(compiler::CodeAssemblerState* state_, TNode<TemplateInfo> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<TemplateInfo, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<TemplateInfo, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<TemplateInfo, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<TemplateInfo> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 885);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(TemplateInfo::kPropertyListOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<TemplateInfo> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<TemplateInfo> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadTemplateInfoPropertyAccessors_865(compiler::CodeAssemblerState* state_, TNode<TemplateInfo> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<TemplateInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<TemplateInfo, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<TemplateInfo, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<TemplateInfo> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 886);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(TemplateInfo::kPropertyAccessorsOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<TemplateInfo> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<TemplateInfo> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreTemplateInfoPropertyAccessors_866(compiler::CodeAssemblerState* state_, TNode<TemplateInfo> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<TemplateInfo, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<TemplateInfo, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<TemplateInfo, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<TemplateInfo> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 886);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(TemplateInfo::kPropertyAccessorsOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<TemplateInfo> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<TemplateInfo> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<FixedArray> LoadTemplateObjectDescriptionRawStrings_867(compiler::CodeAssemblerState* state_, TNode<TemplateObjectDescription> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<TemplateObjectDescription> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<TemplateObjectDescription, FixedArray> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<TemplateObjectDescription, FixedArray> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<TemplateObjectDescription> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 892);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(TemplateObjectDescription::kRawStringsOffset);
    USE(tmp1);
    TNode<FixedArray>tmp2 = CodeStubAssembler(state_).LoadReference<FixedArray>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<TemplateObjectDescription> tmp3;
    TNode<FixedArray> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<TemplateObjectDescription> tmp5;
    TNode<FixedArray> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<FixedArray>{tmp6};
}

void StoreTemplateObjectDescriptionRawStrings_868(compiler::CodeAssemblerState* state_, TNode<TemplateObjectDescription> p_o, TNode<FixedArray> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<TemplateObjectDescription, FixedArray> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<TemplateObjectDescription, FixedArray> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<TemplateObjectDescription, FixedArray> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<TemplateObjectDescription> tmp0;
    TNode<FixedArray> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 892);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(TemplateObjectDescription::kRawStringsOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<TemplateObjectDescription> tmp3;
    TNode<FixedArray> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<TemplateObjectDescription> tmp5;
    TNode<FixedArray> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<FixedArray> LoadTemplateObjectDescriptionCookedStrings_869(compiler::CodeAssemblerState* state_, TNode<TemplateObjectDescription> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<TemplateObjectDescription> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<TemplateObjectDescription, FixedArray> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<TemplateObjectDescription, FixedArray> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<TemplateObjectDescription> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 893);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(TemplateObjectDescription::kCookedStringsOffset);
    USE(tmp1);
    TNode<FixedArray>tmp2 = CodeStubAssembler(state_).LoadReference<FixedArray>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<TemplateObjectDescription> tmp3;
    TNode<FixedArray> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<TemplateObjectDescription> tmp5;
    TNode<FixedArray> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<FixedArray>{tmp6};
}

void StoreTemplateObjectDescriptionCookedStrings_870(compiler::CodeAssemblerState* state_, TNode<TemplateObjectDescription> p_o, TNode<FixedArray> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<TemplateObjectDescription, FixedArray> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<TemplateObjectDescription, FixedArray> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<TemplateObjectDescription, FixedArray> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<TemplateObjectDescription> tmp0;
    TNode<FixedArray> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 893);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(TemplateObjectDescription::kCookedStringsOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<TemplateObjectDescription> tmp3;
    TNode<FixedArray> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<TemplateObjectDescription> tmp5;
    TNode<FixedArray> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadFunctionTemplateRareDataPrototypeTemplate_871(compiler::CodeAssemblerState* state_, TNode<FunctionTemplateRareData> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateRareData> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateRareData, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateRareData, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<FunctionTemplateRareData> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 899);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(FunctionTemplateRareData::kPrototypeTemplateOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<FunctionTemplateRareData> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<FunctionTemplateRareData> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreFunctionTemplateRareDataPrototypeTemplate_872(compiler::CodeAssemblerState* state_, TNode<FunctionTemplateRareData> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateRareData, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateRareData, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateRareData, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<FunctionTemplateRareData> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 899);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(FunctionTemplateRareData::kPrototypeTemplateOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<FunctionTemplateRareData> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<FunctionTemplateRareData> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadFunctionTemplateRareDataPrototypeProviderTemplate_873(compiler::CodeAssemblerState* state_, TNode<FunctionTemplateRareData> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateRareData> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateRareData, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateRareData, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<FunctionTemplateRareData> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 900);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(FunctionTemplateRareData::kPrototypeProviderTemplateOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<FunctionTemplateRareData> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<FunctionTemplateRareData> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreFunctionTemplateRareDataPrototypeProviderTemplate_874(compiler::CodeAssemblerState* state_, TNode<FunctionTemplateRareData> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateRareData, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateRareData, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateRareData, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<FunctionTemplateRareData> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 900);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(FunctionTemplateRareData::kPrototypeProviderTemplateOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<FunctionTemplateRareData> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<FunctionTemplateRareData> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadFunctionTemplateRareDataParentTemplate_875(compiler::CodeAssemblerState* state_, TNode<FunctionTemplateRareData> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateRareData> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateRareData, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateRareData, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<FunctionTemplateRareData> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 901);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(FunctionTemplateRareData::kParentTemplateOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<FunctionTemplateRareData> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<FunctionTemplateRareData> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreFunctionTemplateRareDataParentTemplate_876(compiler::CodeAssemblerState* state_, TNode<FunctionTemplateRareData> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateRareData, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateRareData, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateRareData, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<FunctionTemplateRareData> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 901);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(FunctionTemplateRareData::kParentTemplateOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<FunctionTemplateRareData> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<FunctionTemplateRareData> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadFunctionTemplateRareDataNamedPropertyHandler_877(compiler::CodeAssemblerState* state_, TNode<FunctionTemplateRareData> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateRareData> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateRareData, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateRareData, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<FunctionTemplateRareData> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 902);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(FunctionTemplateRareData::kNamedPropertyHandlerOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<FunctionTemplateRareData> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<FunctionTemplateRareData> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreFunctionTemplateRareDataNamedPropertyHandler_878(compiler::CodeAssemblerState* state_, TNode<FunctionTemplateRareData> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateRareData, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateRareData, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateRareData, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<FunctionTemplateRareData> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 902);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(FunctionTemplateRareData::kNamedPropertyHandlerOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<FunctionTemplateRareData> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<FunctionTemplateRareData> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadFunctionTemplateRareDataIndexedPropertyHandler_879(compiler::CodeAssemblerState* state_, TNode<FunctionTemplateRareData> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateRareData> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateRareData, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateRareData, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<FunctionTemplateRareData> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 903);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(FunctionTemplateRareData::kIndexedPropertyHandlerOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<FunctionTemplateRareData> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<FunctionTemplateRareData> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreFunctionTemplateRareDataIndexedPropertyHandler_880(compiler::CodeAssemblerState* state_, TNode<FunctionTemplateRareData> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateRareData, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateRareData, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateRareData, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<FunctionTemplateRareData> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 903);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(FunctionTemplateRareData::kIndexedPropertyHandlerOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<FunctionTemplateRareData> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<FunctionTemplateRareData> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadFunctionTemplateRareDataInstanceTemplate_881(compiler::CodeAssemblerState* state_, TNode<FunctionTemplateRareData> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateRareData> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateRareData, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateRareData, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<FunctionTemplateRareData> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 904);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(FunctionTemplateRareData::kInstanceTemplateOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<FunctionTemplateRareData> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<FunctionTemplateRareData> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreFunctionTemplateRareDataInstanceTemplate_882(compiler::CodeAssemblerState* state_, TNode<FunctionTemplateRareData> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateRareData, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateRareData, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateRareData, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<FunctionTemplateRareData> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 904);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(FunctionTemplateRareData::kInstanceTemplateOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<FunctionTemplateRareData> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<FunctionTemplateRareData> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadFunctionTemplateRareDataInstanceCallHandler_883(compiler::CodeAssemblerState* state_, TNode<FunctionTemplateRareData> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateRareData> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateRareData, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateRareData, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<FunctionTemplateRareData> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 905);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(FunctionTemplateRareData::kInstanceCallHandlerOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<FunctionTemplateRareData> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<FunctionTemplateRareData> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreFunctionTemplateRareDataInstanceCallHandler_884(compiler::CodeAssemblerState* state_, TNode<FunctionTemplateRareData> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateRareData, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateRareData, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateRareData, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<FunctionTemplateRareData> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 905);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(FunctionTemplateRareData::kInstanceCallHandlerOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<FunctionTemplateRareData> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<FunctionTemplateRareData> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadFunctionTemplateRareDataAccessCheckInfo_885(compiler::CodeAssemblerState* state_, TNode<FunctionTemplateRareData> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateRareData> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateRareData, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateRareData, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<FunctionTemplateRareData> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 906);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(FunctionTemplateRareData::kAccessCheckInfoOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<FunctionTemplateRareData> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<FunctionTemplateRareData> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreFunctionTemplateRareDataAccessCheckInfo_886(compiler::CodeAssemblerState* state_, TNode<FunctionTemplateRareData> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateRareData, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateRareData, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateRareData, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<FunctionTemplateRareData> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 906);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(FunctionTemplateRareData::kAccessCheckInfoOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<FunctionTemplateRareData> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<FunctionTemplateRareData> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadFunctionTemplateInfoCallCode_887(compiler::CodeAssemblerState* state_, TNode<FunctionTemplateInfo> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateInfo, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateInfo, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<FunctionTemplateInfo> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 913);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(FunctionTemplateInfo::kCallCodeOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<FunctionTemplateInfo> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<FunctionTemplateInfo> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreFunctionTemplateInfoCallCode_888(compiler::CodeAssemblerState* state_, TNode<FunctionTemplateInfo> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateInfo, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateInfo, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateInfo, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<FunctionTemplateInfo> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 913);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(FunctionTemplateInfo::kCallCodeOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<FunctionTemplateInfo> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<FunctionTemplateInfo> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadFunctionTemplateInfoClassName_889(compiler::CodeAssemblerState* state_, TNode<FunctionTemplateInfo> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateInfo, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateInfo, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<FunctionTemplateInfo> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 914);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(FunctionTemplateInfo::kClassNameOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<FunctionTemplateInfo> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<FunctionTemplateInfo> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreFunctionTemplateInfoClassName_890(compiler::CodeAssemblerState* state_, TNode<FunctionTemplateInfo> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateInfo, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateInfo, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateInfo, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<FunctionTemplateInfo> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 914);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(FunctionTemplateInfo::kClassNameOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<FunctionTemplateInfo> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<FunctionTemplateInfo> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadFunctionTemplateInfoSignature_891(compiler::CodeAssemblerState* state_, TNode<FunctionTemplateInfo> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateInfo, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateInfo, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<FunctionTemplateInfo> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 919);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(FunctionTemplateInfo::kSignatureOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<FunctionTemplateInfo> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<FunctionTemplateInfo> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreFunctionTemplateInfoSignature_892(compiler::CodeAssemblerState* state_, TNode<FunctionTemplateInfo> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateInfo, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateInfo, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateInfo, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<FunctionTemplateInfo> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 919);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(FunctionTemplateInfo::kSignatureOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<FunctionTemplateInfo> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<FunctionTemplateInfo> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<HeapObject> LoadFunctionTemplateInfoRareData_893(compiler::CodeAssemblerState* state_, TNode<FunctionTemplateInfo> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateInfo, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateInfo, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<FunctionTemplateInfo> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 923);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(FunctionTemplateInfo::kRareDataOffset);
    USE(tmp1);
    TNode<HeapObject>tmp2 = CodeStubAssembler(state_).LoadReference<HeapObject>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<FunctionTemplateInfo> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<FunctionTemplateInfo> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<HeapObject>{tmp6};
}

void StoreFunctionTemplateInfoRareData_894(compiler::CodeAssemblerState* state_, TNode<FunctionTemplateInfo> p_o, TNode<HeapObject> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateInfo, HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateInfo, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateInfo, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<FunctionTemplateInfo> tmp0;
    TNode<HeapObject> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 923);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(FunctionTemplateInfo::kRareDataOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<FunctionTemplateInfo> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<FunctionTemplateInfo> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadFunctionTemplateInfoSharedFunctionInfo_895(compiler::CodeAssemblerState* state_, TNode<FunctionTemplateInfo> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateInfo, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateInfo, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<FunctionTemplateInfo> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 924);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(FunctionTemplateInfo::kSharedFunctionInfoOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<FunctionTemplateInfo> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<FunctionTemplateInfo> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreFunctionTemplateInfoSharedFunctionInfo_896(compiler::CodeAssemblerState* state_, TNode<FunctionTemplateInfo> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateInfo, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateInfo, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateInfo, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<FunctionTemplateInfo> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 924);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(FunctionTemplateInfo::kSharedFunctionInfoOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<FunctionTemplateInfo> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<FunctionTemplateInfo> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Smi> LoadFunctionTemplateInfoFlag_897(compiler::CodeAssemblerState* state_, TNode<FunctionTemplateInfo> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateInfo, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateInfo, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<FunctionTemplateInfo> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 925);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(FunctionTemplateInfo::kFlagOffset);
    USE(tmp1);
    TNode<Smi>tmp2 = CodeStubAssembler(state_).LoadReference<Smi>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<FunctionTemplateInfo> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<FunctionTemplateInfo> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Smi>{tmp6};
}

void StoreFunctionTemplateInfoFlag_898(compiler::CodeAssemblerState* state_, TNode<FunctionTemplateInfo> p_o, TNode<Smi> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateInfo, Smi> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateInfo, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateInfo, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<FunctionTemplateInfo> tmp0;
    TNode<Smi> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 925);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(FunctionTemplateInfo::kFlagOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<FunctionTemplateInfo> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<FunctionTemplateInfo> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Smi> LoadFunctionTemplateInfoLength_899(compiler::CodeAssemblerState* state_, TNode<FunctionTemplateInfo> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateInfo, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateInfo, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<FunctionTemplateInfo> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 926);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(FunctionTemplateInfo::kLengthOffset);
    USE(tmp1);
    TNode<Smi>tmp2 = CodeStubAssembler(state_).LoadReference<Smi>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<FunctionTemplateInfo> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<FunctionTemplateInfo> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Smi>{tmp6};
}

void StoreFunctionTemplateInfoLength_900(compiler::CodeAssemblerState* state_, TNode<FunctionTemplateInfo> p_o, TNode<Smi> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateInfo, Smi> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateInfo, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateInfo, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<FunctionTemplateInfo> tmp0;
    TNode<Smi> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 926);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(FunctionTemplateInfo::kLengthOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<FunctionTemplateInfo> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<FunctionTemplateInfo> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadFunctionTemplateInfoCachedPropertyName_901(compiler::CodeAssemblerState* state_, TNode<FunctionTemplateInfo> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateInfo, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateInfo, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<FunctionTemplateInfo> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 930);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(FunctionTemplateInfo::kCachedPropertyNameOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<FunctionTemplateInfo> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<FunctionTemplateInfo> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreFunctionTemplateInfoCachedPropertyName_902(compiler::CodeAssemblerState* state_, TNode<FunctionTemplateInfo> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateInfo, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateInfo, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FunctionTemplateInfo, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<FunctionTemplateInfo> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 930);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(FunctionTemplateInfo::kCachedPropertyNameOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<FunctionTemplateInfo> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<FunctionTemplateInfo> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadObjectTemplateInfoConstructor_903(compiler::CodeAssemblerState* state_, TNode<ObjectTemplateInfo> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<ObjectTemplateInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<ObjectTemplateInfo, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<ObjectTemplateInfo, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<ObjectTemplateInfo> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 935);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(ObjectTemplateInfo::kConstructorOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<ObjectTemplateInfo> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<ObjectTemplateInfo> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreObjectTemplateInfoConstructor_904(compiler::CodeAssemblerState* state_, TNode<ObjectTemplateInfo> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<ObjectTemplateInfo, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<ObjectTemplateInfo, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<ObjectTemplateInfo, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<ObjectTemplateInfo> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 935);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(ObjectTemplateInfo::kConstructorOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<ObjectTemplateInfo> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<ObjectTemplateInfo> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadObjectTemplateInfoData_905(compiler::CodeAssemblerState* state_, TNode<ObjectTemplateInfo> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<ObjectTemplateInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<ObjectTemplateInfo, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<ObjectTemplateInfo, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<ObjectTemplateInfo> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 936);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(ObjectTemplateInfo::kDataOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<ObjectTemplateInfo> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<ObjectTemplateInfo> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreObjectTemplateInfoData_906(compiler::CodeAssemblerState* state_, TNode<ObjectTemplateInfo> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<ObjectTemplateInfo, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<ObjectTemplateInfo, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<ObjectTemplateInfo, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<ObjectTemplateInfo> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 936);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(ObjectTemplateInfo::kDataOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<ObjectTemplateInfo> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<ObjectTemplateInfo> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Smi> LoadPropertyArrayLengthAndHash_907(compiler::CodeAssemblerState* state_, TNode<PropertyArray> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<PropertyArray> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PropertyArray, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PropertyArray, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<PropertyArray> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 939);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(PropertyArray::kLengthAndHashOffset);
    USE(tmp1);
    TNode<Smi>tmp2 = CodeStubAssembler(state_).LoadReference<Smi>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<PropertyArray> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<PropertyArray> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Smi>{tmp6};
}

void StorePropertyArrayLengthAndHash_908(compiler::CodeAssemblerState* state_, TNode<PropertyArray> p_o, TNode<Smi> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<PropertyArray, Smi> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PropertyArray, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PropertyArray, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<PropertyArray> tmp0;
    TNode<Smi> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 939);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(PropertyArray::kLengthAndHashOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<PropertyArray> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<PropertyArray> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Name> LoadPropertyCellName_909(compiler::CodeAssemblerState* state_, TNode<PropertyCell> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<PropertyCell> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PropertyCell, Name> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PropertyCell, Name> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<PropertyCell> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 944);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(PropertyCell::kNameOffset);
    USE(tmp1);
    TNode<Name>tmp2 = CodeStubAssembler(state_).LoadReference<Name>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<PropertyCell> tmp3;
    TNode<Name> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<PropertyCell> tmp5;
    TNode<Name> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Name>{tmp6};
}

void StorePropertyCellName_910(compiler::CodeAssemblerState* state_, TNode<PropertyCell> p_o, TNode<Name> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<PropertyCell, Name> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PropertyCell, Name> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PropertyCell, Name> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<PropertyCell> tmp0;
    TNode<Name> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 944);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(PropertyCell::kNameOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<PropertyCell> tmp3;
    TNode<Name> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<PropertyCell> tmp5;
    TNode<Name> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Smi> LoadPropertyCellPropertyDetailsRaw_911(compiler::CodeAssemblerState* state_, TNode<PropertyCell> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<PropertyCell> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PropertyCell, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PropertyCell, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<PropertyCell> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 945);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(PropertyCell::kPropertyDetailsRawOffset);
    USE(tmp1);
    TNode<Smi>tmp2 = CodeStubAssembler(state_).LoadReference<Smi>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<PropertyCell> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<PropertyCell> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Smi>{tmp6};
}

void StorePropertyCellPropertyDetailsRaw_912(compiler::CodeAssemblerState* state_, TNode<PropertyCell> p_o, TNode<Smi> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<PropertyCell, Smi> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PropertyCell, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PropertyCell, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<PropertyCell> tmp0;
    TNode<Smi> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 945);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(PropertyCell::kPropertyDetailsRawOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<PropertyCell> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<PropertyCell> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadPropertyCellValue_913(compiler::CodeAssemblerState* state_, TNode<PropertyCell> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<PropertyCell> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PropertyCell, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PropertyCell, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<PropertyCell> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 946);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(PropertyCell::kValueOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<PropertyCell> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<PropertyCell> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StorePropertyCellValue_914(compiler::CodeAssemblerState* state_, TNode<PropertyCell> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<PropertyCell, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PropertyCell, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PropertyCell, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<PropertyCell> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 946);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(PropertyCell::kValueOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<PropertyCell> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<PropertyCell> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<WeakFixedArray> LoadPropertyCellDependentCode_915(compiler::CodeAssemblerState* state_, TNode<PropertyCell> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<PropertyCell> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PropertyCell, WeakFixedArray> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PropertyCell, WeakFixedArray> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<PropertyCell> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 947);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(PropertyCell::kDependentCodeOffset);
    USE(tmp1);
    TNode<WeakFixedArray>tmp2 = CodeStubAssembler(state_).LoadReference<WeakFixedArray>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<PropertyCell> tmp3;
    TNode<WeakFixedArray> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<PropertyCell> tmp5;
    TNode<WeakFixedArray> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<WeakFixedArray>{tmp6};
}

void StorePropertyCellDependentCode_916(compiler::CodeAssemblerState* state_, TNode<PropertyCell> p_o, TNode<WeakFixedArray> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<PropertyCell, WeakFixedArray> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PropertyCell, WeakFixedArray> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PropertyCell, WeakFixedArray> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<PropertyCell> tmp0;
    TNode<WeakFixedArray> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 947);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(PropertyCell::kDependentCodeOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<PropertyCell> tmp3;
    TNode<WeakFixedArray> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<PropertyCell> tmp5;
    TNode<WeakFixedArray> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<RawPtrT> LoadJSDataViewDataPointer_917(compiler::CodeAssemblerState* state_, TNode<JSDataView> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSDataView> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSDataView, RawPtrT> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSDataView, RawPtrT> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSDataView> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 950);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSDataView::kDataPointerOffset);
    USE(tmp1);
    TNode<RawPtrT>tmp2 = CodeStubAssembler(state_).LoadReference<RawPtrT>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSDataView> tmp3;
    TNode<RawPtrT> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSDataView> tmp5;
    TNode<RawPtrT> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<RawPtrT>{tmp6};
}

void StoreJSDataViewDataPointer_918(compiler::CodeAssemblerState* state_, TNode<JSDataView> p_o, TNode<RawPtrT> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSDataView, RawPtrT> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSDataView, RawPtrT> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSDataView, RawPtrT> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSDataView> tmp0;
    TNode<RawPtrT> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 950);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSDataView::kDataPointerOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSDataView> tmp3;
    TNode<RawPtrT> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSDataView> tmp5;
    TNode<RawPtrT> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadInterceptorInfoGetter_919(compiler::CodeAssemblerState* state_, TNode<InterceptorInfo> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<InterceptorInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<InterceptorInfo, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<InterceptorInfo, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<InterceptorInfo> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 977);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(InterceptorInfo::kGetterOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<InterceptorInfo> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<InterceptorInfo> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreInterceptorInfoGetter_920(compiler::CodeAssemblerState* state_, TNode<InterceptorInfo> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<InterceptorInfo, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<InterceptorInfo, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<InterceptorInfo, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<InterceptorInfo> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 977);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(InterceptorInfo::kGetterOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<InterceptorInfo> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<InterceptorInfo> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadInterceptorInfoSetter_921(compiler::CodeAssemblerState* state_, TNode<InterceptorInfo> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<InterceptorInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<InterceptorInfo, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<InterceptorInfo, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<InterceptorInfo> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 978);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(InterceptorInfo::kSetterOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<InterceptorInfo> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<InterceptorInfo> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreInterceptorInfoSetter_922(compiler::CodeAssemblerState* state_, TNode<InterceptorInfo> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<InterceptorInfo, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<InterceptorInfo, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<InterceptorInfo, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<InterceptorInfo> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 978);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(InterceptorInfo::kSetterOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<InterceptorInfo> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<InterceptorInfo> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadInterceptorInfoQuery_923(compiler::CodeAssemblerState* state_, TNode<InterceptorInfo> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<InterceptorInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<InterceptorInfo, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<InterceptorInfo, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<InterceptorInfo> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 979);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(InterceptorInfo::kQueryOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<InterceptorInfo> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<InterceptorInfo> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreInterceptorInfoQuery_924(compiler::CodeAssemblerState* state_, TNode<InterceptorInfo> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<InterceptorInfo, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<InterceptorInfo, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<InterceptorInfo, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<InterceptorInfo> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 979);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(InterceptorInfo::kQueryOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<InterceptorInfo> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<InterceptorInfo> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadInterceptorInfoDescriptor_925(compiler::CodeAssemblerState* state_, TNode<InterceptorInfo> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<InterceptorInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<InterceptorInfo, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<InterceptorInfo, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<InterceptorInfo> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 980);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(InterceptorInfo::kDescriptorOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<InterceptorInfo> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<InterceptorInfo> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreInterceptorInfoDescriptor_926(compiler::CodeAssemblerState* state_, TNode<InterceptorInfo> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<InterceptorInfo, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<InterceptorInfo, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<InterceptorInfo, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<InterceptorInfo> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 980);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(InterceptorInfo::kDescriptorOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<InterceptorInfo> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<InterceptorInfo> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadInterceptorInfoDeleter_927(compiler::CodeAssemblerState* state_, TNode<InterceptorInfo> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<InterceptorInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<InterceptorInfo, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<InterceptorInfo, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<InterceptorInfo> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 981);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(InterceptorInfo::kDeleterOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<InterceptorInfo> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<InterceptorInfo> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreInterceptorInfoDeleter_928(compiler::CodeAssemblerState* state_, TNode<InterceptorInfo> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<InterceptorInfo, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<InterceptorInfo, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<InterceptorInfo, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<InterceptorInfo> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 981);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(InterceptorInfo::kDeleterOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<InterceptorInfo> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<InterceptorInfo> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadInterceptorInfoEnumerator_929(compiler::CodeAssemblerState* state_, TNode<InterceptorInfo> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<InterceptorInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<InterceptorInfo, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<InterceptorInfo, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<InterceptorInfo> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 982);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(InterceptorInfo::kEnumeratorOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<InterceptorInfo> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<InterceptorInfo> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreInterceptorInfoEnumerator_930(compiler::CodeAssemblerState* state_, TNode<InterceptorInfo> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<InterceptorInfo, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<InterceptorInfo, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<InterceptorInfo, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<InterceptorInfo> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 982);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(InterceptorInfo::kEnumeratorOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<InterceptorInfo> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<InterceptorInfo> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadInterceptorInfoDefiner_931(compiler::CodeAssemblerState* state_, TNode<InterceptorInfo> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<InterceptorInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<InterceptorInfo, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<InterceptorInfo, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<InterceptorInfo> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 983);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(InterceptorInfo::kDefinerOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<InterceptorInfo> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<InterceptorInfo> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreInterceptorInfoDefiner_932(compiler::CodeAssemblerState* state_, TNode<InterceptorInfo> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<InterceptorInfo, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<InterceptorInfo, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<InterceptorInfo, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<InterceptorInfo> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 983);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(InterceptorInfo::kDefinerOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<InterceptorInfo> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<InterceptorInfo> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadInterceptorInfoData_933(compiler::CodeAssemblerState* state_, TNode<InterceptorInfo> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<InterceptorInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<InterceptorInfo, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<InterceptorInfo, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<InterceptorInfo> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 984);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(InterceptorInfo::kDataOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<InterceptorInfo> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<InterceptorInfo> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreInterceptorInfoData_934(compiler::CodeAssemblerState* state_, TNode<InterceptorInfo> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<InterceptorInfo, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<InterceptorInfo, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<InterceptorInfo, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<InterceptorInfo> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 984);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(InterceptorInfo::kDataOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<InterceptorInfo> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<InterceptorInfo> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Smi> LoadInterceptorInfoFlags_935(compiler::CodeAssemblerState* state_, TNode<InterceptorInfo> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<InterceptorInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<InterceptorInfo, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<InterceptorInfo, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<InterceptorInfo> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 985);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(InterceptorInfo::kFlagsOffset);
    USE(tmp1);
    TNode<Smi>tmp2 = CodeStubAssembler(state_).LoadReference<Smi>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<InterceptorInfo> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<InterceptorInfo> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Smi>{tmp6};
}

void StoreInterceptorInfoFlags_936(compiler::CodeAssemblerState* state_, TNode<InterceptorInfo> p_o, TNode<Smi> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<InterceptorInfo, Smi> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<InterceptorInfo, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<InterceptorInfo, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<InterceptorInfo> tmp0;
    TNode<Smi> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 985);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(InterceptorInfo::kFlagsOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<InterceptorInfo> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<InterceptorInfo> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadAccessCheckInfoCallback_937(compiler::CodeAssemblerState* state_, TNode<AccessCheckInfo> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<AccessCheckInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AccessCheckInfo, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AccessCheckInfo, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<AccessCheckInfo> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 990);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(AccessCheckInfo::kCallbackOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<AccessCheckInfo> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<AccessCheckInfo> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreAccessCheckInfoCallback_938(compiler::CodeAssemblerState* state_, TNode<AccessCheckInfo> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<AccessCheckInfo, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AccessCheckInfo, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AccessCheckInfo, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<AccessCheckInfo> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 990);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(AccessCheckInfo::kCallbackOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<AccessCheckInfo> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<AccessCheckInfo> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadAccessCheckInfoNamedInterceptor_939(compiler::CodeAssemblerState* state_, TNode<AccessCheckInfo> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<AccessCheckInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AccessCheckInfo, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AccessCheckInfo, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<AccessCheckInfo> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 991);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(AccessCheckInfo::kNamedInterceptorOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<AccessCheckInfo> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<AccessCheckInfo> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreAccessCheckInfoNamedInterceptor_940(compiler::CodeAssemblerState* state_, TNode<AccessCheckInfo> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<AccessCheckInfo, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AccessCheckInfo, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AccessCheckInfo, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<AccessCheckInfo> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 991);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(AccessCheckInfo::kNamedInterceptorOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<AccessCheckInfo> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<AccessCheckInfo> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadAccessCheckInfoIndexedInterceptor_941(compiler::CodeAssemblerState* state_, TNode<AccessCheckInfo> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<AccessCheckInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AccessCheckInfo, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AccessCheckInfo, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<AccessCheckInfo> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 992);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(AccessCheckInfo::kIndexedInterceptorOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<AccessCheckInfo> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<AccessCheckInfo> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreAccessCheckInfoIndexedInterceptor_942(compiler::CodeAssemblerState* state_, TNode<AccessCheckInfo> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<AccessCheckInfo, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AccessCheckInfo, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AccessCheckInfo, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<AccessCheckInfo> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 992);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(AccessCheckInfo::kIndexedInterceptorOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<AccessCheckInfo> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<AccessCheckInfo> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadAccessCheckInfoData_943(compiler::CodeAssemblerState* state_, TNode<AccessCheckInfo> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<AccessCheckInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AccessCheckInfo, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AccessCheckInfo, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<AccessCheckInfo> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 993);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(AccessCheckInfo::kDataOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<AccessCheckInfo> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<AccessCheckInfo> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreAccessCheckInfoData_944(compiler::CodeAssemblerState* state_, TNode<AccessCheckInfo> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<AccessCheckInfo, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AccessCheckInfo, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AccessCheckInfo, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<AccessCheckInfo> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 993);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(AccessCheckInfo::kDataOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<AccessCheckInfo> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<AccessCheckInfo> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Smi> LoadArrayBoilerplateDescriptionFlags_945(compiler::CodeAssemblerState* state_, TNode<ArrayBoilerplateDescription> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<ArrayBoilerplateDescription> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<ArrayBoilerplateDescription, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<ArrayBoilerplateDescription, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<ArrayBoilerplateDescription> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 998);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(ArrayBoilerplateDescription::kFlagsOffset);
    USE(tmp1);
    TNode<Smi>tmp2 = CodeStubAssembler(state_).LoadReference<Smi>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<ArrayBoilerplateDescription> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<ArrayBoilerplateDescription> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Smi>{tmp6};
}

void StoreArrayBoilerplateDescriptionFlags_946(compiler::CodeAssemblerState* state_, TNode<ArrayBoilerplateDescription> p_o, TNode<Smi> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<ArrayBoilerplateDescription, Smi> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<ArrayBoilerplateDescription, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<ArrayBoilerplateDescription, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<ArrayBoilerplateDescription> tmp0;
    TNode<Smi> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 998);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(ArrayBoilerplateDescription::kFlagsOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<ArrayBoilerplateDescription> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<ArrayBoilerplateDescription> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<FixedArrayBase> LoadArrayBoilerplateDescriptionConstantElements_947(compiler::CodeAssemblerState* state_, TNode<ArrayBoilerplateDescription> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<ArrayBoilerplateDescription> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<ArrayBoilerplateDescription, FixedArrayBase> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<ArrayBoilerplateDescription, FixedArrayBase> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<ArrayBoilerplateDescription> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 999);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(ArrayBoilerplateDescription::kConstantElementsOffset);
    USE(tmp1);
    TNode<FixedArrayBase>tmp2 = CodeStubAssembler(state_).LoadReference<FixedArrayBase>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<ArrayBoilerplateDescription> tmp3;
    TNode<FixedArrayBase> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<ArrayBoilerplateDescription> tmp5;
    TNode<FixedArrayBase> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<FixedArrayBase>{tmp6};
}

void StoreArrayBoilerplateDescriptionConstantElements_948(compiler::CodeAssemblerState* state_, TNode<ArrayBoilerplateDescription> p_o, TNode<FixedArrayBase> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<ArrayBoilerplateDescription, FixedArrayBase> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<ArrayBoilerplateDescription, FixedArrayBase> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<ArrayBoilerplateDescription, FixedArrayBase> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<ArrayBoilerplateDescription> tmp0;
    TNode<FixedArrayBase> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 999);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(ArrayBoilerplateDescription::kConstantElementsOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<ArrayBoilerplateDescription> tmp3;
    TNode<FixedArrayBase> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<ArrayBoilerplateDescription> tmp5;
    TNode<FixedArrayBase> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Smi> LoadAliasedArgumentsEntryAliasedContextSlot_949(compiler::CodeAssemblerState* state_, TNode<AliasedArgumentsEntry> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<AliasedArgumentsEntry> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AliasedArgumentsEntry, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AliasedArgumentsEntry, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<AliasedArgumentsEntry> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1004);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(AliasedArgumentsEntry::kAliasedContextSlotOffset);
    USE(tmp1);
    TNode<Smi>tmp2 = CodeStubAssembler(state_).LoadReference<Smi>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<AliasedArgumentsEntry> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<AliasedArgumentsEntry> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Smi>{tmp6};
}

void StoreAliasedArgumentsEntryAliasedContextSlot_950(compiler::CodeAssemblerState* state_, TNode<AliasedArgumentsEntry> p_o, TNode<Smi> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<AliasedArgumentsEntry, Smi> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AliasedArgumentsEntry, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AliasedArgumentsEntry, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<AliasedArgumentsEntry> tmp0;
    TNode<Smi> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1004);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(AliasedArgumentsEntry::kAliasedContextSlotOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<AliasedArgumentsEntry> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<AliasedArgumentsEntry> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadCellValue_951(compiler::CodeAssemblerState* state_, TNode<Cell> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Cell> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Cell, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Cell, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<Cell> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1009);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(Cell::kValueOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<Cell> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Cell> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreCellValue_952(compiler::CodeAssemblerState* state_, TNode<Cell> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Cell, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Cell, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Cell, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<Cell> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1009);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(Cell::kValueOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<Cell> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<Cell> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadDataHandlerSmiHandler_953(compiler::CodeAssemblerState* state_, TNode<DataHandler> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<DataHandler> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<DataHandler, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<DataHandler, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<DataHandler> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1013);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(DataHandler::kSmiHandlerOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<DataHandler> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<DataHandler> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreDataHandlerSmiHandler_954(compiler::CodeAssemblerState* state_, TNode<DataHandler> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<DataHandler, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<DataHandler, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<DataHandler, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<DataHandler> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1013);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(DataHandler::kSmiHandlerOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<DataHandler> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<DataHandler> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadDataHandlerValidityCell_955(compiler::CodeAssemblerState* state_, TNode<DataHandler> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<DataHandler> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<DataHandler, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<DataHandler, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<DataHandler> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1014);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(DataHandler::kValidityCellOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<DataHandler> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<DataHandler> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreDataHandlerValidityCell_956(compiler::CodeAssemblerState* state_, TNode<DataHandler> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<DataHandler, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<DataHandler, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<DataHandler, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<DataHandler> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1014);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(DataHandler::kValidityCellOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<DataHandler> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<DataHandler> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadDataHandlerData1_957(compiler::CodeAssemblerState* state_, TNode<DataHandler> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<DataHandler> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<DataHandler, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<DataHandler, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<DataHandler> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1018);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(DataHandler::kData1Offset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<DataHandler> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<DataHandler> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreDataHandlerData1_958(compiler::CodeAssemblerState* state_, TNode<DataHandler> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<DataHandler, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<DataHandler, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<DataHandler, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<DataHandler> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1018);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(DataHandler::kData1Offset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<DataHandler> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<DataHandler> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadDataHandlerData2_959(compiler::CodeAssemblerState* state_, TNode<DataHandler> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<DataHandler> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<DataHandler, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<DataHandler, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<DataHandler> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1019);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(DataHandler::kData2Offset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<DataHandler> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<DataHandler> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreDataHandlerData2_960(compiler::CodeAssemblerState* state_, TNode<DataHandler> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<DataHandler, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<DataHandler, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<DataHandler, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<DataHandler> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1019);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(DataHandler::kData2Offset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<DataHandler> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<DataHandler> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadDataHandlerData3_961(compiler::CodeAssemblerState* state_, TNode<DataHandler> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<DataHandler> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<DataHandler, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<DataHandler, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<DataHandler> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1020);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(DataHandler::kData3Offset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<DataHandler> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<DataHandler> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreDataHandlerData3_962(compiler::CodeAssemblerState* state_, TNode<DataHandler> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<DataHandler, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<DataHandler, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<DataHandler, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<DataHandler> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1020);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(DataHandler::kData3Offset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<DataHandler> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<DataHandler> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<JSFunction> LoadJSGeneratorObjectFunction_963(compiler::CodeAssemblerState* state_, TNode<JSGeneratorObject> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSGeneratorObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSGeneratorObject, JSFunction> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSGeneratorObject, JSFunction> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSGeneratorObject> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1027);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSGeneratorObject::kFunctionOffset);
    USE(tmp1);
    TNode<JSFunction>tmp2 = CodeStubAssembler(state_).LoadReference<JSFunction>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSGeneratorObject> tmp3;
    TNode<JSFunction> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSGeneratorObject> tmp5;
    TNode<JSFunction> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<JSFunction>{tmp6};
}

void StoreJSGeneratorObjectFunction_964(compiler::CodeAssemblerState* state_, TNode<JSGeneratorObject> p_o, TNode<JSFunction> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSGeneratorObject, JSFunction> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSGeneratorObject, JSFunction> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSGeneratorObject, JSFunction> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSGeneratorObject> tmp0;
    TNode<JSFunction> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1027);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSGeneratorObject::kFunctionOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSGeneratorObject> tmp3;
    TNode<JSFunction> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSGeneratorObject> tmp5;
    TNode<JSFunction> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Context> LoadJSGeneratorObjectContext_965(compiler::CodeAssemblerState* state_, TNode<JSGeneratorObject> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSGeneratorObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSGeneratorObject, Context> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSGeneratorObject, Context> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSGeneratorObject> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1028);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSGeneratorObject::kContextOffset);
    USE(tmp1);
    TNode<Context>tmp2 = CodeStubAssembler(state_).LoadReference<Context>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSGeneratorObject> tmp3;
    TNode<Context> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSGeneratorObject> tmp5;
    TNode<Context> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Context>{tmp6};
}

void StoreJSGeneratorObjectContext_966(compiler::CodeAssemblerState* state_, TNode<JSGeneratorObject> p_o, TNode<Context> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSGeneratorObject, Context> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSGeneratorObject, Context> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSGeneratorObject, Context> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSGeneratorObject> tmp0;
    TNode<Context> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1028);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSGeneratorObject::kContextOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSGeneratorObject> tmp3;
    TNode<Context> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSGeneratorObject> tmp5;
    TNode<Context> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadJSGeneratorObjectReceiver_967(compiler::CodeAssemblerState* state_, TNode<JSGeneratorObject> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSGeneratorObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSGeneratorObject, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSGeneratorObject, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSGeneratorObject> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1029);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSGeneratorObject::kReceiverOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSGeneratorObject> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSGeneratorObject> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreJSGeneratorObjectReceiver_968(compiler::CodeAssemblerState* state_, TNode<JSGeneratorObject> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSGeneratorObject, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSGeneratorObject, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSGeneratorObject, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSGeneratorObject> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1029);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSGeneratorObject::kReceiverOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSGeneratorObject> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSGeneratorObject> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadJSGeneratorObjectInputOrDebugPos_969(compiler::CodeAssemblerState* state_, TNode<JSGeneratorObject> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSGeneratorObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSGeneratorObject, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSGeneratorObject, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSGeneratorObject> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1035);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSGeneratorObject::kInputOrDebugPosOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSGeneratorObject> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSGeneratorObject> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreJSGeneratorObjectInputOrDebugPos_970(compiler::CodeAssemblerState* state_, TNode<JSGeneratorObject> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSGeneratorObject, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSGeneratorObject, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSGeneratorObject, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSGeneratorObject> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1035);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSGeneratorObject::kInputOrDebugPosOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSGeneratorObject> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSGeneratorObject> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Smi> LoadJSGeneratorObjectResumeMode_971(compiler::CodeAssemblerState* state_, TNode<JSGeneratorObject> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSGeneratorObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSGeneratorObject, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSGeneratorObject, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSGeneratorObject> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1037);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSGeneratorObject::kResumeModeOffset);
    USE(tmp1);
    TNode<Smi>tmp2 = CodeStubAssembler(state_).LoadReference<Smi>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSGeneratorObject> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSGeneratorObject> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Smi>{tmp6};
}

void StoreJSGeneratorObjectResumeMode_972(compiler::CodeAssemblerState* state_, TNode<JSGeneratorObject> p_o, TNode<Smi> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSGeneratorObject, Smi> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSGeneratorObject, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSGeneratorObject, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSGeneratorObject> tmp0;
    TNode<Smi> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1037);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSGeneratorObject::kResumeModeOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSGeneratorObject> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSGeneratorObject> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Smi> LoadJSGeneratorObjectContinuation_973(compiler::CodeAssemblerState* state_, TNode<JSGeneratorObject> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSGeneratorObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSGeneratorObject, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSGeneratorObject, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSGeneratorObject> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1038);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSGeneratorObject::kContinuationOffset);
    USE(tmp1);
    TNode<Smi>tmp2 = CodeStubAssembler(state_).LoadReference<Smi>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSGeneratorObject> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSGeneratorObject> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Smi>{tmp6};
}

void StoreJSGeneratorObjectContinuation_974(compiler::CodeAssemblerState* state_, TNode<JSGeneratorObject> p_o, TNode<Smi> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSGeneratorObject, Smi> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSGeneratorObject, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSGeneratorObject, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSGeneratorObject> tmp0;
    TNode<Smi> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1038);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSGeneratorObject::kContinuationOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSGeneratorObject> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSGeneratorObject> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<FixedArray> LoadJSGeneratorObjectParametersAndRegisters_975(compiler::CodeAssemblerState* state_, TNode<JSGeneratorObject> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSGeneratorObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSGeneratorObject, FixedArray> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSGeneratorObject, FixedArray> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSGeneratorObject> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1041);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSGeneratorObject::kParametersAndRegistersOffset);
    USE(tmp1);
    TNode<FixedArray>tmp2 = CodeStubAssembler(state_).LoadReference<FixedArray>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSGeneratorObject> tmp3;
    TNode<FixedArray> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSGeneratorObject> tmp5;
    TNode<FixedArray> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<FixedArray>{tmp6};
}

void StoreJSGeneratorObjectParametersAndRegisters_976(compiler::CodeAssemblerState* state_, TNode<JSGeneratorObject> p_o, TNode<FixedArray> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSGeneratorObject, FixedArray> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSGeneratorObject, FixedArray> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSGeneratorObject, FixedArray> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSGeneratorObject> tmp0;
    TNode<FixedArray> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1041);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSGeneratorObject::kParametersAndRegistersOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSGeneratorObject> tmp3;
    TNode<FixedArray> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSGeneratorObject> tmp5;
    TNode<FixedArray> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<JSPromise> LoadJSAsyncFunctionObjectPromise_977(compiler::CodeAssemblerState* state_, TNode<JSAsyncFunctionObject> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSAsyncFunctionObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSAsyncFunctionObject, JSPromise> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSAsyncFunctionObject, JSPromise> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSAsyncFunctionObject> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1046);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSAsyncFunctionObject::kPromiseOffset);
    USE(tmp1);
    TNode<JSPromise>tmp2 = CodeStubAssembler(state_).LoadReference<JSPromise>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSAsyncFunctionObject> tmp3;
    TNode<JSPromise> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSAsyncFunctionObject> tmp5;
    TNode<JSPromise> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<JSPromise>{tmp6};
}

void StoreJSAsyncFunctionObjectPromise_978(compiler::CodeAssemblerState* state_, TNode<JSAsyncFunctionObject> p_o, TNode<JSPromise> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSAsyncFunctionObject, JSPromise> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSAsyncFunctionObject, JSPromise> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSAsyncFunctionObject, JSPromise> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSAsyncFunctionObject> tmp0;
    TNode<JSPromise> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1046);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSAsyncFunctionObject::kPromiseOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSAsyncFunctionObject> tmp3;
    TNode<JSPromise> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSAsyncFunctionObject> tmp5;
    TNode<JSPromise> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<HeapObject> LoadJSAsyncGeneratorObjectQueue_979(compiler::CodeAssemblerState* state_, TNode<JSAsyncGeneratorObject> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSAsyncGeneratorObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSAsyncGeneratorObject, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSAsyncGeneratorObject, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSAsyncGeneratorObject> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1053);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSAsyncGeneratorObject::kQueueOffset);
    USE(tmp1);
    TNode<HeapObject>tmp2 = CodeStubAssembler(state_).LoadReference<HeapObject>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSAsyncGeneratorObject> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSAsyncGeneratorObject> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<HeapObject>{tmp6};
}

void StoreJSAsyncGeneratorObjectQueue_980(compiler::CodeAssemblerState* state_, TNode<JSAsyncGeneratorObject> p_o, TNode<HeapObject> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSAsyncGeneratorObject, HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSAsyncGeneratorObject, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSAsyncGeneratorObject, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSAsyncGeneratorObject> tmp0;
    TNode<HeapObject> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1053);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSAsyncGeneratorObject::kQueueOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSAsyncGeneratorObject> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSAsyncGeneratorObject> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Smi> LoadJSAsyncGeneratorObjectIsAwaiting_981(compiler::CodeAssemblerState* state_, TNode<JSAsyncGeneratorObject> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSAsyncGeneratorObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSAsyncGeneratorObject, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSAsyncGeneratorObject, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSAsyncGeneratorObject> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1054);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSAsyncGeneratorObject::kIsAwaitingOffset);
    USE(tmp1);
    TNode<Smi>tmp2 = CodeStubAssembler(state_).LoadReference<Smi>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSAsyncGeneratorObject> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSAsyncGeneratorObject> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Smi>{tmp6};
}

void StoreJSAsyncGeneratorObjectIsAwaiting_982(compiler::CodeAssemblerState* state_, TNode<JSAsyncGeneratorObject> p_o, TNode<Smi> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSAsyncGeneratorObject, Smi> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSAsyncGeneratorObject, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSAsyncGeneratorObject, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSAsyncGeneratorObject> tmp0;
    TNode<Smi> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1054);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSAsyncGeneratorObject::kIsAwaitingOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSAsyncGeneratorObject> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSAsyncGeneratorObject> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadJSPromiseReactionsOrResult_983(compiler::CodeAssemblerState* state_, TNode<JSPromise> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSPromise> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSPromise, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSPromise, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSPromise> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1061);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSPromise::kReactionsOrResultOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSPromise> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSPromise> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreJSPromiseReactionsOrResult_984(compiler::CodeAssemblerState* state_, TNode<JSPromise> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSPromise, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSPromise, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSPromise, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSPromise> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1061);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSPromise::kReactionsOrResultOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSPromise> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSPromise> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Smi> LoadJSPromiseFlags_985(compiler::CodeAssemblerState* state_, TNode<JSPromise> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSPromise> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSPromise, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSPromise, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSPromise> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1062);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSPromise::kFlagsOffset);
    USE(tmp1);
    TNode<Smi>tmp2 = CodeStubAssembler(state_).LoadReference<Smi>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSPromise> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSPromise> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Smi>{tmp6};
}

void StoreJSPromiseFlags_986(compiler::CodeAssemblerState* state_, TNode<JSPromise> p_o, TNode<Smi> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSPromise, Smi> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSPromise, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSPromise, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSPromise> tmp0;
    TNode<Smi> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1062);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSPromise::kFlagsOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSPromise> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSPromise> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Foreign> LoadCallbackTaskCallback_987(compiler::CodeAssemblerState* state_, TNode<CallbackTask> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<CallbackTask> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<CallbackTask, Foreign> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<CallbackTask, Foreign> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<CallbackTask> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1072);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(CallbackTask::kCallbackOffset);
    USE(tmp1);
    TNode<Foreign>tmp2 = CodeStubAssembler(state_).LoadReference<Foreign>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<CallbackTask> tmp3;
    TNode<Foreign> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<CallbackTask> tmp5;
    TNode<Foreign> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Foreign>{tmp6};
}

void StoreCallbackTaskCallback_988(compiler::CodeAssemblerState* state_, TNode<CallbackTask> p_o, TNode<Foreign> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<CallbackTask, Foreign> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<CallbackTask, Foreign> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<CallbackTask, Foreign> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<CallbackTask> tmp0;
    TNode<Foreign> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1072);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(CallbackTask::kCallbackOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<CallbackTask> tmp3;
    TNode<Foreign> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<CallbackTask> tmp5;
    TNode<Foreign> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Foreign> LoadCallbackTaskData_989(compiler::CodeAssemblerState* state_, TNode<CallbackTask> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<CallbackTask> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<CallbackTask, Foreign> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<CallbackTask, Foreign> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<CallbackTask> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1073);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(CallbackTask::kDataOffset);
    USE(tmp1);
    TNode<Foreign>tmp2 = CodeStubAssembler(state_).LoadReference<Foreign>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<CallbackTask> tmp3;
    TNode<Foreign> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<CallbackTask> tmp5;
    TNode<Foreign> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Foreign>{tmp6};
}

void StoreCallbackTaskData_990(compiler::CodeAssemblerState* state_, TNode<CallbackTask> p_o, TNode<Foreign> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<CallbackTask, Foreign> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<CallbackTask, Foreign> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<CallbackTask, Foreign> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<CallbackTask> tmp0;
    TNode<Foreign> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1073);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(CallbackTask::kDataOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<CallbackTask> tmp3;
    TNode<Foreign> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<CallbackTask> tmp5;
    TNode<Foreign> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<JSReceiver> LoadCallableTaskCallable_991(compiler::CodeAssemblerState* state_, TNode<CallableTask> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<CallableTask> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<CallableTask, JSReceiver> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<CallableTask, JSReceiver> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<CallableTask> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1078);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(CallableTask::kCallableOffset);
    USE(tmp1);
    TNode<JSReceiver>tmp2 = CodeStubAssembler(state_).LoadReference<JSReceiver>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<CallableTask> tmp3;
    TNode<JSReceiver> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<CallableTask> tmp5;
    TNode<JSReceiver> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<JSReceiver>{tmp6};
}

void StoreCallableTaskCallable_992(compiler::CodeAssemblerState* state_, TNode<CallableTask> p_o, TNode<JSReceiver> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<CallableTask, JSReceiver> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<CallableTask, JSReceiver> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<CallableTask, JSReceiver> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<CallableTask> tmp0;
    TNode<JSReceiver> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1078);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(CallableTask::kCallableOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<CallableTask> tmp3;
    TNode<JSReceiver> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<CallableTask> tmp5;
    TNode<JSReceiver> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Context> LoadCallableTaskContext_993(compiler::CodeAssemblerState* state_, TNode<CallableTask> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<CallableTask> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<CallableTask, Context> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<CallableTask, Context> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<CallableTask> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1079);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(CallableTask::kContextOffset);
    USE(tmp1);
    TNode<Context>tmp2 = CodeStubAssembler(state_).LoadReference<Context>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<CallableTask> tmp3;
    TNode<Context> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<CallableTask> tmp5;
    TNode<Context> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Context>{tmp6};
}

void StoreCallableTaskContext_994(compiler::CodeAssemblerState* state_, TNode<CallableTask> p_o, TNode<Context> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<CallableTask, Context> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<CallableTask, Context> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<CallableTask, Context> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<CallableTask> tmp0;
    TNode<Context> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1079);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(CallableTask::kContextOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<CallableTask> tmp3;
    TNode<Context> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<CallableTask> tmp5;
    TNode<Context> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Smi> LoadStackFrameInfoLineNumber_995(compiler::CodeAssemblerState* state_, TNode<StackFrameInfo> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<StackFrameInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<StackFrameInfo, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<StackFrameInfo, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<StackFrameInfo> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1083);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(StackFrameInfo::kLineNumberOffset);
    USE(tmp1);
    TNode<Smi>tmp2 = CodeStubAssembler(state_).LoadReference<Smi>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<StackFrameInfo> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<StackFrameInfo> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Smi>{tmp6};
}

void StoreStackFrameInfoLineNumber_996(compiler::CodeAssemblerState* state_, TNode<StackFrameInfo> p_o, TNode<Smi> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<StackFrameInfo, Smi> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<StackFrameInfo, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<StackFrameInfo, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<StackFrameInfo> tmp0;
    TNode<Smi> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1083);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(StackFrameInfo::kLineNumberOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<StackFrameInfo> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<StackFrameInfo> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Smi> LoadStackFrameInfoColumnNumber_997(compiler::CodeAssemblerState* state_, TNode<StackFrameInfo> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<StackFrameInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<StackFrameInfo, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<StackFrameInfo, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<StackFrameInfo> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1084);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(StackFrameInfo::kColumnNumberOffset);
    USE(tmp1);
    TNode<Smi>tmp2 = CodeStubAssembler(state_).LoadReference<Smi>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<StackFrameInfo> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<StackFrameInfo> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Smi>{tmp6};
}

void StoreStackFrameInfoColumnNumber_998(compiler::CodeAssemblerState* state_, TNode<StackFrameInfo> p_o, TNode<Smi> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<StackFrameInfo, Smi> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<StackFrameInfo, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<StackFrameInfo, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<StackFrameInfo> tmp0;
    TNode<Smi> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1084);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(StackFrameInfo::kColumnNumberOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<StackFrameInfo> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<StackFrameInfo> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Smi> LoadStackFrameInfoPromiseAllIndex_999(compiler::CodeAssemblerState* state_, TNode<StackFrameInfo> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<StackFrameInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<StackFrameInfo, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<StackFrameInfo, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<StackFrameInfo> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1085);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(StackFrameInfo::kPromiseAllIndexOffset);
    USE(tmp1);
    TNode<Smi>tmp2 = CodeStubAssembler(state_).LoadReference<Smi>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<StackFrameInfo> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<StackFrameInfo> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Smi>{tmp6};
}

void StoreStackFrameInfoPromiseAllIndex_1000(compiler::CodeAssemblerState* state_, TNode<StackFrameInfo> p_o, TNode<Smi> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<StackFrameInfo, Smi> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<StackFrameInfo, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<StackFrameInfo, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<StackFrameInfo> tmp0;
    TNode<Smi> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1085);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(StackFrameInfo::kPromiseAllIndexOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<StackFrameInfo> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<StackFrameInfo> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Smi> LoadStackFrameInfoScriptId_1001(compiler::CodeAssemblerState* state_, TNode<StackFrameInfo> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<StackFrameInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<StackFrameInfo, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<StackFrameInfo, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<StackFrameInfo> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1086);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(StackFrameInfo::kScriptIdOffset);
    USE(tmp1);
    TNode<Smi>tmp2 = CodeStubAssembler(state_).LoadReference<Smi>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<StackFrameInfo> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<StackFrameInfo> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Smi>{tmp6};
}

void StoreStackFrameInfoScriptId_1002(compiler::CodeAssemblerState* state_, TNode<StackFrameInfo> p_o, TNode<Smi> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<StackFrameInfo, Smi> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<StackFrameInfo, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<StackFrameInfo, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<StackFrameInfo> tmp0;
    TNode<Smi> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1086);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(StackFrameInfo::kScriptIdOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<StackFrameInfo> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<StackFrameInfo> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<HeapObject> LoadStackFrameInfoScriptName_1003(compiler::CodeAssemblerState* state_, TNode<StackFrameInfo> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<StackFrameInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<StackFrameInfo, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<StackFrameInfo, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<StackFrameInfo> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1087);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(StackFrameInfo::kScriptNameOffset);
    USE(tmp1);
    TNode<HeapObject>tmp2 = CodeStubAssembler(state_).LoadReference<HeapObject>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<StackFrameInfo> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<StackFrameInfo> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<HeapObject>{tmp6};
}

void StoreStackFrameInfoScriptName_1004(compiler::CodeAssemblerState* state_, TNode<StackFrameInfo> p_o, TNode<HeapObject> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<StackFrameInfo, HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<StackFrameInfo, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<StackFrameInfo, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<StackFrameInfo> tmp0;
    TNode<HeapObject> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1087);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(StackFrameInfo::kScriptNameOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<StackFrameInfo> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<StackFrameInfo> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<HeapObject> LoadStackFrameInfoScriptNameOrSourceUrl_1005(compiler::CodeAssemblerState* state_, TNode<StackFrameInfo> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<StackFrameInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<StackFrameInfo, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<StackFrameInfo, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<StackFrameInfo> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1088);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(StackFrameInfo::kScriptNameOrSourceUrlOffset);
    USE(tmp1);
    TNode<HeapObject>tmp2 = CodeStubAssembler(state_).LoadReference<HeapObject>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<StackFrameInfo> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<StackFrameInfo> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<HeapObject>{tmp6};
}

void StoreStackFrameInfoScriptNameOrSourceUrl_1006(compiler::CodeAssemblerState* state_, TNode<StackFrameInfo> p_o, TNode<HeapObject> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<StackFrameInfo, HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<StackFrameInfo, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<StackFrameInfo, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<StackFrameInfo> tmp0;
    TNode<HeapObject> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1088);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(StackFrameInfo::kScriptNameOrSourceUrlOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<StackFrameInfo> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<StackFrameInfo> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<HeapObject> LoadStackFrameInfoFunctionName_1007(compiler::CodeAssemblerState* state_, TNode<StackFrameInfo> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<StackFrameInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<StackFrameInfo, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<StackFrameInfo, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<StackFrameInfo> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1089);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(StackFrameInfo::kFunctionNameOffset);
    USE(tmp1);
    TNode<HeapObject>tmp2 = CodeStubAssembler(state_).LoadReference<HeapObject>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<StackFrameInfo> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<StackFrameInfo> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<HeapObject>{tmp6};
}

void StoreStackFrameInfoFunctionName_1008(compiler::CodeAssemblerState* state_, TNode<StackFrameInfo> p_o, TNode<HeapObject> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<StackFrameInfo, HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<StackFrameInfo, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<StackFrameInfo, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<StackFrameInfo> tmp0;
    TNode<HeapObject> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1089);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(StackFrameInfo::kFunctionNameOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<StackFrameInfo> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<StackFrameInfo> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<HeapObject> LoadStackFrameInfoMethodName_1009(compiler::CodeAssemblerState* state_, TNode<StackFrameInfo> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<StackFrameInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<StackFrameInfo, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<StackFrameInfo, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<StackFrameInfo> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1090);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(StackFrameInfo::kMethodNameOffset);
    USE(tmp1);
    TNode<HeapObject>tmp2 = CodeStubAssembler(state_).LoadReference<HeapObject>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<StackFrameInfo> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<StackFrameInfo> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<HeapObject>{tmp6};
}

void StoreStackFrameInfoMethodName_1010(compiler::CodeAssemblerState* state_, TNode<StackFrameInfo> p_o, TNode<HeapObject> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<StackFrameInfo, HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<StackFrameInfo, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<StackFrameInfo, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<StackFrameInfo> tmp0;
    TNode<HeapObject> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1090);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(StackFrameInfo::kMethodNameOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<StackFrameInfo> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<StackFrameInfo> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<HeapObject> LoadStackFrameInfoTypeName_1011(compiler::CodeAssemblerState* state_, TNode<StackFrameInfo> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<StackFrameInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<StackFrameInfo, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<StackFrameInfo, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<StackFrameInfo> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1091);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(StackFrameInfo::kTypeNameOffset);
    USE(tmp1);
    TNode<HeapObject>tmp2 = CodeStubAssembler(state_).LoadReference<HeapObject>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<StackFrameInfo> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<StackFrameInfo> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<HeapObject>{tmp6};
}

void StoreStackFrameInfoTypeName_1012(compiler::CodeAssemblerState* state_, TNode<StackFrameInfo> p_o, TNode<HeapObject> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<StackFrameInfo, HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<StackFrameInfo, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<StackFrameInfo, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<StackFrameInfo> tmp0;
    TNode<HeapObject> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1091);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(StackFrameInfo::kTypeNameOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<StackFrameInfo> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<StackFrameInfo> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<HeapObject> LoadStackFrameInfoEvalOrigin_1013(compiler::CodeAssemblerState* state_, TNode<StackFrameInfo> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<StackFrameInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<StackFrameInfo, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<StackFrameInfo, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<StackFrameInfo> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1092);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(StackFrameInfo::kEvalOriginOffset);
    USE(tmp1);
    TNode<HeapObject>tmp2 = CodeStubAssembler(state_).LoadReference<HeapObject>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<StackFrameInfo> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<StackFrameInfo> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<HeapObject>{tmp6};
}

void StoreStackFrameInfoEvalOrigin_1014(compiler::CodeAssemblerState* state_, TNode<StackFrameInfo> p_o, TNode<HeapObject> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<StackFrameInfo, HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<StackFrameInfo, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<StackFrameInfo, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<StackFrameInfo> tmp0;
    TNode<HeapObject> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1092);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(StackFrameInfo::kEvalOriginOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<StackFrameInfo> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<StackFrameInfo> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<HeapObject> LoadStackFrameInfoWasmModuleName_1015(compiler::CodeAssemblerState* state_, TNode<StackFrameInfo> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<StackFrameInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<StackFrameInfo, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<StackFrameInfo, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<StackFrameInfo> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1093);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(StackFrameInfo::kWasmModuleNameOffset);
    USE(tmp1);
    TNode<HeapObject>tmp2 = CodeStubAssembler(state_).LoadReference<HeapObject>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<StackFrameInfo> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<StackFrameInfo> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<HeapObject>{tmp6};
}

void StoreStackFrameInfoWasmModuleName_1016(compiler::CodeAssemblerState* state_, TNode<StackFrameInfo> p_o, TNode<HeapObject> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<StackFrameInfo, HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<StackFrameInfo, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<StackFrameInfo, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<StackFrameInfo> tmp0;
    TNode<HeapObject> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1093);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(StackFrameInfo::kWasmModuleNameOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<StackFrameInfo> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<StackFrameInfo> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<HeapObject> LoadStackFrameInfoWasmInstance_1017(compiler::CodeAssemblerState* state_, TNode<StackFrameInfo> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<StackFrameInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<StackFrameInfo, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<StackFrameInfo, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<StackFrameInfo> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1094);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(StackFrameInfo::kWasmInstanceOffset);
    USE(tmp1);
    TNode<HeapObject>tmp2 = CodeStubAssembler(state_).LoadReference<HeapObject>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<StackFrameInfo> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<StackFrameInfo> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<HeapObject>{tmp6};
}

void StoreStackFrameInfoWasmInstance_1018(compiler::CodeAssemblerState* state_, TNode<StackFrameInfo> p_o, TNode<HeapObject> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<StackFrameInfo, HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<StackFrameInfo, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<StackFrameInfo, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<StackFrameInfo> tmp0;
    TNode<HeapObject> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1094);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(StackFrameInfo::kWasmInstanceOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<StackFrameInfo> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<StackFrameInfo> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Smi> LoadStackFrameInfoFlag_1019(compiler::CodeAssemblerState* state_, TNode<StackFrameInfo> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<StackFrameInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<StackFrameInfo, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<StackFrameInfo, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<StackFrameInfo> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1095);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(StackFrameInfo::kFlagOffset);
    USE(tmp1);
    TNode<Smi>tmp2 = CodeStubAssembler(state_).LoadReference<Smi>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<StackFrameInfo> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<StackFrameInfo> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Smi>{tmp6};
}

void StoreStackFrameInfoFlag_1020(compiler::CodeAssemblerState* state_, TNode<StackFrameInfo> p_o, TNode<Smi> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<StackFrameInfo, Smi> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<StackFrameInfo, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<StackFrameInfo, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<StackFrameInfo> tmp0;
    TNode<Smi> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1095);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(StackFrameInfo::kFlagOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<StackFrameInfo> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<StackFrameInfo> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<HeapObject> LoadStackTraceFrameFrameArray_1021(compiler::CodeAssemblerState* state_, TNode<StackTraceFrame> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<StackTraceFrame> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<StackTraceFrame, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<StackTraceFrame, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<StackTraceFrame> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1102);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(StackTraceFrame::kFrameArrayOffset);
    USE(tmp1);
    TNode<HeapObject>tmp2 = CodeStubAssembler(state_).LoadReference<HeapObject>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<StackTraceFrame> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<StackTraceFrame> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<HeapObject>{tmp6};
}

void StoreStackTraceFrameFrameArray_1022(compiler::CodeAssemblerState* state_, TNode<StackTraceFrame> p_o, TNode<HeapObject> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<StackTraceFrame, HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<StackTraceFrame, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<StackTraceFrame, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<StackTraceFrame> tmp0;
    TNode<HeapObject> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1102);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(StackTraceFrame::kFrameArrayOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<StackTraceFrame> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<StackTraceFrame> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Smi> LoadStackTraceFrameFrameIndex_1023(compiler::CodeAssemblerState* state_, TNode<StackTraceFrame> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<StackTraceFrame> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<StackTraceFrame, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<StackTraceFrame, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<StackTraceFrame> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1103);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(StackTraceFrame::kFrameIndexOffset);
    USE(tmp1);
    TNode<Smi>tmp2 = CodeStubAssembler(state_).LoadReference<Smi>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<StackTraceFrame> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<StackTraceFrame> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Smi>{tmp6};
}

void StoreStackTraceFrameFrameIndex_1024(compiler::CodeAssemblerState* state_, TNode<StackTraceFrame> p_o, TNode<Smi> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<StackTraceFrame, Smi> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<StackTraceFrame, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<StackTraceFrame, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<StackTraceFrame> tmp0;
    TNode<Smi> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1103);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(StackTraceFrame::kFrameIndexOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<StackTraceFrame> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<StackTraceFrame> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<HeapObject> LoadStackTraceFrameFrameInfo_1025(compiler::CodeAssemblerState* state_, TNode<StackTraceFrame> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<StackTraceFrame> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<StackTraceFrame, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<StackTraceFrame, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<StackTraceFrame> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1104);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(StackTraceFrame::kFrameInfoOffset);
    USE(tmp1);
    TNode<HeapObject>tmp2 = CodeStubAssembler(state_).LoadReference<HeapObject>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<StackTraceFrame> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<StackTraceFrame> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<HeapObject>{tmp6};
}

void StoreStackTraceFrameFrameInfo_1026(compiler::CodeAssemblerState* state_, TNode<StackTraceFrame> p_o, TNode<HeapObject> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<StackTraceFrame, HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<StackTraceFrame, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<StackTraceFrame, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<StackTraceFrame> tmp0;
    TNode<HeapObject> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1104);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(StackTraceFrame::kFrameInfoOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<StackTraceFrame> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<StackTraceFrame> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Smi> LoadStackTraceFrameId_1027(compiler::CodeAssemblerState* state_, TNode<StackTraceFrame> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<StackTraceFrame> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<StackTraceFrame, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<StackTraceFrame, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<StackTraceFrame> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1105);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(StackTraceFrame::kIdOffset);
    USE(tmp1);
    TNode<Smi>tmp2 = CodeStubAssembler(state_).LoadReference<Smi>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<StackTraceFrame> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<StackTraceFrame> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Smi>{tmp6};
}

void StoreStackTraceFrameId_1028(compiler::CodeAssemblerState* state_, TNode<StackTraceFrame> p_o, TNode<Smi> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<StackTraceFrame, Smi> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<StackTraceFrame, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<StackTraceFrame, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<StackTraceFrame> tmp0;
    TNode<Smi> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1105);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(StackTraceFrame::kIdOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<StackTraceFrame> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<StackTraceFrame> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Smi> LoadClassPositionsStart_1029(compiler::CodeAssemblerState* state_, TNode<ClassPositions> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<ClassPositions> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<ClassPositions, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<ClassPositions, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<ClassPositions> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1110);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(ClassPositions::kStartOffset);
    USE(tmp1);
    TNode<Smi>tmp2 = CodeStubAssembler(state_).LoadReference<Smi>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<ClassPositions> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<ClassPositions> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Smi>{tmp6};
}

void StoreClassPositionsStart_1030(compiler::CodeAssemblerState* state_, TNode<ClassPositions> p_o, TNode<Smi> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<ClassPositions, Smi> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<ClassPositions, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<ClassPositions, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<ClassPositions> tmp0;
    TNode<Smi> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1110);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(ClassPositions::kStartOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<ClassPositions> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<ClassPositions> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Smi> LoadClassPositionsEnd_1031(compiler::CodeAssemblerState* state_, TNode<ClassPositions> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<ClassPositions> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<ClassPositions, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<ClassPositions, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<ClassPositions> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1111);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(ClassPositions::kEndOffset);
    USE(tmp1);
    TNode<Smi>tmp2 = CodeStubAssembler(state_).LoadReference<Smi>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<ClassPositions> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<ClassPositions> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Smi>{tmp6};
}

void StoreClassPositionsEnd_1032(compiler::CodeAssemblerState* state_, TNode<ClassPositions> p_o, TNode<Smi> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<ClassPositions, Smi> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<ClassPositions, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<ClassPositions, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<ClassPositions> tmp0;
    TNode<Smi> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1111);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(ClassPositions::kEndOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<ClassPositions> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<ClassPositions> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Code> LoadWasmExportedFunctionDataWrapperCode_1033(compiler::CodeAssemblerState* state_, TNode<WasmExportedFunctionData> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmExportedFunctionData> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmExportedFunctionData, Code> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmExportedFunctionData, Code> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<WasmExportedFunctionData> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1117);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(WasmExportedFunctionData::kWrapperCodeOffset);
    USE(tmp1);
    TNode<Code>tmp2 = CodeStubAssembler(state_).LoadReference<Code>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<WasmExportedFunctionData> tmp3;
    TNode<Code> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmExportedFunctionData> tmp5;
    TNode<Code> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Code>{tmp6};
}

void StoreWasmExportedFunctionDataWrapperCode_1034(compiler::CodeAssemblerState* state_, TNode<WasmExportedFunctionData> p_o, TNode<Code> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmExportedFunctionData, Code> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmExportedFunctionData, Code> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmExportedFunctionData, Code> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<WasmExportedFunctionData> tmp0;
    TNode<Code> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1117);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(WasmExportedFunctionData::kWrapperCodeOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<WasmExportedFunctionData> tmp3;
    TNode<Code> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmExportedFunctionData> tmp5;
    TNode<Code> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<JSObject> LoadWasmExportedFunctionDataInstance_1035(compiler::CodeAssemblerState* state_, TNode<WasmExportedFunctionData> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmExportedFunctionData> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmExportedFunctionData, JSObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmExportedFunctionData, JSObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<WasmExportedFunctionData> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1118);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(WasmExportedFunctionData::kInstanceOffset);
    USE(tmp1);
    TNode<JSObject>tmp2 = CodeStubAssembler(state_).LoadReference<JSObject>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<WasmExportedFunctionData> tmp3;
    TNode<JSObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmExportedFunctionData> tmp5;
    TNode<JSObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<JSObject>{tmp6};
}

void StoreWasmExportedFunctionDataInstance_1036(compiler::CodeAssemblerState* state_, TNode<WasmExportedFunctionData> p_o, TNode<JSObject> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmExportedFunctionData, JSObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmExportedFunctionData, JSObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmExportedFunctionData, JSObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<WasmExportedFunctionData> tmp0;
    TNode<JSObject> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1118);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(WasmExportedFunctionData::kInstanceOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<WasmExportedFunctionData> tmp3;
    TNode<JSObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmExportedFunctionData> tmp5;
    TNode<JSObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Smi> LoadWasmExportedFunctionDataJumpTableOffset_1037(compiler::CodeAssemblerState* state_, TNode<WasmExportedFunctionData> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmExportedFunctionData> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmExportedFunctionData, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmExportedFunctionData, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<WasmExportedFunctionData> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1119);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(WasmExportedFunctionData::kJumpTableOffsetOffset);
    USE(tmp1);
    TNode<Smi>tmp2 = CodeStubAssembler(state_).LoadReference<Smi>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<WasmExportedFunctionData> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmExportedFunctionData> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Smi>{tmp6};
}

void StoreWasmExportedFunctionDataJumpTableOffset_1038(compiler::CodeAssemblerState* state_, TNode<WasmExportedFunctionData> p_o, TNode<Smi> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmExportedFunctionData, Smi> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmExportedFunctionData, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmExportedFunctionData, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<WasmExportedFunctionData> tmp0;
    TNode<Smi> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1119);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(WasmExportedFunctionData::kJumpTableOffsetOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<WasmExportedFunctionData> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmExportedFunctionData> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Smi> LoadWasmExportedFunctionDataFunctionIndex_1039(compiler::CodeAssemblerState* state_, TNode<WasmExportedFunctionData> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmExportedFunctionData> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmExportedFunctionData, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmExportedFunctionData, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<WasmExportedFunctionData> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1120);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(WasmExportedFunctionData::kFunctionIndexOffset);
    USE(tmp1);
    TNode<Smi>tmp2 = CodeStubAssembler(state_).LoadReference<Smi>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<WasmExportedFunctionData> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmExportedFunctionData> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Smi>{tmp6};
}

void StoreWasmExportedFunctionDataFunctionIndex_1040(compiler::CodeAssemblerState* state_, TNode<WasmExportedFunctionData> p_o, TNode<Smi> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmExportedFunctionData, Smi> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmExportedFunctionData, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmExportedFunctionData, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<WasmExportedFunctionData> tmp0;
    TNode<Smi> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1120);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(WasmExportedFunctionData::kFunctionIndexOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<WasmExportedFunctionData> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmExportedFunctionData> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadWasmExportedFunctionDataCWrapperCode_1041(compiler::CodeAssemblerState* state_, TNode<WasmExportedFunctionData> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmExportedFunctionData> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmExportedFunctionData, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmExportedFunctionData, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<WasmExportedFunctionData> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1123);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(WasmExportedFunctionData::kCWrapperCodeOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<WasmExportedFunctionData> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmExportedFunctionData> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreWasmExportedFunctionDataCWrapperCode_1042(compiler::CodeAssemblerState* state_, TNode<WasmExportedFunctionData> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmExportedFunctionData, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmExportedFunctionData, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmExportedFunctionData, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<WasmExportedFunctionData> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1123);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(WasmExportedFunctionData::kCWrapperCodeOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<WasmExportedFunctionData> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmExportedFunctionData> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadWasmExportedFunctionDataWasmCallTarget_1043(compiler::CodeAssemblerState* state_, TNode<WasmExportedFunctionData> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmExportedFunctionData> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmExportedFunctionData, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmExportedFunctionData, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<WasmExportedFunctionData> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1124);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(WasmExportedFunctionData::kWasmCallTargetOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<WasmExportedFunctionData> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmExportedFunctionData> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreWasmExportedFunctionDataWasmCallTarget_1044(compiler::CodeAssemblerState* state_, TNode<WasmExportedFunctionData> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmExportedFunctionData, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmExportedFunctionData, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmExportedFunctionData, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<WasmExportedFunctionData> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1124);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(WasmExportedFunctionData::kWasmCallTargetOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<WasmExportedFunctionData> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmExportedFunctionData> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Smi> LoadWasmExportedFunctionDataPackedArgsSize_1045(compiler::CodeAssemblerState* state_, TNode<WasmExportedFunctionData> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmExportedFunctionData> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmExportedFunctionData, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmExportedFunctionData, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<WasmExportedFunctionData> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1125);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(WasmExportedFunctionData::kPackedArgsSizeOffset);
    USE(tmp1);
    TNode<Smi>tmp2 = CodeStubAssembler(state_).LoadReference<Smi>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<WasmExportedFunctionData> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmExportedFunctionData> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Smi>{tmp6};
}

void StoreWasmExportedFunctionDataPackedArgsSize_1046(compiler::CodeAssemblerState* state_, TNode<WasmExportedFunctionData> p_o, TNode<Smi> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmExportedFunctionData, Smi> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmExportedFunctionData, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmExportedFunctionData, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<WasmExportedFunctionData> tmp0;
    TNode<Smi> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1125);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(WasmExportedFunctionData::kPackedArgsSizeOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<WasmExportedFunctionData> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmExportedFunctionData> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<JSReceiver> LoadWasmJSFunctionDataCallable_1047(compiler::CodeAssemblerState* state_, TNode<WasmJSFunctionData> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmJSFunctionData> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmJSFunctionData, JSReceiver> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmJSFunctionData, JSReceiver> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<WasmJSFunctionData> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1129);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(WasmJSFunctionData::kCallableOffset);
    USE(tmp1);
    TNode<JSReceiver>tmp2 = CodeStubAssembler(state_).LoadReference<JSReceiver>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<WasmJSFunctionData> tmp3;
    TNode<JSReceiver> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmJSFunctionData> tmp5;
    TNode<JSReceiver> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<JSReceiver>{tmp6};
}

void StoreWasmJSFunctionDataCallable_1048(compiler::CodeAssemblerState* state_, TNode<WasmJSFunctionData> p_o, TNode<JSReceiver> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmJSFunctionData, JSReceiver> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmJSFunctionData, JSReceiver> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmJSFunctionData, JSReceiver> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<WasmJSFunctionData> tmp0;
    TNode<JSReceiver> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1129);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(WasmJSFunctionData::kCallableOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<WasmJSFunctionData> tmp3;
    TNode<JSReceiver> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmJSFunctionData> tmp5;
    TNode<JSReceiver> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Code> LoadWasmJSFunctionDataWrapperCode_1049(compiler::CodeAssemblerState* state_, TNode<WasmJSFunctionData> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmJSFunctionData> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmJSFunctionData, Code> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmJSFunctionData, Code> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<WasmJSFunctionData> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1130);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(WasmJSFunctionData::kWrapperCodeOffset);
    USE(tmp1);
    TNode<Code>tmp2 = CodeStubAssembler(state_).LoadReference<Code>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<WasmJSFunctionData> tmp3;
    TNode<Code> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmJSFunctionData> tmp5;
    TNode<Code> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Code>{tmp6};
}

void StoreWasmJSFunctionDataWrapperCode_1050(compiler::CodeAssemblerState* state_, TNode<WasmJSFunctionData> p_o, TNode<Code> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmJSFunctionData, Code> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmJSFunctionData, Code> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmJSFunctionData, Code> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<WasmJSFunctionData> tmp0;
    TNode<Code> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1130);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(WasmJSFunctionData::kWrapperCodeOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<WasmJSFunctionData> tmp3;
    TNode<Code> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmJSFunctionData> tmp5;
    TNode<Code> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Smi> LoadWasmJSFunctionDataSerializedReturnCount_1051(compiler::CodeAssemblerState* state_, TNode<WasmJSFunctionData> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmJSFunctionData> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmJSFunctionData, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmJSFunctionData, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<WasmJSFunctionData> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1131);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(WasmJSFunctionData::kSerializedReturnCountOffset);
    USE(tmp1);
    TNode<Smi>tmp2 = CodeStubAssembler(state_).LoadReference<Smi>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<WasmJSFunctionData> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmJSFunctionData> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Smi>{tmp6};
}

void StoreWasmJSFunctionDataSerializedReturnCount_1052(compiler::CodeAssemblerState* state_, TNode<WasmJSFunctionData> p_o, TNode<Smi> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmJSFunctionData, Smi> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmJSFunctionData, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmJSFunctionData, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<WasmJSFunctionData> tmp0;
    TNode<Smi> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1131);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(WasmJSFunctionData::kSerializedReturnCountOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<WasmJSFunctionData> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmJSFunctionData> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Smi> LoadWasmJSFunctionDataSerializedParameterCount_1053(compiler::CodeAssemblerState* state_, TNode<WasmJSFunctionData> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmJSFunctionData> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmJSFunctionData, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmJSFunctionData, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<WasmJSFunctionData> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1132);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(WasmJSFunctionData::kSerializedParameterCountOffset);
    USE(tmp1);
    TNode<Smi>tmp2 = CodeStubAssembler(state_).LoadReference<Smi>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<WasmJSFunctionData> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmJSFunctionData> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Smi>{tmp6};
}

void StoreWasmJSFunctionDataSerializedParameterCount_1054(compiler::CodeAssemblerState* state_, TNode<WasmJSFunctionData> p_o, TNode<Smi> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmJSFunctionData, Smi> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmJSFunctionData, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmJSFunctionData, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<WasmJSFunctionData> tmp0;
    TNode<Smi> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1132);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(WasmJSFunctionData::kSerializedParameterCountOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<WasmJSFunctionData> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmJSFunctionData> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<ByteArray> LoadWasmJSFunctionDataSerializedSignature_1055(compiler::CodeAssemblerState* state_, TNode<WasmJSFunctionData> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmJSFunctionData> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmJSFunctionData, ByteArray> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmJSFunctionData, ByteArray> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<WasmJSFunctionData> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1133);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(WasmJSFunctionData::kSerializedSignatureOffset);
    USE(tmp1);
    TNode<ByteArray>tmp2 = CodeStubAssembler(state_).LoadReference<ByteArray>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<WasmJSFunctionData> tmp3;
    TNode<ByteArray> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmJSFunctionData> tmp5;
    TNode<ByteArray> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<ByteArray>{tmp6};
}

void StoreWasmJSFunctionDataSerializedSignature_1056(compiler::CodeAssemblerState* state_, TNode<WasmJSFunctionData> p_o, TNode<ByteArray> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmJSFunctionData, ByteArray> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmJSFunctionData, ByteArray> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmJSFunctionData, ByteArray> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<WasmJSFunctionData> tmp0;
    TNode<ByteArray> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1133);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(WasmJSFunctionData::kSerializedSignatureOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<WasmJSFunctionData> tmp3;
    TNode<ByteArray> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmJSFunctionData> tmp5;
    TNode<ByteArray> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<RawPtrT> LoadWasmCapiFunctionDataCallTarget_1057(compiler::CodeAssemblerState* state_, TNode<WasmCapiFunctionData> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmCapiFunctionData> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmCapiFunctionData, RawPtrT> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmCapiFunctionData, RawPtrT> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<WasmCapiFunctionData> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1137);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(WasmCapiFunctionData::kCallTargetOffset);
    USE(tmp1);
    TNode<RawPtrT>tmp2 = CodeStubAssembler(state_).LoadReference<RawPtrT>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<WasmCapiFunctionData> tmp3;
    TNode<RawPtrT> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmCapiFunctionData> tmp5;
    TNode<RawPtrT> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<RawPtrT>{tmp6};
}

void StoreWasmCapiFunctionDataCallTarget_1058(compiler::CodeAssemblerState* state_, TNode<WasmCapiFunctionData> p_o, TNode<RawPtrT> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmCapiFunctionData, RawPtrT> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmCapiFunctionData, RawPtrT> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmCapiFunctionData, RawPtrT> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<WasmCapiFunctionData> tmp0;
    TNode<RawPtrT> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1137);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(WasmCapiFunctionData::kCallTargetOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<WasmCapiFunctionData> tmp3;
    TNode<RawPtrT> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmCapiFunctionData> tmp5;
    TNode<RawPtrT> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Foreign> LoadWasmCapiFunctionDataEmbedderData_1059(compiler::CodeAssemblerState* state_, TNode<WasmCapiFunctionData> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmCapiFunctionData> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmCapiFunctionData, Foreign> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmCapiFunctionData, Foreign> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<WasmCapiFunctionData> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1138);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(WasmCapiFunctionData::kEmbedderDataOffset);
    USE(tmp1);
    TNode<Foreign>tmp2 = CodeStubAssembler(state_).LoadReference<Foreign>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<WasmCapiFunctionData> tmp3;
    TNode<Foreign> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmCapiFunctionData> tmp5;
    TNode<Foreign> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Foreign>{tmp6};
}

void StoreWasmCapiFunctionDataEmbedderData_1060(compiler::CodeAssemblerState* state_, TNode<WasmCapiFunctionData> p_o, TNode<Foreign> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmCapiFunctionData, Foreign> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmCapiFunctionData, Foreign> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmCapiFunctionData, Foreign> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<WasmCapiFunctionData> tmp0;
    TNode<Foreign> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1138);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(WasmCapiFunctionData::kEmbedderDataOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<WasmCapiFunctionData> tmp3;
    TNode<Foreign> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmCapiFunctionData> tmp5;
    TNode<Foreign> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Code> LoadWasmCapiFunctionDataWrapperCode_1061(compiler::CodeAssemblerState* state_, TNode<WasmCapiFunctionData> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmCapiFunctionData> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmCapiFunctionData, Code> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmCapiFunctionData, Code> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<WasmCapiFunctionData> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1139);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(WasmCapiFunctionData::kWrapperCodeOffset);
    USE(tmp1);
    TNode<Code>tmp2 = CodeStubAssembler(state_).LoadReference<Code>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<WasmCapiFunctionData> tmp3;
    TNode<Code> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmCapiFunctionData> tmp5;
    TNode<Code> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Code>{tmp6};
}

void StoreWasmCapiFunctionDataWrapperCode_1062(compiler::CodeAssemblerState* state_, TNode<WasmCapiFunctionData> p_o, TNode<Code> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmCapiFunctionData, Code> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmCapiFunctionData, Code> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmCapiFunctionData, Code> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<WasmCapiFunctionData> tmp0;
    TNode<Code> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1139);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(WasmCapiFunctionData::kWrapperCodeOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<WasmCapiFunctionData> tmp3;
    TNode<Code> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmCapiFunctionData> tmp5;
    TNode<Code> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<ByteArray> LoadWasmCapiFunctionDataSerializedSignature_1063(compiler::CodeAssemblerState* state_, TNode<WasmCapiFunctionData> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmCapiFunctionData> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmCapiFunctionData, ByteArray> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmCapiFunctionData, ByteArray> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<WasmCapiFunctionData> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1140);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(WasmCapiFunctionData::kSerializedSignatureOffset);
    USE(tmp1);
    TNode<ByteArray>tmp2 = CodeStubAssembler(state_).LoadReference<ByteArray>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<WasmCapiFunctionData> tmp3;
    TNode<ByteArray> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmCapiFunctionData> tmp5;
    TNode<ByteArray> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<ByteArray>{tmp6};
}

void StoreWasmCapiFunctionDataSerializedSignature_1064(compiler::CodeAssemblerState* state_, TNode<WasmCapiFunctionData> p_o, TNode<ByteArray> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmCapiFunctionData, ByteArray> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmCapiFunctionData, ByteArray> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmCapiFunctionData, ByteArray> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<WasmCapiFunctionData> tmp0;
    TNode<ByteArray> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1140);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(WasmCapiFunctionData::kSerializedSignatureOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<WasmCapiFunctionData> tmp3;
    TNode<ByteArray> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmCapiFunctionData> tmp5;
    TNode<ByteArray> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Uint32T> LoadWasmIndirectFunctionTableSize_1065(compiler::CodeAssemblerState* state_, TNode<WasmIndirectFunctionTable> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmIndirectFunctionTable> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmIndirectFunctionTable, Uint32T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmIndirectFunctionTable, Uint32T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<WasmIndirectFunctionTable> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1144);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(WasmIndirectFunctionTable::kSizeOffset);
    USE(tmp1);
    TNode<Uint32T>tmp2 = CodeStubAssembler(state_).LoadReference<Uint32T>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<WasmIndirectFunctionTable> tmp3;
    TNode<Uint32T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmIndirectFunctionTable> tmp5;
    TNode<Uint32T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Uint32T>{tmp6};
}

void StoreWasmIndirectFunctionTableSize_1066(compiler::CodeAssemblerState* state_, TNode<WasmIndirectFunctionTable> p_o, TNode<Uint32T> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmIndirectFunctionTable, Uint32T> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmIndirectFunctionTable, Uint32T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmIndirectFunctionTable, Uint32T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<WasmIndirectFunctionTable> tmp0;
    TNode<Uint32T> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1144);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(WasmIndirectFunctionTable::kSizeOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<WasmIndirectFunctionTable> tmp3;
    TNode<Uint32T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmIndirectFunctionTable> tmp5;
    TNode<Uint32T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Uint32T> LoadWasmIndirectFunctionTableOptionalPadding_1067(compiler::CodeAssemblerState* state_, TNode<WasmIndirectFunctionTable> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmIndirectFunctionTable> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmIndirectFunctionTable, Uint32T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmIndirectFunctionTable, Uint32T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<WasmIndirectFunctionTable> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1145);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(WasmIndirectFunctionTable::kOptionalPaddingOffset);
    USE(tmp1);
    TNode<Uint32T>tmp2 = CodeStubAssembler(state_).LoadReference<Uint32T>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<WasmIndirectFunctionTable> tmp3;
    TNode<Uint32T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmIndirectFunctionTable> tmp5;
    TNode<Uint32T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Uint32T>{tmp6};
}

void StoreWasmIndirectFunctionTableOptionalPadding_1068(compiler::CodeAssemblerState* state_, TNode<WasmIndirectFunctionTable> p_o, TNode<Uint32T> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmIndirectFunctionTable, Uint32T> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmIndirectFunctionTable, Uint32T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmIndirectFunctionTable, Uint32T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<WasmIndirectFunctionTable> tmp0;
    TNode<Uint32T> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1145);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(WasmIndirectFunctionTable::kOptionalPaddingOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<WasmIndirectFunctionTable> tmp3;
    TNode<Uint32T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmIndirectFunctionTable> tmp5;
    TNode<Uint32T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<RawPtrT> LoadWasmIndirectFunctionTableSigIds_1069(compiler::CodeAssemblerState* state_, TNode<WasmIndirectFunctionTable> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmIndirectFunctionTable> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmIndirectFunctionTable, RawPtrT> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmIndirectFunctionTable, RawPtrT> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<WasmIndirectFunctionTable> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1147);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(WasmIndirectFunctionTable::kSigIdsOffset);
    USE(tmp1);
    TNode<RawPtrT>tmp2 = CodeStubAssembler(state_).LoadReference<RawPtrT>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<WasmIndirectFunctionTable> tmp3;
    TNode<RawPtrT> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmIndirectFunctionTable> tmp5;
    TNode<RawPtrT> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<RawPtrT>{tmp6};
}

void StoreWasmIndirectFunctionTableSigIds_1070(compiler::CodeAssemblerState* state_, TNode<WasmIndirectFunctionTable> p_o, TNode<RawPtrT> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmIndirectFunctionTable, RawPtrT> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmIndirectFunctionTable, RawPtrT> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmIndirectFunctionTable, RawPtrT> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<WasmIndirectFunctionTable> tmp0;
    TNode<RawPtrT> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1147);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(WasmIndirectFunctionTable::kSigIdsOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<WasmIndirectFunctionTable> tmp3;
    TNode<RawPtrT> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmIndirectFunctionTable> tmp5;
    TNode<RawPtrT> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<RawPtrT> LoadWasmIndirectFunctionTableTargets_1071(compiler::CodeAssemblerState* state_, TNode<WasmIndirectFunctionTable> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmIndirectFunctionTable> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmIndirectFunctionTable, RawPtrT> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmIndirectFunctionTable, RawPtrT> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<WasmIndirectFunctionTable> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1148);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(WasmIndirectFunctionTable::kTargetsOffset);
    USE(tmp1);
    TNode<RawPtrT>tmp2 = CodeStubAssembler(state_).LoadReference<RawPtrT>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<WasmIndirectFunctionTable> tmp3;
    TNode<RawPtrT> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmIndirectFunctionTable> tmp5;
    TNode<RawPtrT> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<RawPtrT>{tmp6};
}

void StoreWasmIndirectFunctionTableTargets_1072(compiler::CodeAssemblerState* state_, TNode<WasmIndirectFunctionTable> p_o, TNode<RawPtrT> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmIndirectFunctionTable, RawPtrT> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmIndirectFunctionTable, RawPtrT> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmIndirectFunctionTable, RawPtrT> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<WasmIndirectFunctionTable> tmp0;
    TNode<RawPtrT> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1148);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(WasmIndirectFunctionTable::kTargetsOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<WasmIndirectFunctionTable> tmp3;
    TNode<RawPtrT> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmIndirectFunctionTable> tmp5;
    TNode<RawPtrT> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<HeapObject> LoadWasmIndirectFunctionTableManagedNativeAllocations_1073(compiler::CodeAssemblerState* state_, TNode<WasmIndirectFunctionTable> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmIndirectFunctionTable> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmIndirectFunctionTable, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmIndirectFunctionTable, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<WasmIndirectFunctionTable> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1149);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(WasmIndirectFunctionTable::kManagedNativeAllocationsOffset);
    USE(tmp1);
    TNode<HeapObject>tmp2 = CodeStubAssembler(state_).LoadReference<HeapObject>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<WasmIndirectFunctionTable> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmIndirectFunctionTable> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<HeapObject>{tmp6};
}

void StoreWasmIndirectFunctionTableManagedNativeAllocations_1074(compiler::CodeAssemblerState* state_, TNode<WasmIndirectFunctionTable> p_o, TNode<HeapObject> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmIndirectFunctionTable, HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmIndirectFunctionTable, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmIndirectFunctionTable, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<WasmIndirectFunctionTable> tmp0;
    TNode<HeapObject> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1149);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(WasmIndirectFunctionTable::kManagedNativeAllocationsOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<WasmIndirectFunctionTable> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmIndirectFunctionTable> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<FixedArray> LoadWasmIndirectFunctionTableRefs_1075(compiler::CodeAssemblerState* state_, TNode<WasmIndirectFunctionTable> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmIndirectFunctionTable> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmIndirectFunctionTable, FixedArray> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmIndirectFunctionTable, FixedArray> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<WasmIndirectFunctionTable> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1150);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(WasmIndirectFunctionTable::kRefsOffset);
    USE(tmp1);
    TNode<FixedArray>tmp2 = CodeStubAssembler(state_).LoadReference<FixedArray>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<WasmIndirectFunctionTable> tmp3;
    TNode<FixedArray> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmIndirectFunctionTable> tmp5;
    TNode<FixedArray> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<FixedArray>{tmp6};
}

void StoreWasmIndirectFunctionTableRefs_1076(compiler::CodeAssemblerState* state_, TNode<WasmIndirectFunctionTable> p_o, TNode<FixedArray> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmIndirectFunctionTable, FixedArray> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmIndirectFunctionTable, FixedArray> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmIndirectFunctionTable, FixedArray> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<WasmIndirectFunctionTable> tmp0;
    TNode<FixedArray> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1150);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(WasmIndirectFunctionTable::kRefsOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<WasmIndirectFunctionTable> tmp3;
    TNode<FixedArray> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmIndirectFunctionTable> tmp5;
    TNode<FixedArray> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<JSObject> LoadWasmDebugInfoInstance_1077(compiler::CodeAssemblerState* state_, TNode<WasmDebugInfo> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmDebugInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmDebugInfo, JSObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmDebugInfo, JSObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<WasmDebugInfo> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1154);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(WasmDebugInfo::kInstanceOffset);
    USE(tmp1);
    TNode<JSObject>tmp2 = CodeStubAssembler(state_).LoadReference<JSObject>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<WasmDebugInfo> tmp3;
    TNode<JSObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmDebugInfo> tmp5;
    TNode<JSObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<JSObject>{tmp6};
}

void StoreWasmDebugInfoInstance_1078(compiler::CodeAssemblerState* state_, TNode<WasmDebugInfo> p_o, TNode<JSObject> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmDebugInfo, JSObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmDebugInfo, JSObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmDebugInfo, JSObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<WasmDebugInfo> tmp0;
    TNode<JSObject> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1154);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(WasmDebugInfo::kInstanceOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<WasmDebugInfo> tmp3;
    TNode<JSObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmDebugInfo> tmp5;
    TNode<JSObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<HeapObject> LoadWasmDebugInfoInterpreterHandle_1079(compiler::CodeAssemblerState* state_, TNode<WasmDebugInfo> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmDebugInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmDebugInfo, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmDebugInfo, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<WasmDebugInfo> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1155);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(WasmDebugInfo::kInterpreterHandleOffset);
    USE(tmp1);
    TNode<HeapObject>tmp2 = CodeStubAssembler(state_).LoadReference<HeapObject>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<WasmDebugInfo> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmDebugInfo> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<HeapObject>{tmp6};
}

void StoreWasmDebugInfoInterpreterHandle_1080(compiler::CodeAssemblerState* state_, TNode<WasmDebugInfo> p_o, TNode<HeapObject> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmDebugInfo, HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmDebugInfo, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmDebugInfo, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<WasmDebugInfo> tmp0;
    TNode<HeapObject> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1155);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(WasmDebugInfo::kInterpreterHandleOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<WasmDebugInfo> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmDebugInfo> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<HeapObject> LoadWasmDebugInfoLocalsNames_1081(compiler::CodeAssemblerState* state_, TNode<WasmDebugInfo> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmDebugInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmDebugInfo, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmDebugInfo, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<WasmDebugInfo> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1156);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(WasmDebugInfo::kLocalsNamesOffset);
    USE(tmp1);
    TNode<HeapObject>tmp2 = CodeStubAssembler(state_).LoadReference<HeapObject>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<WasmDebugInfo> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmDebugInfo> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<HeapObject>{tmp6};
}

void StoreWasmDebugInfoLocalsNames_1082(compiler::CodeAssemblerState* state_, TNode<WasmDebugInfo> p_o, TNode<HeapObject> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmDebugInfo, HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmDebugInfo, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmDebugInfo, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<WasmDebugInfo> tmp0;
    TNode<HeapObject> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1156);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(WasmDebugInfo::kLocalsNamesOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<WasmDebugInfo> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmDebugInfo> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<HeapObject> LoadWasmDebugInfoCWasmEntries_1083(compiler::CodeAssemblerState* state_, TNode<WasmDebugInfo> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmDebugInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmDebugInfo, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmDebugInfo, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<WasmDebugInfo> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1157);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(WasmDebugInfo::kCWasmEntriesOffset);
    USE(tmp1);
    TNode<HeapObject>tmp2 = CodeStubAssembler(state_).LoadReference<HeapObject>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<WasmDebugInfo> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmDebugInfo> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<HeapObject>{tmp6};
}

void StoreWasmDebugInfoCWasmEntries_1084(compiler::CodeAssemblerState* state_, TNode<WasmDebugInfo> p_o, TNode<HeapObject> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmDebugInfo, HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmDebugInfo, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmDebugInfo, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<WasmDebugInfo> tmp0;
    TNode<HeapObject> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1157);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(WasmDebugInfo::kCWasmEntriesOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<WasmDebugInfo> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmDebugInfo> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<HeapObject> LoadWasmDebugInfoCWasmEntryMap_1085(compiler::CodeAssemblerState* state_, TNode<WasmDebugInfo> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmDebugInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmDebugInfo, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmDebugInfo, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<WasmDebugInfo> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1158);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(WasmDebugInfo::kCWasmEntryMapOffset);
    USE(tmp1);
    TNode<HeapObject>tmp2 = CodeStubAssembler(state_).LoadReference<HeapObject>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<WasmDebugInfo> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmDebugInfo> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<HeapObject>{tmp6};
}

void StoreWasmDebugInfoCWasmEntryMap_1086(compiler::CodeAssemblerState* state_, TNode<WasmDebugInfo> p_o, TNode<HeapObject> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmDebugInfo, HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmDebugInfo, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmDebugInfo, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<WasmDebugInfo> tmp0;
    TNode<HeapObject> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1158);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(WasmDebugInfo::kCWasmEntryMapOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<WasmDebugInfo> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmDebugInfo> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Smi> LoadWasmExceptionTagIndex_1087(compiler::CodeAssemblerState* state_, TNode<WasmExceptionTag> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmExceptionTag> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmExceptionTag, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmExceptionTag, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<WasmExceptionTag> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1163);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(WasmExceptionTag::kIndexOffset);
    USE(tmp1);
    TNode<Smi>tmp2 = CodeStubAssembler(state_).LoadReference<Smi>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<WasmExceptionTag> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmExceptionTag> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Smi>{tmp6};
}

void StoreWasmExceptionTagIndex_1088(compiler::CodeAssemblerState* state_, TNode<WasmExceptionTag> p_o, TNode<Smi> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmExceptionTag, Smi> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmExceptionTag, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmExceptionTag, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<WasmExceptionTag> tmp0;
    TNode<Smi> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1163);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(WasmExceptionTag::kIndexOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<WasmExceptionTag> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmExceptionTag> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<HeapObject> LoadAsyncGeneratorRequestNext_1089(compiler::CodeAssemblerState* state_, TNode<AsyncGeneratorRequest> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<AsyncGeneratorRequest> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AsyncGeneratorRequest, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AsyncGeneratorRequest, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<AsyncGeneratorRequest> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1379);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(AsyncGeneratorRequest::kNextOffset);
    USE(tmp1);
    TNode<HeapObject>tmp2 = CodeStubAssembler(state_).LoadReference<HeapObject>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<AsyncGeneratorRequest> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<AsyncGeneratorRequest> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<HeapObject>{tmp6};
}

void StoreAsyncGeneratorRequestNext_1090(compiler::CodeAssemblerState* state_, TNode<AsyncGeneratorRequest> p_o, TNode<HeapObject> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<AsyncGeneratorRequest, HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AsyncGeneratorRequest, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AsyncGeneratorRequest, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<AsyncGeneratorRequest> tmp0;
    TNode<HeapObject> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1379);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(AsyncGeneratorRequest::kNextOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<AsyncGeneratorRequest> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<AsyncGeneratorRequest> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Smi> LoadAsyncGeneratorRequestResumeMode_1091(compiler::CodeAssemblerState* state_, TNode<AsyncGeneratorRequest> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<AsyncGeneratorRequest> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AsyncGeneratorRequest, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AsyncGeneratorRequest, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<AsyncGeneratorRequest> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1380);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(AsyncGeneratorRequest::kResumeModeOffset);
    USE(tmp1);
    TNode<Smi>tmp2 = CodeStubAssembler(state_).LoadReference<Smi>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<AsyncGeneratorRequest> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<AsyncGeneratorRequest> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Smi>{tmp6};
}

void StoreAsyncGeneratorRequestResumeMode_1092(compiler::CodeAssemblerState* state_, TNode<AsyncGeneratorRequest> p_o, TNode<Smi> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<AsyncGeneratorRequest, Smi> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AsyncGeneratorRequest, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AsyncGeneratorRequest, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<AsyncGeneratorRequest> tmp0;
    TNode<Smi> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1380);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(AsyncGeneratorRequest::kResumeModeOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<AsyncGeneratorRequest> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<AsyncGeneratorRequest> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadAsyncGeneratorRequestValue_1093(compiler::CodeAssemblerState* state_, TNode<AsyncGeneratorRequest> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<AsyncGeneratorRequest> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AsyncGeneratorRequest, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AsyncGeneratorRequest, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<AsyncGeneratorRequest> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1381);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(AsyncGeneratorRequest::kValueOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<AsyncGeneratorRequest> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<AsyncGeneratorRequest> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreAsyncGeneratorRequestValue_1094(compiler::CodeAssemblerState* state_, TNode<AsyncGeneratorRequest> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<AsyncGeneratorRequest, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AsyncGeneratorRequest, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AsyncGeneratorRequest, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<AsyncGeneratorRequest> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1381);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(AsyncGeneratorRequest::kValueOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<AsyncGeneratorRequest> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<AsyncGeneratorRequest> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<JSPromise> LoadAsyncGeneratorRequestPromise_1095(compiler::CodeAssemblerState* state_, TNode<AsyncGeneratorRequest> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<AsyncGeneratorRequest> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AsyncGeneratorRequest, JSPromise> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AsyncGeneratorRequest, JSPromise> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<AsyncGeneratorRequest> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1382);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(AsyncGeneratorRequest::kPromiseOffset);
    USE(tmp1);
    TNode<JSPromise>tmp2 = CodeStubAssembler(state_).LoadReference<JSPromise>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<AsyncGeneratorRequest> tmp3;
    TNode<JSPromise> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<AsyncGeneratorRequest> tmp5;
    TNode<JSPromise> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<JSPromise>{tmp6};
}

void StoreAsyncGeneratorRequestPromise_1096(compiler::CodeAssemblerState* state_, TNode<AsyncGeneratorRequest> p_o, TNode<JSPromise> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<AsyncGeneratorRequest, JSPromise> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AsyncGeneratorRequest, JSPromise> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AsyncGeneratorRequest, JSPromise> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<AsyncGeneratorRequest> tmp0;
    TNode<JSPromise> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1382);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(AsyncGeneratorRequest::kPromiseOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<AsyncGeneratorRequest> tmp3;
    TNode<JSPromise> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<AsyncGeneratorRequest> tmp5;
    TNode<JSPromise> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<HeapObject> LoadSourceTextModuleInfoEntryExportName_1097(compiler::CodeAssemblerState* state_, TNode<SourceTextModuleInfoEntry> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModuleInfoEntry> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModuleInfoEntry, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModuleInfoEntry, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<SourceTextModuleInfoEntry> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1387);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(SourceTextModuleInfoEntry::kExportNameOffset);
    USE(tmp1);
    TNode<HeapObject>tmp2 = CodeStubAssembler(state_).LoadReference<HeapObject>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<SourceTextModuleInfoEntry> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<SourceTextModuleInfoEntry> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<HeapObject>{tmp6};
}

void StoreSourceTextModuleInfoEntryExportName_1098(compiler::CodeAssemblerState* state_, TNode<SourceTextModuleInfoEntry> p_o, TNode<HeapObject> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModuleInfoEntry, HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModuleInfoEntry, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModuleInfoEntry, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<SourceTextModuleInfoEntry> tmp0;
    TNode<HeapObject> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1387);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(SourceTextModuleInfoEntry::kExportNameOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<SourceTextModuleInfoEntry> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<SourceTextModuleInfoEntry> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<HeapObject> LoadSourceTextModuleInfoEntryLocalName_1099(compiler::CodeAssemblerState* state_, TNode<SourceTextModuleInfoEntry> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModuleInfoEntry> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModuleInfoEntry, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModuleInfoEntry, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<SourceTextModuleInfoEntry> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1388);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(SourceTextModuleInfoEntry::kLocalNameOffset);
    USE(tmp1);
    TNode<HeapObject>tmp2 = CodeStubAssembler(state_).LoadReference<HeapObject>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<SourceTextModuleInfoEntry> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<SourceTextModuleInfoEntry> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<HeapObject>{tmp6};
}

void StoreSourceTextModuleInfoEntryLocalName_1100(compiler::CodeAssemblerState* state_, TNode<SourceTextModuleInfoEntry> p_o, TNode<HeapObject> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModuleInfoEntry, HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModuleInfoEntry, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModuleInfoEntry, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<SourceTextModuleInfoEntry> tmp0;
    TNode<HeapObject> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1388);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(SourceTextModuleInfoEntry::kLocalNameOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<SourceTextModuleInfoEntry> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<SourceTextModuleInfoEntry> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<HeapObject> LoadSourceTextModuleInfoEntryImportName_1101(compiler::CodeAssemblerState* state_, TNode<SourceTextModuleInfoEntry> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModuleInfoEntry> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModuleInfoEntry, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModuleInfoEntry, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<SourceTextModuleInfoEntry> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1389);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(SourceTextModuleInfoEntry::kImportNameOffset);
    USE(tmp1);
    TNode<HeapObject>tmp2 = CodeStubAssembler(state_).LoadReference<HeapObject>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<SourceTextModuleInfoEntry> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<SourceTextModuleInfoEntry> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<HeapObject>{tmp6};
}

void StoreSourceTextModuleInfoEntryImportName_1102(compiler::CodeAssemblerState* state_, TNode<SourceTextModuleInfoEntry> p_o, TNode<HeapObject> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModuleInfoEntry, HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModuleInfoEntry, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModuleInfoEntry, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<SourceTextModuleInfoEntry> tmp0;
    TNode<HeapObject> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1389);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(SourceTextModuleInfoEntry::kImportNameOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<SourceTextModuleInfoEntry> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<SourceTextModuleInfoEntry> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Smi> LoadSourceTextModuleInfoEntryModuleRequest_1103(compiler::CodeAssemblerState* state_, TNode<SourceTextModuleInfoEntry> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModuleInfoEntry> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModuleInfoEntry, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModuleInfoEntry, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<SourceTextModuleInfoEntry> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1390);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(SourceTextModuleInfoEntry::kModuleRequestOffset);
    USE(tmp1);
    TNode<Smi>tmp2 = CodeStubAssembler(state_).LoadReference<Smi>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<SourceTextModuleInfoEntry> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<SourceTextModuleInfoEntry> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Smi>{tmp6};
}

void StoreSourceTextModuleInfoEntryModuleRequest_1104(compiler::CodeAssemblerState* state_, TNode<SourceTextModuleInfoEntry> p_o, TNode<Smi> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModuleInfoEntry, Smi> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModuleInfoEntry, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModuleInfoEntry, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<SourceTextModuleInfoEntry> tmp0;
    TNode<Smi> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1390);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(SourceTextModuleInfoEntry::kModuleRequestOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<SourceTextModuleInfoEntry> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<SourceTextModuleInfoEntry> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Smi> LoadSourceTextModuleInfoEntryCellIndex_1105(compiler::CodeAssemblerState* state_, TNode<SourceTextModuleInfoEntry> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModuleInfoEntry> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModuleInfoEntry, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModuleInfoEntry, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<SourceTextModuleInfoEntry> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1391);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(SourceTextModuleInfoEntry::kCellIndexOffset);
    USE(tmp1);
    TNode<Smi>tmp2 = CodeStubAssembler(state_).LoadReference<Smi>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<SourceTextModuleInfoEntry> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<SourceTextModuleInfoEntry> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Smi>{tmp6};
}

void StoreSourceTextModuleInfoEntryCellIndex_1106(compiler::CodeAssemblerState* state_, TNode<SourceTextModuleInfoEntry> p_o, TNode<Smi> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModuleInfoEntry, Smi> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModuleInfoEntry, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModuleInfoEntry, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<SourceTextModuleInfoEntry> tmp0;
    TNode<Smi> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1391);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(SourceTextModuleInfoEntry::kCellIndexOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<SourceTextModuleInfoEntry> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<SourceTextModuleInfoEntry> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Smi> LoadSourceTextModuleInfoEntryBegPos_1107(compiler::CodeAssemblerState* state_, TNode<SourceTextModuleInfoEntry> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModuleInfoEntry> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModuleInfoEntry, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModuleInfoEntry, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<SourceTextModuleInfoEntry> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1392);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(SourceTextModuleInfoEntry::kBegPosOffset);
    USE(tmp1);
    TNode<Smi>tmp2 = CodeStubAssembler(state_).LoadReference<Smi>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<SourceTextModuleInfoEntry> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<SourceTextModuleInfoEntry> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Smi>{tmp6};
}

void StoreSourceTextModuleInfoEntryBegPos_1108(compiler::CodeAssemblerState* state_, TNode<SourceTextModuleInfoEntry> p_o, TNode<Smi> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModuleInfoEntry, Smi> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModuleInfoEntry, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModuleInfoEntry, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<SourceTextModuleInfoEntry> tmp0;
    TNode<Smi> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1392);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(SourceTextModuleInfoEntry::kBegPosOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<SourceTextModuleInfoEntry> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<SourceTextModuleInfoEntry> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Smi> LoadSourceTextModuleInfoEntryEndPos_1109(compiler::CodeAssemblerState* state_, TNode<SourceTextModuleInfoEntry> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModuleInfoEntry> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModuleInfoEntry, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModuleInfoEntry, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<SourceTextModuleInfoEntry> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1393);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(SourceTextModuleInfoEntry::kEndPosOffset);
    USE(tmp1);
    TNode<Smi>tmp2 = CodeStubAssembler(state_).LoadReference<Smi>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<SourceTextModuleInfoEntry> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<SourceTextModuleInfoEntry> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Smi>{tmp6};
}

void StoreSourceTextModuleInfoEntryEndPos_1110(compiler::CodeAssemblerState* state_, TNode<SourceTextModuleInfoEntry> p_o, TNode<Smi> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModuleInfoEntry, Smi> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModuleInfoEntry, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<SourceTextModuleInfoEntry, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<SourceTextModuleInfoEntry> tmp0;
    TNode<Smi> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1393);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(SourceTextModuleInfoEntry::kEndPosOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<SourceTextModuleInfoEntry> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<SourceTextModuleInfoEntry> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<HeapObject> LoadPromiseCapabilityPromise_1111(compiler::CodeAssemblerState* state_, TNode<PromiseCapability> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<PromiseCapability> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PromiseCapability, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PromiseCapability, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<PromiseCapability> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1398);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(PromiseCapability::kPromiseOffset);
    USE(tmp1);
    TNode<HeapObject>tmp2 = CodeStubAssembler(state_).LoadReference<HeapObject>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<PromiseCapability> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<PromiseCapability> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<HeapObject>{tmp6};
}

void StorePromiseCapabilityPromise_1112(compiler::CodeAssemblerState* state_, TNode<PromiseCapability> p_o, TNode<HeapObject> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<PromiseCapability, HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PromiseCapability, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PromiseCapability, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<PromiseCapability> tmp0;
    TNode<HeapObject> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1398);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(PromiseCapability::kPromiseOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<PromiseCapability> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<PromiseCapability> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadPromiseCapabilityResolve_1113(compiler::CodeAssemblerState* state_, TNode<PromiseCapability> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<PromiseCapability> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PromiseCapability, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PromiseCapability, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<PromiseCapability> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1399);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(PromiseCapability::kResolveOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<PromiseCapability> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<PromiseCapability> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StorePromiseCapabilityResolve_1114(compiler::CodeAssemblerState* state_, TNode<PromiseCapability> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<PromiseCapability, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PromiseCapability, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PromiseCapability, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<PromiseCapability> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1399);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(PromiseCapability::kResolveOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<PromiseCapability> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<PromiseCapability> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadPromiseCapabilityReject_1115(compiler::CodeAssemblerState* state_, TNode<PromiseCapability> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<PromiseCapability> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PromiseCapability, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PromiseCapability, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<PromiseCapability> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1400);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(PromiseCapability::kRejectOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<PromiseCapability> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<PromiseCapability> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StorePromiseCapabilityReject_1116(compiler::CodeAssemblerState* state_, TNode<PromiseCapability> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<PromiseCapability, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PromiseCapability, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PromiseCapability, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<PromiseCapability> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1400);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(PromiseCapability::kRejectOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<PromiseCapability> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<PromiseCapability> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadPromiseReactionNext_1117(compiler::CodeAssemblerState* state_, TNode<PromiseReaction> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<PromiseReaction> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PromiseReaction, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PromiseReaction, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<PromiseReaction> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1405);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(PromiseReaction::kNextOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<PromiseReaction> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<PromiseReaction> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StorePromiseReactionNext_1118(compiler::CodeAssemblerState* state_, TNode<PromiseReaction> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<PromiseReaction, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PromiseReaction, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PromiseReaction, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<PromiseReaction> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1405);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(PromiseReaction::kNextOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<PromiseReaction> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<PromiseReaction> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<HeapObject> LoadPromiseReactionRejectHandler_1119(compiler::CodeAssemblerState* state_, TNode<PromiseReaction> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<PromiseReaction> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PromiseReaction, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PromiseReaction, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<PromiseReaction> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1406);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(PromiseReaction::kRejectHandlerOffset);
    USE(tmp1);
    TNode<HeapObject>tmp2 = CodeStubAssembler(state_).LoadReference<HeapObject>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<PromiseReaction> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<PromiseReaction> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<HeapObject>{tmp6};
}

void StorePromiseReactionRejectHandler_1120(compiler::CodeAssemblerState* state_, TNode<PromiseReaction> p_o, TNode<HeapObject> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<PromiseReaction, HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PromiseReaction, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PromiseReaction, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<PromiseReaction> tmp0;
    TNode<HeapObject> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1406);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(PromiseReaction::kRejectHandlerOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<PromiseReaction> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<PromiseReaction> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<HeapObject> LoadPromiseReactionFulfillHandler_1121(compiler::CodeAssemblerState* state_, TNode<PromiseReaction> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<PromiseReaction> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PromiseReaction, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PromiseReaction, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<PromiseReaction> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1407);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(PromiseReaction::kFulfillHandlerOffset);
    USE(tmp1);
    TNode<HeapObject>tmp2 = CodeStubAssembler(state_).LoadReference<HeapObject>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<PromiseReaction> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<PromiseReaction> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<HeapObject>{tmp6};
}

void StorePromiseReactionFulfillHandler_1122(compiler::CodeAssemblerState* state_, TNode<PromiseReaction> p_o, TNode<HeapObject> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<PromiseReaction, HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PromiseReaction, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PromiseReaction, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<PromiseReaction> tmp0;
    TNode<HeapObject> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1407);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(PromiseReaction::kFulfillHandlerOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<PromiseReaction> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<PromiseReaction> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<HeapObject> LoadPromiseReactionPromiseOrCapability_1123(compiler::CodeAssemblerState* state_, TNode<PromiseReaction> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<PromiseReaction> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PromiseReaction, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PromiseReaction, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<PromiseReaction> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1410);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(PromiseReaction::kPromiseOrCapabilityOffset);
    USE(tmp1);
    TNode<HeapObject>tmp2 = CodeStubAssembler(state_).LoadReference<HeapObject>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<PromiseReaction> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<PromiseReaction> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<HeapObject>{tmp6};
}

void StorePromiseReactionPromiseOrCapability_1124(compiler::CodeAssemblerState* state_, TNode<PromiseReaction> p_o, TNode<HeapObject> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<PromiseReaction, HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PromiseReaction, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PromiseReaction, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<PromiseReaction> tmp0;
    TNode<HeapObject> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1410);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(PromiseReaction::kPromiseOrCapabilityOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<PromiseReaction> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<PromiseReaction> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadPromiseReactionJobTaskArgument_1125(compiler::CodeAssemblerState* state_, TNode<PromiseReactionJobTask> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<PromiseReactionJobTask> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PromiseReactionJobTask, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PromiseReactionJobTask, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<PromiseReactionJobTask> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1416);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(PromiseReactionJobTask::kArgumentOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<PromiseReactionJobTask> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<PromiseReactionJobTask> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StorePromiseReactionJobTaskArgument_1126(compiler::CodeAssemblerState* state_, TNode<PromiseReactionJobTask> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<PromiseReactionJobTask, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PromiseReactionJobTask, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PromiseReactionJobTask, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<PromiseReactionJobTask> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1416);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(PromiseReactionJobTask::kArgumentOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<PromiseReactionJobTask> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<PromiseReactionJobTask> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Context> LoadPromiseReactionJobTaskContext_1127(compiler::CodeAssemblerState* state_, TNode<PromiseReactionJobTask> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<PromiseReactionJobTask> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PromiseReactionJobTask, Context> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PromiseReactionJobTask, Context> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<PromiseReactionJobTask> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1417);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(PromiseReactionJobTask::kContextOffset);
    USE(tmp1);
    TNode<Context>tmp2 = CodeStubAssembler(state_).LoadReference<Context>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<PromiseReactionJobTask> tmp3;
    TNode<Context> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<PromiseReactionJobTask> tmp5;
    TNode<Context> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Context>{tmp6};
}

void StorePromiseReactionJobTaskContext_1128(compiler::CodeAssemblerState* state_, TNode<PromiseReactionJobTask> p_o, TNode<Context> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<PromiseReactionJobTask, Context> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PromiseReactionJobTask, Context> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PromiseReactionJobTask, Context> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<PromiseReactionJobTask> tmp0;
    TNode<Context> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1417);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(PromiseReactionJobTask::kContextOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<PromiseReactionJobTask> tmp3;
    TNode<Context> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<PromiseReactionJobTask> tmp5;
    TNode<Context> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<HeapObject> LoadPromiseReactionJobTaskHandler_1129(compiler::CodeAssemblerState* state_, TNode<PromiseReactionJobTask> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<PromiseReactionJobTask> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PromiseReactionJobTask, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PromiseReactionJobTask, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<PromiseReactionJobTask> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1418);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(PromiseReactionJobTask::kHandlerOffset);
    USE(tmp1);
    TNode<HeapObject>tmp2 = CodeStubAssembler(state_).LoadReference<HeapObject>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<PromiseReactionJobTask> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<PromiseReactionJobTask> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<HeapObject>{tmp6};
}

void StorePromiseReactionJobTaskHandler_1130(compiler::CodeAssemblerState* state_, TNode<PromiseReactionJobTask> p_o, TNode<HeapObject> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<PromiseReactionJobTask, HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PromiseReactionJobTask, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PromiseReactionJobTask, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<PromiseReactionJobTask> tmp0;
    TNode<HeapObject> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1418);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(PromiseReactionJobTask::kHandlerOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<PromiseReactionJobTask> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<PromiseReactionJobTask> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<HeapObject> LoadPromiseReactionJobTaskPromiseOrCapability_1131(compiler::CodeAssemblerState* state_, TNode<PromiseReactionJobTask> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<PromiseReactionJobTask> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PromiseReactionJobTask, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PromiseReactionJobTask, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<PromiseReactionJobTask> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1421);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(PromiseReactionJobTask::kPromiseOrCapabilityOffset);
    USE(tmp1);
    TNode<HeapObject>tmp2 = CodeStubAssembler(state_).LoadReference<HeapObject>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<PromiseReactionJobTask> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<PromiseReactionJobTask> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<HeapObject>{tmp6};
}

void StorePromiseReactionJobTaskPromiseOrCapability_1132(compiler::CodeAssemblerState* state_, TNode<PromiseReactionJobTask> p_o, TNode<HeapObject> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<PromiseReactionJobTask, HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PromiseReactionJobTask, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PromiseReactionJobTask, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<PromiseReactionJobTask> tmp0;
    TNode<HeapObject> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1421);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(PromiseReactionJobTask::kPromiseOrCapabilityOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<PromiseReactionJobTask> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<PromiseReactionJobTask> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Context> LoadPromiseResolveThenableJobTaskContext_1133(compiler::CodeAssemblerState* state_, TNode<PromiseResolveThenableJobTask> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<PromiseResolveThenableJobTask> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PromiseResolveThenableJobTask, Context> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PromiseResolveThenableJobTask, Context> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<PromiseResolveThenableJobTask> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1434);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(PromiseResolveThenableJobTask::kContextOffset);
    USE(tmp1);
    TNode<Context>tmp2 = CodeStubAssembler(state_).LoadReference<Context>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<PromiseResolveThenableJobTask> tmp3;
    TNode<Context> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<PromiseResolveThenableJobTask> tmp5;
    TNode<Context> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Context>{tmp6};
}

void StorePromiseResolveThenableJobTaskContext_1134(compiler::CodeAssemblerState* state_, TNode<PromiseResolveThenableJobTask> p_o, TNode<Context> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<PromiseResolveThenableJobTask, Context> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PromiseResolveThenableJobTask, Context> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PromiseResolveThenableJobTask, Context> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<PromiseResolveThenableJobTask> tmp0;
    TNode<Context> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1434);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(PromiseResolveThenableJobTask::kContextOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<PromiseResolveThenableJobTask> tmp3;
    TNode<Context> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<PromiseResolveThenableJobTask> tmp5;
    TNode<Context> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<JSPromise> LoadPromiseResolveThenableJobTaskPromiseToResolve_1135(compiler::CodeAssemblerState* state_, TNode<PromiseResolveThenableJobTask> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<PromiseResolveThenableJobTask> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PromiseResolveThenableJobTask, JSPromise> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PromiseResolveThenableJobTask, JSPromise> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<PromiseResolveThenableJobTask> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1435);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(PromiseResolveThenableJobTask::kPromiseToResolveOffset);
    USE(tmp1);
    TNode<JSPromise>tmp2 = CodeStubAssembler(state_).LoadReference<JSPromise>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<PromiseResolveThenableJobTask> tmp3;
    TNode<JSPromise> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<PromiseResolveThenableJobTask> tmp5;
    TNode<JSPromise> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<JSPromise>{tmp6};
}

void StorePromiseResolveThenableJobTaskPromiseToResolve_1136(compiler::CodeAssemblerState* state_, TNode<PromiseResolveThenableJobTask> p_o, TNode<JSPromise> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<PromiseResolveThenableJobTask, JSPromise> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PromiseResolveThenableJobTask, JSPromise> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PromiseResolveThenableJobTask, JSPromise> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<PromiseResolveThenableJobTask> tmp0;
    TNode<JSPromise> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1435);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(PromiseResolveThenableJobTask::kPromiseToResolveOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<PromiseResolveThenableJobTask> tmp3;
    TNode<JSPromise> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<PromiseResolveThenableJobTask> tmp5;
    TNode<JSPromise> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<JSReceiver> LoadPromiseResolveThenableJobTaskThen_1137(compiler::CodeAssemblerState* state_, TNode<PromiseResolveThenableJobTask> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<PromiseResolveThenableJobTask> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PromiseResolveThenableJobTask, JSReceiver> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PromiseResolveThenableJobTask, JSReceiver> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<PromiseResolveThenableJobTask> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1436);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(PromiseResolveThenableJobTask::kThenOffset);
    USE(tmp1);
    TNode<JSReceiver>tmp2 = CodeStubAssembler(state_).LoadReference<JSReceiver>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<PromiseResolveThenableJobTask> tmp3;
    TNode<JSReceiver> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<PromiseResolveThenableJobTask> tmp5;
    TNode<JSReceiver> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<JSReceiver>{tmp6};
}

void StorePromiseResolveThenableJobTaskThen_1138(compiler::CodeAssemblerState* state_, TNode<PromiseResolveThenableJobTask> p_o, TNode<JSReceiver> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<PromiseResolveThenableJobTask, JSReceiver> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PromiseResolveThenableJobTask, JSReceiver> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PromiseResolveThenableJobTask, JSReceiver> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<PromiseResolveThenableJobTask> tmp0;
    TNode<JSReceiver> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1436);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(PromiseResolveThenableJobTask::kThenOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<PromiseResolveThenableJobTask> tmp3;
    TNode<JSReceiver> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<PromiseResolveThenableJobTask> tmp5;
    TNode<JSReceiver> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<JSReceiver> LoadPromiseResolveThenableJobTaskThenable_1139(compiler::CodeAssemblerState* state_, TNode<PromiseResolveThenableJobTask> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<PromiseResolveThenableJobTask> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PromiseResolveThenableJobTask, JSReceiver> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PromiseResolveThenableJobTask, JSReceiver> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<PromiseResolveThenableJobTask> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1437);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(PromiseResolveThenableJobTask::kThenableOffset);
    USE(tmp1);
    TNode<JSReceiver>tmp2 = CodeStubAssembler(state_).LoadReference<JSReceiver>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<PromiseResolveThenableJobTask> tmp3;
    TNode<JSReceiver> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<PromiseResolveThenableJobTask> tmp5;
    TNode<JSReceiver> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<JSReceiver>{tmp6};
}

void StorePromiseResolveThenableJobTaskThenable_1140(compiler::CodeAssemblerState* state_, TNode<PromiseResolveThenableJobTask> p_o, TNode<JSReceiver> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<PromiseResolveThenableJobTask, JSReceiver> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PromiseResolveThenableJobTask, JSReceiver> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<PromiseResolveThenableJobTask, JSReceiver> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<PromiseResolveThenableJobTask> tmp0;
    TNode<JSReceiver> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1437);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(PromiseResolveThenableJobTask::kThenableOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<PromiseResolveThenableJobTask> tmp3;
    TNode<JSReceiver> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<PromiseResolveThenableJobTask> tmp5;
    TNode<JSReceiver> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<HeapObject> LoadJSRegExpData_1141(compiler::CodeAssemblerState* state_, TNode<JSRegExp> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSRegExp> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSRegExp, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSRegExp, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSRegExp> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1442);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSRegExp::kDataOffset);
    USE(tmp1);
    TNode<HeapObject>tmp2 = CodeStubAssembler(state_).LoadReference<HeapObject>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSRegExp> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSRegExp> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<HeapObject>{tmp6};
}

void StoreJSRegExpData_1142(compiler::CodeAssemblerState* state_, TNode<JSRegExp> p_o, TNode<HeapObject> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSRegExp, HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSRegExp, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSRegExp, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSRegExp> tmp0;
    TNode<HeapObject> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1442);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSRegExp::kDataOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSRegExp> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSRegExp> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<HeapObject> LoadJSRegExpSource_1143(compiler::CodeAssemblerState* state_, TNode<JSRegExp> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSRegExp> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSRegExp, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSRegExp, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSRegExp> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1443);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSRegExp::kSourceOffset);
    USE(tmp1);
    TNode<HeapObject>tmp2 = CodeStubAssembler(state_).LoadReference<HeapObject>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSRegExp> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSRegExp> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<HeapObject>{tmp6};
}

void StoreJSRegExpSource_1144(compiler::CodeAssemblerState* state_, TNode<JSRegExp> p_o, TNode<HeapObject> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSRegExp, HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSRegExp, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSRegExp, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSRegExp> tmp0;
    TNode<HeapObject> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1443);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSRegExp::kSourceOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSRegExp> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSRegExp> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadJSRegExpFlags_1145(compiler::CodeAssemblerState* state_, TNode<JSRegExp> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSRegExp> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSRegExp, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSRegExp, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSRegExp> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1444);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSRegExp::kFlagsOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSRegExp> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSRegExp> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreJSRegExpFlags_1146(compiler::CodeAssemblerState* state_, TNode<JSRegExp> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSRegExp, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSRegExp, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSRegExp, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSRegExp> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1444);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSRegExp::kFlagsOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSRegExp> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSRegExp> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadJSRegExpResultIndex_1147(compiler::CodeAssemblerState* state_, TNode<JSRegExpResult> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSRegExpResult> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSRegExpResult, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSRegExpResult, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSRegExpResult> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1469);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSRegExpResult::kIndexOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSRegExpResult> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSRegExpResult> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreJSRegExpResultIndex_1148(compiler::CodeAssemblerState* state_, TNode<JSRegExpResult> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSRegExpResult, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSRegExpResult, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSRegExpResult, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSRegExpResult> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1469);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSRegExpResult::kIndexOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSRegExpResult> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSRegExpResult> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadJSRegExpResultInput_1149(compiler::CodeAssemblerState* state_, TNode<JSRegExpResult> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSRegExpResult> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSRegExpResult, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSRegExpResult, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSRegExpResult> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1470);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSRegExpResult::kInputOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSRegExpResult> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSRegExpResult> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreJSRegExpResultInput_1150(compiler::CodeAssemblerState* state_, TNode<JSRegExpResult> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSRegExpResult, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSRegExpResult, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSRegExpResult, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSRegExpResult> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1470);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSRegExpResult::kInputOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSRegExpResult> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSRegExpResult> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadJSRegExpResultGroups_1151(compiler::CodeAssemblerState* state_, TNode<JSRegExpResult> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSRegExpResult> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSRegExpResult, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSRegExpResult, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSRegExpResult> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1471);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSRegExpResult::kGroupsOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSRegExpResult> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSRegExpResult> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreJSRegExpResultGroups_1152(compiler::CodeAssemblerState* state_, TNode<JSRegExpResult> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSRegExpResult, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSRegExpResult, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSRegExpResult, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSRegExpResult> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1471);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSRegExpResult::kGroupsOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSRegExpResult> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSRegExpResult> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<HeapObject> LoadJSRegExpResultCachedIndicesOrMatchInfo_1153(compiler::CodeAssemblerState* state_, TNode<JSRegExpResult> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSRegExpResult> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSRegExpResult, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSRegExpResult, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSRegExpResult> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1474);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSRegExpResult::kCachedIndicesOrMatchInfoOffset);
    USE(tmp1);
    TNode<HeapObject>tmp2 = CodeStubAssembler(state_).LoadReference<HeapObject>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSRegExpResult> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSRegExpResult> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<HeapObject>{tmp6};
}

void StoreJSRegExpResultCachedIndicesOrMatchInfo_1154(compiler::CodeAssemblerState* state_, TNode<JSRegExpResult> p_o, TNode<HeapObject> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSRegExpResult, HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSRegExpResult, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSRegExpResult, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSRegExpResult> tmp0;
    TNode<HeapObject> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1474);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSRegExpResult::kCachedIndicesOrMatchInfoOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSRegExpResult> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSRegExpResult> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<HeapObject> LoadJSRegExpResultNames_1155(compiler::CodeAssemblerState* state_, TNode<JSRegExpResult> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSRegExpResult> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSRegExpResult, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSRegExpResult, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSRegExpResult> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1475);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSRegExpResult::kNamesOffset);
    USE(tmp1);
    TNode<HeapObject>tmp2 = CodeStubAssembler(state_).LoadReference<HeapObject>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSRegExpResult> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSRegExpResult> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<HeapObject>{tmp6};
}

void StoreJSRegExpResultNames_1156(compiler::CodeAssemblerState* state_, TNode<JSRegExpResult> p_o, TNode<HeapObject> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSRegExpResult, HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSRegExpResult, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSRegExpResult, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSRegExpResult> tmp0;
    TNode<HeapObject> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1475);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSRegExpResult::kNamesOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSRegExpResult> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSRegExpResult> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadJSRegExpResultIndicesGroups_1157(compiler::CodeAssemblerState* state_, TNode<JSRegExpResultIndices> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSRegExpResultIndices> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSRegExpResultIndices, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSRegExpResultIndices, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSRegExpResultIndices> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1482);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSRegExpResultIndices::kGroupsOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSRegExpResultIndices> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSRegExpResultIndices> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreJSRegExpResultIndicesGroups_1158(compiler::CodeAssemblerState* state_, TNode<JSRegExpResultIndices> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSRegExpResultIndices, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSRegExpResultIndices, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSRegExpResultIndices, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSRegExpResultIndices> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1482);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSRegExpResultIndices::kGroupsOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSRegExpResultIndices> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSRegExpResultIndices> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadJSRegExpStringIteratorIteratingRegExp_1159(compiler::CodeAssemblerState* state_, TNode<JSRegExpStringIterator> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSRegExpStringIterator> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSRegExpStringIterator, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSRegExpStringIterator, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSRegExpStringIterator> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1490);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSRegExpStringIterator::kIteratingRegExpOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSRegExpStringIterator> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSRegExpStringIterator> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreJSRegExpStringIteratorIteratingRegExp_1160(compiler::CodeAssemblerState* state_, TNode<JSRegExpStringIterator> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSRegExpStringIterator, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSRegExpStringIterator, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSRegExpStringIterator, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSRegExpStringIterator> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1490);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSRegExpStringIterator::kIteratingRegExpOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSRegExpStringIterator> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSRegExpStringIterator> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<String> LoadJSRegExpStringIteratorIteratedString_1161(compiler::CodeAssemblerState* state_, TNode<JSRegExpStringIterator> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSRegExpStringIterator> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSRegExpStringIterator, String> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSRegExpStringIterator, String> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSRegExpStringIterator> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1492);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSRegExpStringIterator::kIteratedStringOffset);
    USE(tmp1);
    TNode<String>tmp2 = CodeStubAssembler(state_).LoadReference<String>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSRegExpStringIterator> tmp3;
    TNode<String> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSRegExpStringIterator> tmp5;
    TNode<String> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<String>{tmp6};
}

void StoreJSRegExpStringIteratorIteratedString_1162(compiler::CodeAssemblerState* state_, TNode<JSRegExpStringIterator> p_o, TNode<String> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSRegExpStringIterator, String> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSRegExpStringIterator, String> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSRegExpStringIterator, String> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSRegExpStringIterator> tmp0;
    TNode<String> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1492);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSRegExpStringIterator::kIteratedStringOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSRegExpStringIterator> tmp3;
    TNode<String> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSRegExpStringIterator> tmp5;
    TNode<String> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Smi> LoadJSRegExpStringIteratorFlags_1163(compiler::CodeAssemblerState* state_, TNode<JSRegExpStringIterator> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSRegExpStringIterator> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSRegExpStringIterator, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSRegExpStringIterator, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSRegExpStringIterator> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1493);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSRegExpStringIterator::kFlagsOffset);
    USE(tmp1);
    TNode<Smi>tmp2 = CodeStubAssembler(state_).LoadReference<Smi>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSRegExpStringIterator> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSRegExpStringIterator> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Smi>{tmp6};
}

void StoreJSRegExpStringIteratorFlags_1164(compiler::CodeAssemblerState* state_, TNode<JSRegExpStringIterator> p_o, TNode<Smi> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSRegExpStringIterator, Smi> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSRegExpStringIterator, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSRegExpStringIterator, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSRegExpStringIterator> tmp0;
    TNode<Smi> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1493);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSRegExpStringIterator::kFlagsOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSRegExpStringIterator> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSRegExpStringIterator> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Smi> _method_RegExpMatchInfo_GetStartOfCapture(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<RegExpMatchInfo> p_this, int31_t p_captureIndex) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<RegExpMatchInfo, Context> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<RegExpMatchInfo, Context, RegExpMatchInfo, IntPtrT, IntPtrT, IntPtrT, HeapObject, IntPtrT, IntPtrT, IntPtrT, IntPtrT> block6(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<RegExpMatchInfo, Context, RegExpMatchInfo, IntPtrT, IntPtrT, IntPtrT, HeapObject, IntPtrT, IntPtrT, IntPtrT, IntPtrT> block7(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<RegExpMatchInfo, Context, RegExpMatchInfo, IntPtrT, IntPtrT, IntPtrT, HeapObject, IntPtrT, IntPtrT, IntPtrT, IntPtrT, HeapObject, IntPtrT> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<RegExpMatchInfo, Context, RegExpMatchInfo, IntPtrT, IntPtrT, IntPtrT> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<RegExpMatchInfo, Context, RegExpMatchInfo, IntPtrT, IntPtrT, IntPtrT, HeapObject, IntPtrT> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<RegExpMatchInfo, Context, RegExpMatchInfo, IntPtrT, IntPtrT, HeapObject, IntPtrT> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<RegExpMatchInfo, Context, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<RegExpMatchInfo, Context, Smi> block9(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_this, p_context);

  if (block0.is_used()) {
    TNode<RegExpMatchInfo> tmp0;
    TNode<Context> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1510);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(FixedArray::kObjectsOffset);
    USE(tmp2);
    TNode<IntPtrT> tmp3 = ca_.IntPtrConstant(FixedArrayBase::kLengthOffset);
    USE(tmp3);
    TNode<Smi>tmp4 = CodeStubAssembler(state_).LoadReference<Smi>(CodeStubAssembler::Reference{tmp0, tmp3});
    TNode<IntPtrT> tmp5;
    USE(tmp5);
    tmp5 = Convert8ATintptr5ATSmi_188(state_, TNode<Smi>{tmp4});
    ca_.SetSourcePosition("../../src/builtins/torque-internal.tq", 50);
    TNode<IntPtrT> tmp6;
    USE(tmp6);
    tmp6 = Convert8ATintptr17ATconstexpr_int31_1444(state_, (GetStartOfCaptureIndex_70(state_, p_captureIndex)));
    ca_.SetSourcePosition("../../src/builtins/torque-internal.tq", 51);
    ca_.SetSourcePosition("../../src/builtins/torque-internal.tq", 37);
    TNode<UintPtrT> tmp7;
    USE(tmp7);
    tmp7 = Convert9ATuintptr8ATintptr_205(state_, TNode<IntPtrT>{tmp6});
    TNode<UintPtrT> tmp8;
    USE(tmp8);
    tmp8 = Convert9ATuintptr8ATintptr_205(state_, TNode<IntPtrT>{tmp5});
    TNode<BoolT> tmp9;
    USE(tmp9);
    tmp9 = CodeStubAssembler(state_).UintPtrLessThan(TNode<UintPtrT>{tmp7}, TNode<UintPtrT>{tmp8});
    ca_.Branch(tmp9, &block6, &block7, tmp0, tmp1, tmp0, tmp2, tmp5, tmp6, tmp0, tmp2, tmp5, tmp6, tmp6);
  }

  if (block6.is_used()) {
    TNode<RegExpMatchInfo> tmp10;
    TNode<Context> tmp11;
    TNode<RegExpMatchInfo> tmp12;
    TNode<IntPtrT> tmp13;
    TNode<IntPtrT> tmp14;
    TNode<IntPtrT> tmp15;
    TNode<HeapObject> tmp16;
    TNode<IntPtrT> tmp17;
    TNode<IntPtrT> tmp18;
    TNode<IntPtrT> tmp19;
    TNode<IntPtrT> tmp20;
    ca_.Bind(&block6, &tmp10, &tmp11, &tmp12, &tmp13, &tmp14, &tmp15, &tmp16, &tmp17, &tmp18, &tmp19, &tmp20);
    ca_.SetSourcePosition("../../src/builtins/torque-internal.tq", 39);
    TNode<IntPtrT> tmp21;
    USE(tmp21);
    tmp21 = FromConstexpr8ATintptr17ATconstexpr_int31_150(state_, (SizeOf20UT5ATSmi10HeapObject_346(state_)));
    TNode<IntPtrT> tmp22;
    USE(tmp22);
    tmp22 = CodeStubAssembler(state_).IntPtrMul(TNode<IntPtrT>{tmp20}, TNode<IntPtrT>{tmp21});
    TNode<IntPtrT> tmp23;
    USE(tmp23);
    tmp23 = CodeStubAssembler(state_).IntPtrAdd(TNode<IntPtrT>{tmp17}, TNode<IntPtrT>{tmp22});
    ca_.SetSourcePosition("../../src/builtins/torque-internal.tq", 38);
    TNode<HeapObject> tmp24;
    USE(tmp24);
    TNode<IntPtrT> tmp25;
    USE(tmp25);
    std::tie(tmp24, tmp25) = UnsafeNewReference20UT5ATSmi10HeapObject_1440(state_, TNode<HeapObject>{tmp16}, TNode<IntPtrT>{tmp23}).Flatten();
    ca_.Goto(&block5, tmp10, tmp11, tmp12, tmp13, tmp14, tmp15, tmp16, tmp17, tmp18, tmp19, tmp20, tmp24, tmp25);
  }

  if (block7.is_used()) {
    TNode<RegExpMatchInfo> tmp26;
    TNode<Context> tmp27;
    TNode<RegExpMatchInfo> tmp28;
    TNode<IntPtrT> tmp29;
    TNode<IntPtrT> tmp30;
    TNode<IntPtrT> tmp31;
    TNode<HeapObject> tmp32;
    TNode<IntPtrT> tmp33;
    TNode<IntPtrT> tmp34;
    TNode<IntPtrT> tmp35;
    TNode<IntPtrT> tmp36;
    ca_.Bind(&block7, &tmp26, &tmp27, &tmp28, &tmp29, &tmp30, &tmp31, &tmp32, &tmp33, &tmp34, &tmp35, &tmp36);
    ca_.SetSourcePosition("../../src/builtins/torque-internal.tq", 41);
    ca_.Goto(&block4, tmp26, tmp27, tmp28, tmp29, tmp30, tmp31);
  }

  if (block5.is_used()) {
    TNode<RegExpMatchInfo> tmp37;
    TNode<Context> tmp38;
    TNode<RegExpMatchInfo> tmp39;
    TNode<IntPtrT> tmp40;
    TNode<IntPtrT> tmp41;
    TNode<IntPtrT> tmp42;
    TNode<HeapObject> tmp43;
    TNode<IntPtrT> tmp44;
    TNode<IntPtrT> tmp45;
    TNode<IntPtrT> tmp46;
    TNode<IntPtrT> tmp47;
    TNode<HeapObject> tmp48;
    TNode<IntPtrT> tmp49;
    ca_.Bind(&block5, &tmp37, &tmp38, &tmp39, &tmp40, &tmp41, &tmp42, &tmp43, &tmp44, &tmp45, &tmp46, &tmp47, &tmp48, &tmp49);
    ca_.SetSourcePosition("../../src/builtins/torque-internal.tq", 51);
    ca_.Goto(&block3, tmp37, tmp38, tmp39, tmp40, tmp41, tmp42, tmp48, tmp49);
  }

  if (block4.is_used()) {
    TNode<RegExpMatchInfo> tmp50;
    TNode<Context> tmp51;
    TNode<RegExpMatchInfo> tmp52;
    TNode<IntPtrT> tmp53;
    TNode<IntPtrT> tmp54;
    TNode<IntPtrT> tmp55;
    ca_.Bind(&block4, &tmp50, &tmp51, &tmp52, &tmp53, &tmp54, &tmp55);
    CodeStubAssembler(state_).Unreachable();
  }

  if (block3.is_used()) {
    TNode<RegExpMatchInfo> tmp56;
    TNode<Context> tmp57;
    TNode<RegExpMatchInfo> tmp58;
    TNode<IntPtrT> tmp59;
    TNode<IntPtrT> tmp60;
    TNode<IntPtrT> tmp61;
    TNode<HeapObject> tmp62;
    TNode<IntPtrT> tmp63;
    ca_.Bind(&block3, &tmp56, &tmp57, &tmp58, &tmp59, &tmp60, &tmp61, &tmp62, &tmp63);
    ca_.Goto(&block2, tmp56, tmp57, tmp58, tmp59, tmp60, tmp62, tmp63);
  }

  if (block2.is_used()) {
    TNode<RegExpMatchInfo> tmp64;
    TNode<Context> tmp65;
    TNode<RegExpMatchInfo> tmp66;
    TNode<IntPtrT> tmp67;
    TNode<IntPtrT> tmp68;
    TNode<HeapObject> tmp69;
    TNode<IntPtrT> tmp70;
    ca_.Bind(&block2, &tmp64, &tmp65, &tmp66, &tmp67, &tmp68, &tmp69, &tmp70);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1510);
    TNode<Object>tmp71 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp69, tmp70});
    TNode<Smi> tmp72;
    USE(tmp72);
    tmp72 = UnsafeCast5ATSmi_1439(state_, TNode<Context>{tmp65}, TNode<Object>{tmp71});
    ca_.Goto(&block1, tmp64, tmp65, tmp72);
  }

  if (block1.is_used()) {
    TNode<RegExpMatchInfo> tmp73;
    TNode<Context> tmp74;
    TNode<Smi> tmp75;
    ca_.Bind(&block1, &tmp73, &tmp74, &tmp75);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1507);
    ca_.Goto(&block9, tmp73, tmp74, tmp75);
  }

    TNode<RegExpMatchInfo> tmp76;
    TNode<Context> tmp77;
    TNode<Smi> tmp78;
    ca_.Bind(&block9, &tmp76, &tmp77, &tmp78);
  return TNode<Smi>{tmp78};
}

TNode<Smi> _method_RegExpMatchInfo_GetEndOfCapture(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<RegExpMatchInfo> p_this, int31_t p_captureIndex) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<RegExpMatchInfo, Context> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<RegExpMatchInfo, Context, RegExpMatchInfo, IntPtrT, IntPtrT, IntPtrT, HeapObject, IntPtrT, IntPtrT, IntPtrT, IntPtrT> block6(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<RegExpMatchInfo, Context, RegExpMatchInfo, IntPtrT, IntPtrT, IntPtrT, HeapObject, IntPtrT, IntPtrT, IntPtrT, IntPtrT> block7(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<RegExpMatchInfo, Context, RegExpMatchInfo, IntPtrT, IntPtrT, IntPtrT, HeapObject, IntPtrT, IntPtrT, IntPtrT, IntPtrT, HeapObject, IntPtrT> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<RegExpMatchInfo, Context, RegExpMatchInfo, IntPtrT, IntPtrT, IntPtrT> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<RegExpMatchInfo, Context, RegExpMatchInfo, IntPtrT, IntPtrT, IntPtrT, HeapObject, IntPtrT> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<RegExpMatchInfo, Context, RegExpMatchInfo, IntPtrT, IntPtrT, HeapObject, IntPtrT> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<RegExpMatchInfo, Context, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<RegExpMatchInfo, Context, Smi> block9(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_this, p_context);

  if (block0.is_used()) {
    TNode<RegExpMatchInfo> tmp0;
    TNode<Context> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1515);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(FixedArray::kObjectsOffset);
    USE(tmp2);
    TNode<IntPtrT> tmp3 = ca_.IntPtrConstant(FixedArrayBase::kLengthOffset);
    USE(tmp3);
    TNode<Smi>tmp4 = CodeStubAssembler(state_).LoadReference<Smi>(CodeStubAssembler::Reference{tmp0, tmp3});
    TNode<IntPtrT> tmp5;
    USE(tmp5);
    tmp5 = Convert8ATintptr5ATSmi_188(state_, TNode<Smi>{tmp4});
    ca_.SetSourcePosition("../../src/builtins/torque-internal.tq", 50);
    TNode<IntPtrT> tmp6;
    USE(tmp6);
    tmp6 = Convert8ATintptr17ATconstexpr_int31_1444(state_, (CodeStubAssembler(state_).ConstexprInt31Add((GetStartOfCaptureIndex_70(state_, p_captureIndex)), 1)));
    ca_.SetSourcePosition("../../src/builtins/torque-internal.tq", 51);
    ca_.SetSourcePosition("../../src/builtins/torque-internal.tq", 37);
    TNode<UintPtrT> tmp7;
    USE(tmp7);
    tmp7 = Convert9ATuintptr8ATintptr_205(state_, TNode<IntPtrT>{tmp6});
    TNode<UintPtrT> tmp8;
    USE(tmp8);
    tmp8 = Convert9ATuintptr8ATintptr_205(state_, TNode<IntPtrT>{tmp5});
    TNode<BoolT> tmp9;
    USE(tmp9);
    tmp9 = CodeStubAssembler(state_).UintPtrLessThan(TNode<UintPtrT>{tmp7}, TNode<UintPtrT>{tmp8});
    ca_.Branch(tmp9, &block6, &block7, tmp0, tmp1, tmp0, tmp2, tmp5, tmp6, tmp0, tmp2, tmp5, tmp6, tmp6);
  }

  if (block6.is_used()) {
    TNode<RegExpMatchInfo> tmp10;
    TNode<Context> tmp11;
    TNode<RegExpMatchInfo> tmp12;
    TNode<IntPtrT> tmp13;
    TNode<IntPtrT> tmp14;
    TNode<IntPtrT> tmp15;
    TNode<HeapObject> tmp16;
    TNode<IntPtrT> tmp17;
    TNode<IntPtrT> tmp18;
    TNode<IntPtrT> tmp19;
    TNode<IntPtrT> tmp20;
    ca_.Bind(&block6, &tmp10, &tmp11, &tmp12, &tmp13, &tmp14, &tmp15, &tmp16, &tmp17, &tmp18, &tmp19, &tmp20);
    ca_.SetSourcePosition("../../src/builtins/torque-internal.tq", 39);
    TNode<IntPtrT> tmp21;
    USE(tmp21);
    tmp21 = FromConstexpr8ATintptr17ATconstexpr_int31_150(state_, (SizeOf20UT5ATSmi10HeapObject_346(state_)));
    TNode<IntPtrT> tmp22;
    USE(tmp22);
    tmp22 = CodeStubAssembler(state_).IntPtrMul(TNode<IntPtrT>{tmp20}, TNode<IntPtrT>{tmp21});
    TNode<IntPtrT> tmp23;
    USE(tmp23);
    tmp23 = CodeStubAssembler(state_).IntPtrAdd(TNode<IntPtrT>{tmp17}, TNode<IntPtrT>{tmp22});
    ca_.SetSourcePosition("../../src/builtins/torque-internal.tq", 38);
    TNode<HeapObject> tmp24;
    USE(tmp24);
    TNode<IntPtrT> tmp25;
    USE(tmp25);
    std::tie(tmp24, tmp25) = UnsafeNewReference20UT5ATSmi10HeapObject_1440(state_, TNode<HeapObject>{tmp16}, TNode<IntPtrT>{tmp23}).Flatten();
    ca_.Goto(&block5, tmp10, tmp11, tmp12, tmp13, tmp14, tmp15, tmp16, tmp17, tmp18, tmp19, tmp20, tmp24, tmp25);
  }

  if (block7.is_used()) {
    TNode<RegExpMatchInfo> tmp26;
    TNode<Context> tmp27;
    TNode<RegExpMatchInfo> tmp28;
    TNode<IntPtrT> tmp29;
    TNode<IntPtrT> tmp30;
    TNode<IntPtrT> tmp31;
    TNode<HeapObject> tmp32;
    TNode<IntPtrT> tmp33;
    TNode<IntPtrT> tmp34;
    TNode<IntPtrT> tmp35;
    TNode<IntPtrT> tmp36;
    ca_.Bind(&block7, &tmp26, &tmp27, &tmp28, &tmp29, &tmp30, &tmp31, &tmp32, &tmp33, &tmp34, &tmp35, &tmp36);
    ca_.SetSourcePosition("../../src/builtins/torque-internal.tq", 41);
    ca_.Goto(&block4, tmp26, tmp27, tmp28, tmp29, tmp30, tmp31);
  }

  if (block5.is_used()) {
    TNode<RegExpMatchInfo> tmp37;
    TNode<Context> tmp38;
    TNode<RegExpMatchInfo> tmp39;
    TNode<IntPtrT> tmp40;
    TNode<IntPtrT> tmp41;
    TNode<IntPtrT> tmp42;
    TNode<HeapObject> tmp43;
    TNode<IntPtrT> tmp44;
    TNode<IntPtrT> tmp45;
    TNode<IntPtrT> tmp46;
    TNode<IntPtrT> tmp47;
    TNode<HeapObject> tmp48;
    TNode<IntPtrT> tmp49;
    ca_.Bind(&block5, &tmp37, &tmp38, &tmp39, &tmp40, &tmp41, &tmp42, &tmp43, &tmp44, &tmp45, &tmp46, &tmp47, &tmp48, &tmp49);
    ca_.SetSourcePosition("../../src/builtins/torque-internal.tq", 51);
    ca_.Goto(&block3, tmp37, tmp38, tmp39, tmp40, tmp41, tmp42, tmp48, tmp49);
  }

  if (block4.is_used()) {
    TNode<RegExpMatchInfo> tmp50;
    TNode<Context> tmp51;
    TNode<RegExpMatchInfo> tmp52;
    TNode<IntPtrT> tmp53;
    TNode<IntPtrT> tmp54;
    TNode<IntPtrT> tmp55;
    ca_.Bind(&block4, &tmp50, &tmp51, &tmp52, &tmp53, &tmp54, &tmp55);
    CodeStubAssembler(state_).Unreachable();
  }

  if (block3.is_used()) {
    TNode<RegExpMatchInfo> tmp56;
    TNode<Context> tmp57;
    TNode<RegExpMatchInfo> tmp58;
    TNode<IntPtrT> tmp59;
    TNode<IntPtrT> tmp60;
    TNode<IntPtrT> tmp61;
    TNode<HeapObject> tmp62;
    TNode<IntPtrT> tmp63;
    ca_.Bind(&block3, &tmp56, &tmp57, &tmp58, &tmp59, &tmp60, &tmp61, &tmp62, &tmp63);
    ca_.Goto(&block2, tmp56, tmp57, tmp58, tmp59, tmp60, tmp62, tmp63);
  }

  if (block2.is_used()) {
    TNode<RegExpMatchInfo> tmp64;
    TNode<Context> tmp65;
    TNode<RegExpMatchInfo> tmp66;
    TNode<IntPtrT> tmp67;
    TNode<IntPtrT> tmp68;
    TNode<HeapObject> tmp69;
    TNode<IntPtrT> tmp70;
    ca_.Bind(&block2, &tmp64, &tmp65, &tmp66, &tmp67, &tmp68, &tmp69, &tmp70);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1515);
    TNode<Object>tmp71 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp69, tmp70});
    TNode<Smi> tmp72;
    USE(tmp72);
    tmp72 = UnsafeCast5ATSmi_1439(state_, TNode<Context>{tmp65}, TNode<Object>{tmp71});
    ca_.Goto(&block1, tmp64, tmp65, tmp72);
  }

  if (block1.is_used()) {
    TNode<RegExpMatchInfo> tmp73;
    TNode<Context> tmp74;
    TNode<Smi> tmp75;
    ca_.Bind(&block1, &tmp73, &tmp74, &tmp75);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1512);
    ca_.Goto(&block9, tmp73, tmp74, tmp75);
  }

    TNode<RegExpMatchInfo> tmp76;
    TNode<Context> tmp77;
    TNode<Smi> tmp78;
    ca_.Bind(&block9, &tmp76, &tmp77, &tmp78);
  return TNode<Smi>{tmp78};
}

TNode<Smi> _method_RegExpMatchInfo_NumberOfCaptures(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<RegExpMatchInfo> p_this) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<RegExpMatchInfo, Context> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<RegExpMatchInfo, Context, RegExpMatchInfo, IntPtrT, IntPtrT, IntPtrT, HeapObject, IntPtrT, IntPtrT, IntPtrT, IntPtrT> block6(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<RegExpMatchInfo, Context, RegExpMatchInfo, IntPtrT, IntPtrT, IntPtrT, HeapObject, IntPtrT, IntPtrT, IntPtrT, IntPtrT> block7(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<RegExpMatchInfo, Context, RegExpMatchInfo, IntPtrT, IntPtrT, IntPtrT, HeapObject, IntPtrT, IntPtrT, IntPtrT, IntPtrT, HeapObject, IntPtrT> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<RegExpMatchInfo, Context, RegExpMatchInfo, IntPtrT, IntPtrT, IntPtrT> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<RegExpMatchInfo, Context, RegExpMatchInfo, IntPtrT, IntPtrT, IntPtrT, HeapObject, IntPtrT> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<RegExpMatchInfo, Context, RegExpMatchInfo, IntPtrT, IntPtrT, HeapObject, IntPtrT> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<RegExpMatchInfo, Context, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<RegExpMatchInfo, Context, Smi> block9(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_this, p_context);

  if (block0.is_used()) {
    TNode<RegExpMatchInfo> tmp0;
    TNode<Context> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1518);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(FixedArray::kObjectsOffset);
    USE(tmp2);
    TNode<IntPtrT> tmp3 = ca_.IntPtrConstant(FixedArrayBase::kLengthOffset);
    USE(tmp3);
    TNode<Smi>tmp4 = CodeStubAssembler(state_).LoadReference<Smi>(CodeStubAssembler::Reference{tmp0, tmp3});
    TNode<IntPtrT> tmp5;
    USE(tmp5);
    tmp5 = Convert8ATintptr5ATSmi_188(state_, TNode<Smi>{tmp4});
    ca_.SetSourcePosition("../../src/builtins/torque-internal.tq", 50);
    TNode<IntPtrT> tmp6;
    USE(tmp6);
    tmp6 = Convert8ATintptr17ATconstexpr_int31_1444(state_, RegExpMatchInfo::kNumberOfCapturesIndex);
    ca_.SetSourcePosition("../../src/builtins/torque-internal.tq", 51);
    ca_.SetSourcePosition("../../src/builtins/torque-internal.tq", 37);
    TNode<UintPtrT> tmp7;
    USE(tmp7);
    tmp7 = Convert9ATuintptr8ATintptr_205(state_, TNode<IntPtrT>{tmp6});
    TNode<UintPtrT> tmp8;
    USE(tmp8);
    tmp8 = Convert9ATuintptr8ATintptr_205(state_, TNode<IntPtrT>{tmp5});
    TNode<BoolT> tmp9;
    USE(tmp9);
    tmp9 = CodeStubAssembler(state_).UintPtrLessThan(TNode<UintPtrT>{tmp7}, TNode<UintPtrT>{tmp8});
    ca_.Branch(tmp9, &block6, &block7, tmp0, tmp1, tmp0, tmp2, tmp5, tmp6, tmp0, tmp2, tmp5, tmp6, tmp6);
  }

  if (block6.is_used()) {
    TNode<RegExpMatchInfo> tmp10;
    TNode<Context> tmp11;
    TNode<RegExpMatchInfo> tmp12;
    TNode<IntPtrT> tmp13;
    TNode<IntPtrT> tmp14;
    TNode<IntPtrT> tmp15;
    TNode<HeapObject> tmp16;
    TNode<IntPtrT> tmp17;
    TNode<IntPtrT> tmp18;
    TNode<IntPtrT> tmp19;
    TNode<IntPtrT> tmp20;
    ca_.Bind(&block6, &tmp10, &tmp11, &tmp12, &tmp13, &tmp14, &tmp15, &tmp16, &tmp17, &tmp18, &tmp19, &tmp20);
    ca_.SetSourcePosition("../../src/builtins/torque-internal.tq", 39);
    TNode<IntPtrT> tmp21;
    USE(tmp21);
    tmp21 = FromConstexpr8ATintptr17ATconstexpr_int31_150(state_, (SizeOf20UT5ATSmi10HeapObject_346(state_)));
    TNode<IntPtrT> tmp22;
    USE(tmp22);
    tmp22 = CodeStubAssembler(state_).IntPtrMul(TNode<IntPtrT>{tmp20}, TNode<IntPtrT>{tmp21});
    TNode<IntPtrT> tmp23;
    USE(tmp23);
    tmp23 = CodeStubAssembler(state_).IntPtrAdd(TNode<IntPtrT>{tmp17}, TNode<IntPtrT>{tmp22});
    ca_.SetSourcePosition("../../src/builtins/torque-internal.tq", 38);
    TNode<HeapObject> tmp24;
    USE(tmp24);
    TNode<IntPtrT> tmp25;
    USE(tmp25);
    std::tie(tmp24, tmp25) = UnsafeNewReference20UT5ATSmi10HeapObject_1440(state_, TNode<HeapObject>{tmp16}, TNode<IntPtrT>{tmp23}).Flatten();
    ca_.Goto(&block5, tmp10, tmp11, tmp12, tmp13, tmp14, tmp15, tmp16, tmp17, tmp18, tmp19, tmp20, tmp24, tmp25);
  }

  if (block7.is_used()) {
    TNode<RegExpMatchInfo> tmp26;
    TNode<Context> tmp27;
    TNode<RegExpMatchInfo> tmp28;
    TNode<IntPtrT> tmp29;
    TNode<IntPtrT> tmp30;
    TNode<IntPtrT> tmp31;
    TNode<HeapObject> tmp32;
    TNode<IntPtrT> tmp33;
    TNode<IntPtrT> tmp34;
    TNode<IntPtrT> tmp35;
    TNode<IntPtrT> tmp36;
    ca_.Bind(&block7, &tmp26, &tmp27, &tmp28, &tmp29, &tmp30, &tmp31, &tmp32, &tmp33, &tmp34, &tmp35, &tmp36);
    ca_.SetSourcePosition("../../src/builtins/torque-internal.tq", 41);
    ca_.Goto(&block4, tmp26, tmp27, tmp28, tmp29, tmp30, tmp31);
  }

  if (block5.is_used()) {
    TNode<RegExpMatchInfo> tmp37;
    TNode<Context> tmp38;
    TNode<RegExpMatchInfo> tmp39;
    TNode<IntPtrT> tmp40;
    TNode<IntPtrT> tmp41;
    TNode<IntPtrT> tmp42;
    TNode<HeapObject> tmp43;
    TNode<IntPtrT> tmp44;
    TNode<IntPtrT> tmp45;
    TNode<IntPtrT> tmp46;
    TNode<IntPtrT> tmp47;
    TNode<HeapObject> tmp48;
    TNode<IntPtrT> tmp49;
    ca_.Bind(&block5, &tmp37, &tmp38, &tmp39, &tmp40, &tmp41, &tmp42, &tmp43, &tmp44, &tmp45, &tmp46, &tmp47, &tmp48, &tmp49);
    ca_.SetSourcePosition("../../src/builtins/torque-internal.tq", 51);
    ca_.Goto(&block3, tmp37, tmp38, tmp39, tmp40, tmp41, tmp42, tmp48, tmp49);
  }

  if (block4.is_used()) {
    TNode<RegExpMatchInfo> tmp50;
    TNode<Context> tmp51;
    TNode<RegExpMatchInfo> tmp52;
    TNode<IntPtrT> tmp53;
    TNode<IntPtrT> tmp54;
    TNode<IntPtrT> tmp55;
    ca_.Bind(&block4, &tmp50, &tmp51, &tmp52, &tmp53, &tmp54, &tmp55);
    CodeStubAssembler(state_).Unreachable();
  }

  if (block3.is_used()) {
    TNode<RegExpMatchInfo> tmp56;
    TNode<Context> tmp57;
    TNode<RegExpMatchInfo> tmp58;
    TNode<IntPtrT> tmp59;
    TNode<IntPtrT> tmp60;
    TNode<IntPtrT> tmp61;
    TNode<HeapObject> tmp62;
    TNode<IntPtrT> tmp63;
    ca_.Bind(&block3, &tmp56, &tmp57, &tmp58, &tmp59, &tmp60, &tmp61, &tmp62, &tmp63);
    ca_.Goto(&block2, tmp56, tmp57, tmp58, tmp59, tmp60, tmp62, tmp63);
  }

  if (block2.is_used()) {
    TNode<RegExpMatchInfo> tmp64;
    TNode<Context> tmp65;
    TNode<RegExpMatchInfo> tmp66;
    TNode<IntPtrT> tmp67;
    TNode<IntPtrT> tmp68;
    TNode<HeapObject> tmp69;
    TNode<IntPtrT> tmp70;
    ca_.Bind(&block2, &tmp64, &tmp65, &tmp66, &tmp67, &tmp68, &tmp69, &tmp70);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1518);
    TNode<Object>tmp71 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp69, tmp70});
    TNode<Smi> tmp72;
    USE(tmp72);
    tmp72 = UnsafeCast5ATSmi_1439(state_, TNode<Context>{tmp65}, TNode<Object>{tmp71});
    ca_.Goto(&block1, tmp64, tmp65, tmp72);
  }

  if (block1.is_used()) {
    TNode<RegExpMatchInfo> tmp73;
    TNode<Context> tmp74;
    TNode<Smi> tmp75;
    ca_.Bind(&block1, &tmp73, &tmp74, &tmp75);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1517);
    ca_.Goto(&block9, tmp73, tmp74, tmp75);
  }

    TNode<RegExpMatchInfo> tmp76;
    TNode<Context> tmp77;
    TNode<Smi> tmp78;
    ca_.Bind(&block9, &tmp76, &tmp77, &tmp78);
  return TNode<Smi>{tmp78};
}

TNode<Object> LoadAccessorInfoName_1165(compiler::CodeAssemblerState* state_, TNode<AccessorInfo> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<AccessorInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AccessorInfo, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AccessorInfo, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<AccessorInfo> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1523);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(AccessorInfo::kNameOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<AccessorInfo> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<AccessorInfo> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreAccessorInfoName_1166(compiler::CodeAssemblerState* state_, TNode<AccessorInfo> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<AccessorInfo, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AccessorInfo, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AccessorInfo, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<AccessorInfo> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1523);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(AccessorInfo::kNameOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<AccessorInfo> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<AccessorInfo> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Smi> LoadAccessorInfoFlags_1167(compiler::CodeAssemblerState* state_, TNode<AccessorInfo> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<AccessorInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AccessorInfo, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AccessorInfo, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<AccessorInfo> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1524);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(AccessorInfo::kFlagsOffset);
    USE(tmp1);
    TNode<Smi>tmp2 = CodeStubAssembler(state_).LoadReference<Smi>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<AccessorInfo> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<AccessorInfo> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Smi>{tmp6};
}

void StoreAccessorInfoFlags_1168(compiler::CodeAssemblerState* state_, TNode<AccessorInfo> p_o, TNode<Smi> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<AccessorInfo, Smi> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AccessorInfo, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AccessorInfo, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<AccessorInfo> tmp0;
    TNode<Smi> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1524);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(AccessorInfo::kFlagsOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<AccessorInfo> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<AccessorInfo> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadAccessorInfoExpectedReceiverType_1169(compiler::CodeAssemblerState* state_, TNode<AccessorInfo> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<AccessorInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AccessorInfo, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AccessorInfo, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<AccessorInfo> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1525);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(AccessorInfo::kExpectedReceiverTypeOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<AccessorInfo> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<AccessorInfo> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreAccessorInfoExpectedReceiverType_1170(compiler::CodeAssemblerState* state_, TNode<AccessorInfo> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<AccessorInfo, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AccessorInfo, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AccessorInfo, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<AccessorInfo> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1525);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(AccessorInfo::kExpectedReceiverTypeOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<AccessorInfo> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<AccessorInfo> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadAccessorInfoSetter_1171(compiler::CodeAssemblerState* state_, TNode<AccessorInfo> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<AccessorInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AccessorInfo, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AccessorInfo, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<AccessorInfo> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1526);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(AccessorInfo::kSetterOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<AccessorInfo> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<AccessorInfo> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreAccessorInfoSetter_1172(compiler::CodeAssemblerState* state_, TNode<AccessorInfo> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<AccessorInfo, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AccessorInfo, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AccessorInfo, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<AccessorInfo> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1526);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(AccessorInfo::kSetterOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<AccessorInfo> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<AccessorInfo> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadAccessorInfoGetter_1173(compiler::CodeAssemblerState* state_, TNode<AccessorInfo> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<AccessorInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AccessorInfo, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AccessorInfo, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<AccessorInfo> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1527);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(AccessorInfo::kGetterOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<AccessorInfo> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<AccessorInfo> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreAccessorInfoGetter_1174(compiler::CodeAssemblerState* state_, TNode<AccessorInfo> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<AccessorInfo, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AccessorInfo, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AccessorInfo, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<AccessorInfo> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1527);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(AccessorInfo::kGetterOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<AccessorInfo> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<AccessorInfo> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadAccessorInfoJsGetter_1175(compiler::CodeAssemblerState* state_, TNode<AccessorInfo> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<AccessorInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AccessorInfo, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AccessorInfo, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<AccessorInfo> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1528);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(AccessorInfo::kJsGetterOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<AccessorInfo> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<AccessorInfo> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreAccessorInfoJsGetter_1176(compiler::CodeAssemblerState* state_, TNode<AccessorInfo> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<AccessorInfo, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AccessorInfo, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AccessorInfo, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<AccessorInfo> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1528);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(AccessorInfo::kJsGetterOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<AccessorInfo> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<AccessorInfo> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadAccessorInfoData_1177(compiler::CodeAssemblerState* state_, TNode<AccessorInfo> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<AccessorInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AccessorInfo, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AccessorInfo, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<AccessorInfo> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1529);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(AccessorInfo::kDataOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<AccessorInfo> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<AccessorInfo> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreAccessorInfoData_1178(compiler::CodeAssemblerState* state_, TNode<AccessorInfo> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<AccessorInfo, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AccessorInfo, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AccessorInfo, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<AccessorInfo> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1529);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(AccessorInfo::kDataOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<AccessorInfo> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<AccessorInfo> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadAccessorPairGetter_1179(compiler::CodeAssemblerState* state_, TNode<AccessorPair> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<AccessorPair> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AccessorPair, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AccessorPair, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<AccessorPair> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1533);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(AccessorPair::kGetterOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<AccessorPair> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<AccessorPair> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreAccessorPairGetter_1180(compiler::CodeAssemblerState* state_, TNode<AccessorPair> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<AccessorPair, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AccessorPair, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AccessorPair, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<AccessorPair> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1533);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(AccessorPair::kGetterOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<AccessorPair> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<AccessorPair> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadAccessorPairSetter_1181(compiler::CodeAssemblerState* state_, TNode<AccessorPair> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<AccessorPair> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AccessorPair, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AccessorPair, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<AccessorPair> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1534);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(AccessorPair::kSetterOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<AccessorPair> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<AccessorPair> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreAccessorPairSetter_1182(compiler::CodeAssemblerState* state_, TNode<AccessorPair> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<AccessorPair, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AccessorPair, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AccessorPair, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<AccessorPair> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1534);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(AccessorPair::kSetterOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<AccessorPair> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<AccessorPair> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<SharedFunctionInfo> LoadDebugInfoSharedFunctionInfo_1183(compiler::CodeAssemblerState* state_, TNode<DebugInfo> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<DebugInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<DebugInfo, SharedFunctionInfo> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<DebugInfo, SharedFunctionInfo> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<DebugInfo> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1542);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(DebugInfo::kSharedFunctionInfoOffset);
    USE(tmp1);
    TNode<SharedFunctionInfo>tmp2 = CodeStubAssembler(state_).LoadReference<SharedFunctionInfo>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<DebugInfo> tmp3;
    TNode<SharedFunctionInfo> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<DebugInfo> tmp5;
    TNode<SharedFunctionInfo> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<SharedFunctionInfo>{tmp6};
}

void StoreDebugInfoSharedFunctionInfo_1184(compiler::CodeAssemblerState* state_, TNode<DebugInfo> p_o, TNode<SharedFunctionInfo> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<DebugInfo, SharedFunctionInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<DebugInfo, SharedFunctionInfo> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<DebugInfo, SharedFunctionInfo> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<DebugInfo> tmp0;
    TNode<SharedFunctionInfo> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1542);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(DebugInfo::kSharedFunctionInfoOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<DebugInfo> tmp3;
    TNode<SharedFunctionInfo> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<DebugInfo> tmp5;
    TNode<SharedFunctionInfo> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Smi> LoadDebugInfoDebuggerHints_1185(compiler::CodeAssemblerState* state_, TNode<DebugInfo> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<DebugInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<DebugInfo, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<DebugInfo, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<DebugInfo> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1543);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(DebugInfo::kDebuggerHintsOffset);
    USE(tmp1);
    TNode<Smi>tmp2 = CodeStubAssembler(state_).LoadReference<Smi>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<DebugInfo> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<DebugInfo> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Smi>{tmp6};
}

void StoreDebugInfoDebuggerHints_1186(compiler::CodeAssemblerState* state_, TNode<DebugInfo> p_o, TNode<Smi> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<DebugInfo, Smi> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<DebugInfo, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<DebugInfo, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<DebugInfo> tmp0;
    TNode<Smi> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1543);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(DebugInfo::kDebuggerHintsOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<DebugInfo> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<DebugInfo> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<HeapObject> LoadDebugInfoScript_1187(compiler::CodeAssemblerState* state_, TNode<DebugInfo> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<DebugInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<DebugInfo, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<DebugInfo, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<DebugInfo> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1544);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(DebugInfo::kScriptOffset);
    USE(tmp1);
    TNode<HeapObject>tmp2 = CodeStubAssembler(state_).LoadReference<HeapObject>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<DebugInfo> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<DebugInfo> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<HeapObject>{tmp6};
}

void StoreDebugInfoScript_1188(compiler::CodeAssemblerState* state_, TNode<DebugInfo> p_o, TNode<HeapObject> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<DebugInfo, HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<DebugInfo, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<DebugInfo, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<DebugInfo> tmp0;
    TNode<HeapObject> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1544);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(DebugInfo::kScriptOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<DebugInfo> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<DebugInfo> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<HeapObject> LoadDebugInfoOriginalBytecodeArray_1189(compiler::CodeAssemblerState* state_, TNode<DebugInfo> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<DebugInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<DebugInfo, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<DebugInfo, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<DebugInfo> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1545);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(DebugInfo::kOriginalBytecodeArrayOffset);
    USE(tmp1);
    TNode<HeapObject>tmp2 = CodeStubAssembler(state_).LoadReference<HeapObject>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<DebugInfo> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<DebugInfo> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<HeapObject>{tmp6};
}

void StoreDebugInfoOriginalBytecodeArray_1190(compiler::CodeAssemblerState* state_, TNode<DebugInfo> p_o, TNode<HeapObject> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<DebugInfo, HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<DebugInfo, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<DebugInfo, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<DebugInfo> tmp0;
    TNode<HeapObject> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1545);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(DebugInfo::kOriginalBytecodeArrayOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<DebugInfo> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<DebugInfo> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<HeapObject> LoadDebugInfoDebugBytecodeArray_1191(compiler::CodeAssemblerState* state_, TNode<DebugInfo> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<DebugInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<DebugInfo, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<DebugInfo, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<DebugInfo> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1546);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(DebugInfo::kDebugBytecodeArrayOffset);
    USE(tmp1);
    TNode<HeapObject>tmp2 = CodeStubAssembler(state_).LoadReference<HeapObject>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<DebugInfo> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<DebugInfo> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<HeapObject>{tmp6};
}

void StoreDebugInfoDebugBytecodeArray_1192(compiler::CodeAssemblerState* state_, TNode<DebugInfo> p_o, TNode<HeapObject> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<DebugInfo, HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<DebugInfo, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<DebugInfo, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<DebugInfo> tmp0;
    TNode<HeapObject> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1546);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(DebugInfo::kDebugBytecodeArrayOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<DebugInfo> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<DebugInfo> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<FixedArray> LoadDebugInfoBreakPoints_1193(compiler::CodeAssemblerState* state_, TNode<DebugInfo> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<DebugInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<DebugInfo, FixedArray> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<DebugInfo, FixedArray> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<DebugInfo> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1547);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(DebugInfo::kBreakPointsOffset);
    USE(tmp1);
    TNode<FixedArray>tmp2 = CodeStubAssembler(state_).LoadReference<FixedArray>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<DebugInfo> tmp3;
    TNode<FixedArray> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<DebugInfo> tmp5;
    TNode<FixedArray> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<FixedArray>{tmp6};
}

void StoreDebugInfoBreakPoints_1194(compiler::CodeAssemblerState* state_, TNode<DebugInfo> p_o, TNode<FixedArray> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<DebugInfo, FixedArray> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<DebugInfo, FixedArray> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<DebugInfo, FixedArray> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<DebugInfo> tmp0;
    TNode<FixedArray> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1547);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(DebugInfo::kBreakPointsOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<DebugInfo> tmp3;
    TNode<FixedArray> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<DebugInfo> tmp5;
    TNode<FixedArray> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Smi> LoadDebugInfoFlags_1195(compiler::CodeAssemblerState* state_, TNode<DebugInfo> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<DebugInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<DebugInfo, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<DebugInfo, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<DebugInfo> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1548);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(DebugInfo::kFlagsOffset);
    USE(tmp1);
    TNode<Smi>tmp2 = CodeStubAssembler(state_).LoadReference<Smi>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<DebugInfo> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<DebugInfo> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Smi>{tmp6};
}

void StoreDebugInfoFlags_1196(compiler::CodeAssemblerState* state_, TNode<DebugInfo> p_o, TNode<Smi> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<DebugInfo, Smi> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<DebugInfo, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<DebugInfo, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<DebugInfo> tmp0;
    TNode<Smi> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1548);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(DebugInfo::kFlagsOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<DebugInfo> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<DebugInfo> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<HeapObject> LoadDebugInfoCoverageInfo_1197(compiler::CodeAssemblerState* state_, TNode<DebugInfo> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<DebugInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<DebugInfo, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<DebugInfo, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<DebugInfo> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1549);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(DebugInfo::kCoverageInfoOffset);
    USE(tmp1);
    TNode<HeapObject>tmp2 = CodeStubAssembler(state_).LoadReference<HeapObject>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<DebugInfo> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<DebugInfo> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<HeapObject>{tmp6};
}

void StoreDebugInfoCoverageInfo_1198(compiler::CodeAssemblerState* state_, TNode<DebugInfo> p_o, TNode<HeapObject> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<DebugInfo, HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<DebugInfo, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<DebugInfo, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<DebugInfo> tmp0;
    TNode<HeapObject> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1549);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(DebugInfo::kCoverageInfoOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<DebugInfo> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<DebugInfo> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<SharedFunctionInfo> LoadFeedbackVectorSharedFunctionInfo_1199(compiler::CodeAssemblerState* state_, TNode<FeedbackVector> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<FeedbackVector> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FeedbackVector, SharedFunctionInfo> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FeedbackVector, SharedFunctionInfo> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<FeedbackVector> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1553);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(FeedbackVector::kSharedFunctionInfoOffset);
    USE(tmp1);
    TNode<SharedFunctionInfo>tmp2 = CodeStubAssembler(state_).LoadReference<SharedFunctionInfo>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<FeedbackVector> tmp3;
    TNode<SharedFunctionInfo> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<FeedbackVector> tmp5;
    TNode<SharedFunctionInfo> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<SharedFunctionInfo>{tmp6};
}

void StoreFeedbackVectorSharedFunctionInfo_1200(compiler::CodeAssemblerState* state_, TNode<FeedbackVector> p_o, TNode<SharedFunctionInfo> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<FeedbackVector, SharedFunctionInfo> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FeedbackVector, SharedFunctionInfo> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FeedbackVector, SharedFunctionInfo> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<FeedbackVector> tmp0;
    TNode<SharedFunctionInfo> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1553);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(FeedbackVector::kSharedFunctionInfoOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<FeedbackVector> tmp3;
    TNode<SharedFunctionInfo> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<FeedbackVector> tmp5;
    TNode<SharedFunctionInfo> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadFeedbackVectorOptimizedCodeWeakOrSmi_1201(compiler::CodeAssemblerState* state_, TNode<FeedbackVector> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<FeedbackVector> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FeedbackVector, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FeedbackVector, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<FeedbackVector> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1555);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(FeedbackVector::kOptimizedCodeWeakOrSmiOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<FeedbackVector> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<FeedbackVector> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreFeedbackVectorOptimizedCodeWeakOrSmi_1202(compiler::CodeAssemblerState* state_, TNode<FeedbackVector> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<FeedbackVector, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FeedbackVector, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FeedbackVector, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<FeedbackVector> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1555);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(FeedbackVector::kOptimizedCodeWeakOrSmiOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<FeedbackVector> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<FeedbackVector> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<FixedArray> LoadFeedbackVectorClosureFeedbackCellArray_1203(compiler::CodeAssemblerState* state_, TNode<FeedbackVector> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<FeedbackVector> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FeedbackVector, FixedArray> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FeedbackVector, FixedArray> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<FeedbackVector> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1556);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(FeedbackVector::kClosureFeedbackCellArrayOffset);
    USE(tmp1);
    TNode<FixedArray>tmp2 = CodeStubAssembler(state_).LoadReference<FixedArray>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<FeedbackVector> tmp3;
    TNode<FixedArray> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<FeedbackVector> tmp5;
    TNode<FixedArray> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<FixedArray>{tmp6};
}

void StoreFeedbackVectorClosureFeedbackCellArray_1204(compiler::CodeAssemblerState* state_, TNode<FeedbackVector> p_o, TNode<FixedArray> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<FeedbackVector, FixedArray> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FeedbackVector, FixedArray> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FeedbackVector, FixedArray> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<FeedbackVector> tmp0;
    TNode<FixedArray> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1556);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(FeedbackVector::kClosureFeedbackCellArrayOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<FeedbackVector> tmp3;
    TNode<FixedArray> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<FeedbackVector> tmp5;
    TNode<FixedArray> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Int32T> LoadFeedbackVectorLength_1205(compiler::CodeAssemblerState* state_, TNode<FeedbackVector> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<FeedbackVector> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FeedbackVector, Int32T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FeedbackVector, Int32T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<FeedbackVector> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1557);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(FeedbackVector::kLengthOffset);
    USE(tmp1);
    TNode<Int32T>tmp2 = CodeStubAssembler(state_).LoadReference<Int32T>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<FeedbackVector> tmp3;
    TNode<Int32T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<FeedbackVector> tmp5;
    TNode<Int32T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Int32T>{tmp6};
}

void StoreFeedbackVectorLength_1206(compiler::CodeAssemblerState* state_, TNode<FeedbackVector> p_o, TNode<Int32T> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<FeedbackVector, Int32T> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FeedbackVector, Int32T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FeedbackVector, Int32T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<FeedbackVector> tmp0;
    TNode<Int32T> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1557);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(FeedbackVector::kLengthOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<FeedbackVector> tmp3;
    TNode<Int32T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<FeedbackVector> tmp5;
    TNode<Int32T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Int32T> LoadFeedbackVectorInvocationCount_1207(compiler::CodeAssemblerState* state_, TNode<FeedbackVector> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<FeedbackVector> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FeedbackVector, Int32T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FeedbackVector, Int32T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<FeedbackVector> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1558);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(FeedbackVector::kInvocationCountOffset);
    USE(tmp1);
    TNode<Int32T>tmp2 = CodeStubAssembler(state_).LoadReference<Int32T>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<FeedbackVector> tmp3;
    TNode<Int32T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<FeedbackVector> tmp5;
    TNode<Int32T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Int32T>{tmp6};
}

void StoreFeedbackVectorInvocationCount_1208(compiler::CodeAssemblerState* state_, TNode<FeedbackVector> p_o, TNode<Int32T> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<FeedbackVector, Int32T> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FeedbackVector, Int32T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FeedbackVector, Int32T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<FeedbackVector> tmp0;
    TNode<Int32T> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1558);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(FeedbackVector::kInvocationCountOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<FeedbackVector> tmp3;
    TNode<Int32T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<FeedbackVector> tmp5;
    TNode<Int32T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Int32T> LoadFeedbackVectorProfilerTicks_1209(compiler::CodeAssemblerState* state_, TNode<FeedbackVector> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<FeedbackVector> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FeedbackVector, Int32T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FeedbackVector, Int32T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<FeedbackVector> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1559);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(FeedbackVector::kProfilerTicksOffset);
    USE(tmp1);
    TNode<Int32T>tmp2 = CodeStubAssembler(state_).LoadReference<Int32T>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<FeedbackVector> tmp3;
    TNode<Int32T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<FeedbackVector> tmp5;
    TNode<Int32T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Int32T>{tmp6};
}

void StoreFeedbackVectorProfilerTicks_1210(compiler::CodeAssemblerState* state_, TNode<FeedbackVector> p_o, TNode<Int32T> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<FeedbackVector, Int32T> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FeedbackVector, Int32T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FeedbackVector, Int32T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<FeedbackVector> tmp0;
    TNode<Int32T> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1559);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(FeedbackVector::kProfilerTicksOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<FeedbackVector> tmp3;
    TNode<Int32T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<FeedbackVector> tmp5;
    TNode<Int32T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Uint32T> LoadFeedbackVectorPadding_1211(compiler::CodeAssemblerState* state_, TNode<FeedbackVector> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<FeedbackVector> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FeedbackVector, Uint32T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FeedbackVector, Uint32T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<FeedbackVector> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1563);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(FeedbackVector::kPaddingOffset);
    USE(tmp1);
    TNode<Uint32T>tmp2 = CodeStubAssembler(state_).LoadReference<Uint32T>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<FeedbackVector> tmp3;
    TNode<Uint32T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<FeedbackVector> tmp5;
    TNode<Uint32T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Uint32T>{tmp6};
}

void StoreFeedbackVectorPadding_1212(compiler::CodeAssemblerState* state_, TNode<FeedbackVector> p_o, TNode<Uint32T> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<FeedbackVector, Uint32T> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FeedbackVector, Uint32T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FeedbackVector, Uint32T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<FeedbackVector> tmp0;
    TNode<Uint32T> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1563);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(FeedbackVector::kPaddingOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<FeedbackVector> tmp3;
    TNode<Uint32T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<FeedbackVector> tmp5;
    TNode<Uint32T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<HeapObject> LoadFeedbackCellValue_1213(compiler::CodeAssemblerState* state_, TNode<FeedbackCell> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<FeedbackCell> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FeedbackCell, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FeedbackCell, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<FeedbackCell> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1567);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(FeedbackCell::kValueOffset);
    USE(tmp1);
    TNode<HeapObject>tmp2 = CodeStubAssembler(state_).LoadReference<HeapObject>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<FeedbackCell> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<FeedbackCell> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<HeapObject>{tmp6};
}

void StoreFeedbackCellValue_1214(compiler::CodeAssemblerState* state_, TNode<FeedbackCell> p_o, TNode<HeapObject> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<FeedbackCell, HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FeedbackCell, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FeedbackCell, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<FeedbackCell> tmp0;
    TNode<HeapObject> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1567);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(FeedbackCell::kValueOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<FeedbackCell> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<FeedbackCell> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Int32T> LoadFeedbackCellInterruptBudget_1215(compiler::CodeAssemblerState* state_, TNode<FeedbackCell> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<FeedbackCell> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FeedbackCell, Int32T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FeedbackCell, Int32T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<FeedbackCell> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1568);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(FeedbackCell::kInterruptBudgetOffset);
    USE(tmp1);
    TNode<Int32T>tmp2 = CodeStubAssembler(state_).LoadReference<Int32T>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<FeedbackCell> tmp3;
    TNode<Int32T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<FeedbackCell> tmp5;
    TNode<Int32T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Int32T>{tmp6};
}

void StoreFeedbackCellInterruptBudget_1216(compiler::CodeAssemblerState* state_, TNode<FeedbackCell> p_o, TNode<Int32T> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<FeedbackCell, Int32T> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FeedbackCell, Int32T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<FeedbackCell, Int32T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<FeedbackCell> tmp0;
    TNode<Int32T> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1568);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(FeedbackCell::kInterruptBudgetOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<FeedbackCell> tmp3;
    TNode<Int32T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<FeedbackCell> tmp5;
    TNode<Int32T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Struct> LoadAllocationMementoAllocationSite_1217(compiler::CodeAssemblerState* state_, TNode<AllocationMemento> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<AllocationMemento> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AllocationMemento, Struct> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AllocationMemento, Struct> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<AllocationMemento> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1573);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(AllocationMemento::kAllocationSiteOffset);
    USE(tmp1);
    TNode<Struct>tmp2 = CodeStubAssembler(state_).LoadReference<Struct>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<AllocationMemento> tmp3;
    TNode<Struct> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<AllocationMemento> tmp5;
    TNode<Struct> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Struct>{tmp6};
}

void StoreAllocationMementoAllocationSite_1218(compiler::CodeAssemblerState* state_, TNode<AllocationMemento> p_o, TNode<Struct> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<AllocationMemento, Struct> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AllocationMemento, Struct> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AllocationMemento, Struct> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<AllocationMemento> tmp0;
    TNode<Struct> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1573);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(AllocationMemento::kAllocationSiteOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<AllocationMemento> tmp3;
    TNode<Struct> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<AllocationMemento> tmp5;
    TNode<Struct> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Foreign> LoadWasmModuleObjectNativeModule_1219(compiler::CodeAssemblerState* state_, TNode<WasmModuleObject> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmModuleObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmModuleObject, Foreign> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmModuleObject, Foreign> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<WasmModuleObject> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1577);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(WasmModuleObject::kNativeModuleOffset);
    USE(tmp1);
    TNode<Foreign>tmp2 = CodeStubAssembler(state_).LoadReference<Foreign>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<WasmModuleObject> tmp3;
    TNode<Foreign> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmModuleObject> tmp5;
    TNode<Foreign> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Foreign>{tmp6};
}

void StoreWasmModuleObjectNativeModule_1220(compiler::CodeAssemblerState* state_, TNode<WasmModuleObject> p_o, TNode<Foreign> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmModuleObject, Foreign> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmModuleObject, Foreign> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmModuleObject, Foreign> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<WasmModuleObject> tmp0;
    TNode<Foreign> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1577);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(WasmModuleObject::kNativeModuleOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<WasmModuleObject> tmp3;
    TNode<Foreign> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmModuleObject> tmp5;
    TNode<Foreign> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<FixedArray> LoadWasmModuleObjectExportWrappers_1221(compiler::CodeAssemblerState* state_, TNode<WasmModuleObject> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmModuleObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmModuleObject, FixedArray> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmModuleObject, FixedArray> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<WasmModuleObject> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1578);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(WasmModuleObject::kExportWrappersOffset);
    USE(tmp1);
    TNode<FixedArray>tmp2 = CodeStubAssembler(state_).LoadReference<FixedArray>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<WasmModuleObject> tmp3;
    TNode<FixedArray> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmModuleObject> tmp5;
    TNode<FixedArray> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<FixedArray>{tmp6};
}

void StoreWasmModuleObjectExportWrappers_1222(compiler::CodeAssemblerState* state_, TNode<WasmModuleObject> p_o, TNode<FixedArray> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmModuleObject, FixedArray> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmModuleObject, FixedArray> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmModuleObject, FixedArray> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<WasmModuleObject> tmp0;
    TNode<FixedArray> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1578);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(WasmModuleObject::kExportWrappersOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<WasmModuleObject> tmp3;
    TNode<FixedArray> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmModuleObject> tmp5;
    TNode<FixedArray> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Script> LoadWasmModuleObjectScript_1223(compiler::CodeAssemblerState* state_, TNode<WasmModuleObject> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmModuleObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmModuleObject, Script> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmModuleObject, Script> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<WasmModuleObject> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1579);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(WasmModuleObject::kScriptOffset);
    USE(tmp1);
    TNode<Script>tmp2 = CodeStubAssembler(state_).LoadReference<Script>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<WasmModuleObject> tmp3;
    TNode<Script> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmModuleObject> tmp5;
    TNode<Script> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Script>{tmp6};
}

void StoreWasmModuleObjectScript_1224(compiler::CodeAssemblerState* state_, TNode<WasmModuleObject> p_o, TNode<Script> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmModuleObject, Script> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmModuleObject, Script> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmModuleObject, Script> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<WasmModuleObject> tmp0;
    TNode<Script> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1579);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(WasmModuleObject::kScriptOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<WasmModuleObject> tmp3;
    TNode<Script> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmModuleObject> tmp5;
    TNode<Script> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<WeakArrayList> LoadWasmModuleObjectWeakInstanceList_1225(compiler::CodeAssemblerState* state_, TNode<WasmModuleObject> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmModuleObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmModuleObject, WeakArrayList> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmModuleObject, WeakArrayList> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<WasmModuleObject> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1580);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(WasmModuleObject::kWeakInstanceListOffset);
    USE(tmp1);
    TNode<WeakArrayList>tmp2 = CodeStubAssembler(state_).LoadReference<WeakArrayList>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<WasmModuleObject> tmp3;
    TNode<WeakArrayList> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmModuleObject> tmp5;
    TNode<WeakArrayList> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<WeakArrayList>{tmp6};
}

void StoreWasmModuleObjectWeakInstanceList_1226(compiler::CodeAssemblerState* state_, TNode<WasmModuleObject> p_o, TNode<WeakArrayList> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmModuleObject, WeakArrayList> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmModuleObject, WeakArrayList> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmModuleObject, WeakArrayList> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<WasmModuleObject> tmp0;
    TNode<WeakArrayList> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1580);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(WasmModuleObject::kWeakInstanceListOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<WasmModuleObject> tmp3;
    TNode<WeakArrayList> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmModuleObject> tmp5;
    TNode<WeakArrayList> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<HeapObject> LoadWasmModuleObjectAsmJsOffsetTable_1227(compiler::CodeAssemblerState* state_, TNode<WasmModuleObject> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmModuleObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmModuleObject, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmModuleObject, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<WasmModuleObject> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1581);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(WasmModuleObject::kAsmJsOffsetTableOffset);
    USE(tmp1);
    TNode<HeapObject>tmp2 = CodeStubAssembler(state_).LoadReference<HeapObject>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<WasmModuleObject> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmModuleObject> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<HeapObject>{tmp6};
}

void StoreWasmModuleObjectAsmJsOffsetTable_1228(compiler::CodeAssemblerState* state_, TNode<WasmModuleObject> p_o, TNode<HeapObject> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmModuleObject, HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmModuleObject, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmModuleObject, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<WasmModuleObject> tmp0;
    TNode<HeapObject> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1581);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(WasmModuleObject::kAsmJsOffsetTableOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<WasmModuleObject> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmModuleObject> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<HeapObject> LoadWasmModuleObjectBreakPointInfos_1229(compiler::CodeAssemblerState* state_, TNode<WasmModuleObject> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmModuleObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmModuleObject, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmModuleObject, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<WasmModuleObject> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1582);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(WasmModuleObject::kBreakPointInfosOffset);
    USE(tmp1);
    TNode<HeapObject>tmp2 = CodeStubAssembler(state_).LoadReference<HeapObject>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<WasmModuleObject> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmModuleObject> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<HeapObject>{tmp6};
}

void StoreWasmModuleObjectBreakPointInfos_1230(compiler::CodeAssemblerState* state_, TNode<WasmModuleObject> p_o, TNode<HeapObject> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmModuleObject, HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmModuleObject, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmModuleObject, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<WasmModuleObject> tmp0;
    TNode<HeapObject> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1582);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(WasmModuleObject::kBreakPointInfosOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<WasmModuleObject> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmModuleObject> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<FixedArray> LoadWasmTableObjectEntries_1231(compiler::CodeAssemblerState* state_, TNode<WasmTableObject> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmTableObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmTableObject, FixedArray> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmTableObject, FixedArray> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<WasmTableObject> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1586);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(WasmTableObject::kEntriesOffset);
    USE(tmp1);
    TNode<FixedArray>tmp2 = CodeStubAssembler(state_).LoadReference<FixedArray>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<WasmTableObject> tmp3;
    TNode<FixedArray> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmTableObject> tmp5;
    TNode<FixedArray> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<FixedArray>{tmp6};
}

void StoreWasmTableObjectEntries_1232(compiler::CodeAssemblerState* state_, TNode<WasmTableObject> p_o, TNode<FixedArray> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmTableObject, FixedArray> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmTableObject, FixedArray> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmTableObject, FixedArray> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<WasmTableObject> tmp0;
    TNode<FixedArray> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1586);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(WasmTableObject::kEntriesOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<WasmTableObject> tmp3;
    TNode<FixedArray> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmTableObject> tmp5;
    TNode<FixedArray> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadWasmTableObjectMaximumLength_1233(compiler::CodeAssemblerState* state_, TNode<WasmTableObject> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmTableObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmTableObject, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmTableObject, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<WasmTableObject> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1587);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(WasmTableObject::kMaximumLengthOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<WasmTableObject> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmTableObject> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreWasmTableObjectMaximumLength_1234(compiler::CodeAssemblerState* state_, TNode<WasmTableObject> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmTableObject, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmTableObject, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmTableObject, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<WasmTableObject> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1587);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(WasmTableObject::kMaximumLengthOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<WasmTableObject> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmTableObject> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<FixedArray> LoadWasmTableObjectDispatchTables_1235(compiler::CodeAssemblerState* state_, TNode<WasmTableObject> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmTableObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmTableObject, FixedArray> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmTableObject, FixedArray> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<WasmTableObject> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1588);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(WasmTableObject::kDispatchTablesOffset);
    USE(tmp1);
    TNode<FixedArray>tmp2 = CodeStubAssembler(state_).LoadReference<FixedArray>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<WasmTableObject> tmp3;
    TNode<FixedArray> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmTableObject> tmp5;
    TNode<FixedArray> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<FixedArray>{tmp6};
}

void StoreWasmTableObjectDispatchTables_1236(compiler::CodeAssemblerState* state_, TNode<WasmTableObject> p_o, TNode<FixedArray> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmTableObject, FixedArray> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmTableObject, FixedArray> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmTableObject, FixedArray> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<WasmTableObject> tmp0;
    TNode<FixedArray> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1588);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(WasmTableObject::kDispatchTablesOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<WasmTableObject> tmp3;
    TNode<FixedArray> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmTableObject> tmp5;
    TNode<FixedArray> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Smi> LoadWasmTableObjectRawType_1237(compiler::CodeAssemblerState* state_, TNode<WasmTableObject> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmTableObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmTableObject, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmTableObject, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<WasmTableObject> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1589);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(WasmTableObject::kRawTypeOffset);
    USE(tmp1);
    TNode<Smi>tmp2 = CodeStubAssembler(state_).LoadReference<Smi>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<WasmTableObject> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmTableObject> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Smi>{tmp6};
}

void StoreWasmTableObjectRawType_1238(compiler::CodeAssemblerState* state_, TNode<WasmTableObject> p_o, TNode<Smi> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmTableObject, Smi> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmTableObject, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmTableObject, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<WasmTableObject> tmp0;
    TNode<Smi> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1589);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(WasmTableObject::kRawTypeOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<WasmTableObject> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmTableObject> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<JSArrayBuffer> LoadWasmMemoryObjectArrayBuffer_1239(compiler::CodeAssemblerState* state_, TNode<WasmMemoryObject> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmMemoryObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmMemoryObject, JSArrayBuffer> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmMemoryObject, JSArrayBuffer> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<WasmMemoryObject> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1593);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(WasmMemoryObject::kArrayBufferOffset);
    USE(tmp1);
    TNode<JSArrayBuffer>tmp2 = CodeStubAssembler(state_).LoadReference<JSArrayBuffer>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<WasmMemoryObject> tmp3;
    TNode<JSArrayBuffer> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmMemoryObject> tmp5;
    TNode<JSArrayBuffer> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<JSArrayBuffer>{tmp6};
}

void StoreWasmMemoryObjectArrayBuffer_1240(compiler::CodeAssemblerState* state_, TNode<WasmMemoryObject> p_o, TNode<JSArrayBuffer> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmMemoryObject, JSArrayBuffer> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmMemoryObject, JSArrayBuffer> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmMemoryObject, JSArrayBuffer> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<WasmMemoryObject> tmp0;
    TNode<JSArrayBuffer> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1593);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(WasmMemoryObject::kArrayBufferOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<WasmMemoryObject> tmp3;
    TNode<JSArrayBuffer> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmMemoryObject> tmp5;
    TNode<JSArrayBuffer> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Smi> LoadWasmMemoryObjectMaximumPages_1241(compiler::CodeAssemblerState* state_, TNode<WasmMemoryObject> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmMemoryObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmMemoryObject, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmMemoryObject, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<WasmMemoryObject> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1594);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(WasmMemoryObject::kMaximumPagesOffset);
    USE(tmp1);
    TNode<Smi>tmp2 = CodeStubAssembler(state_).LoadReference<Smi>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<WasmMemoryObject> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmMemoryObject> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Smi>{tmp6};
}

void StoreWasmMemoryObjectMaximumPages_1242(compiler::CodeAssemblerState* state_, TNode<WasmMemoryObject> p_o, TNode<Smi> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmMemoryObject, Smi> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmMemoryObject, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmMemoryObject, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<WasmMemoryObject> tmp0;
    TNode<Smi> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1594);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(WasmMemoryObject::kMaximumPagesOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<WasmMemoryObject> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmMemoryObject> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<HeapObject> LoadWasmMemoryObjectInstances_1243(compiler::CodeAssemblerState* state_, TNode<WasmMemoryObject> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmMemoryObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmMemoryObject, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmMemoryObject, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<WasmMemoryObject> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1595);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(WasmMemoryObject::kInstancesOffset);
    USE(tmp1);
    TNode<HeapObject>tmp2 = CodeStubAssembler(state_).LoadReference<HeapObject>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<WasmMemoryObject> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmMemoryObject> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<HeapObject>{tmp6};
}

void StoreWasmMemoryObjectInstances_1244(compiler::CodeAssemblerState* state_, TNode<WasmMemoryObject> p_o, TNode<HeapObject> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmMemoryObject, HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmMemoryObject, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmMemoryObject, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<WasmMemoryObject> tmp0;
    TNode<HeapObject> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1595);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(WasmMemoryObject::kInstancesOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<WasmMemoryObject> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmMemoryObject> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<HeapObject> LoadWasmGlobalObjectUntaggedBuffer_1245(compiler::CodeAssemblerState* state_, TNode<WasmGlobalObject> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmGlobalObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmGlobalObject, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmGlobalObject, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<WasmGlobalObject> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1599);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(WasmGlobalObject::kUntaggedBufferOffset);
    USE(tmp1);
    TNode<HeapObject>tmp2 = CodeStubAssembler(state_).LoadReference<HeapObject>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<WasmGlobalObject> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmGlobalObject> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<HeapObject>{tmp6};
}

void StoreWasmGlobalObjectUntaggedBuffer_1246(compiler::CodeAssemblerState* state_, TNode<WasmGlobalObject> p_o, TNode<HeapObject> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmGlobalObject, HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmGlobalObject, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmGlobalObject, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<WasmGlobalObject> tmp0;
    TNode<HeapObject> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1599);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(WasmGlobalObject::kUntaggedBufferOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<WasmGlobalObject> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmGlobalObject> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<HeapObject> LoadWasmGlobalObjectTaggedBuffer_1247(compiler::CodeAssemblerState* state_, TNode<WasmGlobalObject> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmGlobalObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmGlobalObject, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmGlobalObject, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<WasmGlobalObject> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1600);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(WasmGlobalObject::kTaggedBufferOffset);
    USE(tmp1);
    TNode<HeapObject>tmp2 = CodeStubAssembler(state_).LoadReference<HeapObject>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<WasmGlobalObject> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmGlobalObject> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<HeapObject>{tmp6};
}

void StoreWasmGlobalObjectTaggedBuffer_1248(compiler::CodeAssemblerState* state_, TNode<WasmGlobalObject> p_o, TNode<HeapObject> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmGlobalObject, HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmGlobalObject, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmGlobalObject, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<WasmGlobalObject> tmp0;
    TNode<HeapObject> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1600);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(WasmGlobalObject::kTaggedBufferOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<WasmGlobalObject> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmGlobalObject> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Smi> LoadWasmGlobalObjectOffset_1249(compiler::CodeAssemblerState* state_, TNode<WasmGlobalObject> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmGlobalObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmGlobalObject, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmGlobalObject, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<WasmGlobalObject> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1601);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(WasmGlobalObject::kOffsetOffset);
    USE(tmp1);
    TNode<Smi>tmp2 = CodeStubAssembler(state_).LoadReference<Smi>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<WasmGlobalObject> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmGlobalObject> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Smi>{tmp6};
}

void StoreWasmGlobalObjectOffset_1250(compiler::CodeAssemblerState* state_, TNode<WasmGlobalObject> p_o, TNode<Smi> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmGlobalObject, Smi> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmGlobalObject, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmGlobalObject, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<WasmGlobalObject> tmp0;
    TNode<Smi> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1601);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(WasmGlobalObject::kOffsetOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<WasmGlobalObject> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmGlobalObject> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Smi> LoadWasmGlobalObjectFlags_1251(compiler::CodeAssemblerState* state_, TNode<WasmGlobalObject> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmGlobalObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmGlobalObject, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmGlobalObject, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<WasmGlobalObject> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1602);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(WasmGlobalObject::kFlagsOffset);
    USE(tmp1);
    TNode<Smi>tmp2 = CodeStubAssembler(state_).LoadReference<Smi>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<WasmGlobalObject> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmGlobalObject> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Smi>{tmp6};
}

void StoreWasmGlobalObjectFlags_1252(compiler::CodeAssemblerState* state_, TNode<WasmGlobalObject> p_o, TNode<Smi> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmGlobalObject, Smi> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmGlobalObject, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmGlobalObject, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<WasmGlobalObject> tmp0;
    TNode<Smi> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1602);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(WasmGlobalObject::kFlagsOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<WasmGlobalObject> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmGlobalObject> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<ByteArray> LoadWasmExceptionObjectSerializedSignature_1253(compiler::CodeAssemblerState* state_, TNode<WasmExceptionObject> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmExceptionObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmExceptionObject, ByteArray> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmExceptionObject, ByteArray> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<WasmExceptionObject> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1606);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(WasmExceptionObject::kSerializedSignatureOffset);
    USE(tmp1);
    TNode<ByteArray>tmp2 = CodeStubAssembler(state_).LoadReference<ByteArray>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<WasmExceptionObject> tmp3;
    TNode<ByteArray> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmExceptionObject> tmp5;
    TNode<ByteArray> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<ByteArray>{tmp6};
}

void StoreWasmExceptionObjectSerializedSignature_1254(compiler::CodeAssemblerState* state_, TNode<WasmExceptionObject> p_o, TNode<ByteArray> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmExceptionObject, ByteArray> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmExceptionObject, ByteArray> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmExceptionObject, ByteArray> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<WasmExceptionObject> tmp0;
    TNode<ByteArray> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1606);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(WasmExceptionObject::kSerializedSignatureOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<WasmExceptionObject> tmp3;
    TNode<ByteArray> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmExceptionObject> tmp5;
    TNode<ByteArray> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<HeapObject> LoadWasmExceptionObjectExceptionTag_1255(compiler::CodeAssemblerState* state_, TNode<WasmExceptionObject> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmExceptionObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmExceptionObject, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmExceptionObject, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<WasmExceptionObject> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1607);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(WasmExceptionObject::kExceptionTagOffset);
    USE(tmp1);
    TNode<HeapObject>tmp2 = CodeStubAssembler(state_).LoadReference<HeapObject>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<WasmExceptionObject> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmExceptionObject> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<HeapObject>{tmp6};
}

void StoreWasmExceptionObjectExceptionTag_1256(compiler::CodeAssemblerState* state_, TNode<WasmExceptionObject> p_o, TNode<HeapObject> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WasmExceptionObject, HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmExceptionObject, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WasmExceptionObject, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<WasmExceptionObject> tmp0;
    TNode<HeapObject> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1607);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(WasmExceptionObject::kExceptionTagOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<WasmExceptionObject> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WasmExceptionObject> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Foreign> LoadAsmWasmDataManagedNativeModule_1257(compiler::CodeAssemblerState* state_, TNode<AsmWasmData> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<AsmWasmData> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AsmWasmData, Foreign> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AsmWasmData, Foreign> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<AsmWasmData> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1613);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(AsmWasmData::kManagedNativeModuleOffset);
    USE(tmp1);
    TNode<Foreign>tmp2 = CodeStubAssembler(state_).LoadReference<Foreign>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<AsmWasmData> tmp3;
    TNode<Foreign> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<AsmWasmData> tmp5;
    TNode<Foreign> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Foreign>{tmp6};
}

void StoreAsmWasmDataManagedNativeModule_1258(compiler::CodeAssemblerState* state_, TNode<AsmWasmData> p_o, TNode<Foreign> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<AsmWasmData, Foreign> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AsmWasmData, Foreign> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AsmWasmData, Foreign> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<AsmWasmData> tmp0;
    TNode<Foreign> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1613);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(AsmWasmData::kManagedNativeModuleOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<AsmWasmData> tmp3;
    TNode<Foreign> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<AsmWasmData> tmp5;
    TNode<Foreign> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<FixedArray> LoadAsmWasmDataExportWrappers_1259(compiler::CodeAssemblerState* state_, TNode<AsmWasmData> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<AsmWasmData> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AsmWasmData, FixedArray> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AsmWasmData, FixedArray> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<AsmWasmData> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1614);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(AsmWasmData::kExportWrappersOffset);
    USE(tmp1);
    TNode<FixedArray>tmp2 = CodeStubAssembler(state_).LoadReference<FixedArray>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<AsmWasmData> tmp3;
    TNode<FixedArray> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<AsmWasmData> tmp5;
    TNode<FixedArray> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<FixedArray>{tmp6};
}

void StoreAsmWasmDataExportWrappers_1260(compiler::CodeAssemblerState* state_, TNode<AsmWasmData> p_o, TNode<FixedArray> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<AsmWasmData, FixedArray> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AsmWasmData, FixedArray> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AsmWasmData, FixedArray> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<AsmWasmData> tmp0;
    TNode<FixedArray> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1614);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(AsmWasmData::kExportWrappersOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<AsmWasmData> tmp3;
    TNode<FixedArray> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<AsmWasmData> tmp5;
    TNode<FixedArray> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<ByteArray> LoadAsmWasmDataAsmJsOffsetTable_1261(compiler::CodeAssemblerState* state_, TNode<AsmWasmData> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<AsmWasmData> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AsmWasmData, ByteArray> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AsmWasmData, ByteArray> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<AsmWasmData> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1615);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(AsmWasmData::kAsmJsOffsetTableOffset);
    USE(tmp1);
    TNode<ByteArray>tmp2 = CodeStubAssembler(state_).LoadReference<ByteArray>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<AsmWasmData> tmp3;
    TNode<ByteArray> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<AsmWasmData> tmp5;
    TNode<ByteArray> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<ByteArray>{tmp6};
}

void StoreAsmWasmDataAsmJsOffsetTable_1262(compiler::CodeAssemblerState* state_, TNode<AsmWasmData> p_o, TNode<ByteArray> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<AsmWasmData, ByteArray> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AsmWasmData, ByteArray> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AsmWasmData, ByteArray> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<AsmWasmData> tmp0;
    TNode<ByteArray> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1615);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(AsmWasmData::kAsmJsOffsetTableOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<AsmWasmData> tmp3;
    TNode<ByteArray> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<AsmWasmData> tmp5;
    TNode<ByteArray> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<HeapNumber> LoadAsmWasmDataUsesBitset_1263(compiler::CodeAssemblerState* state_, TNode<AsmWasmData> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<AsmWasmData> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AsmWasmData, HeapNumber> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AsmWasmData, HeapNumber> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<AsmWasmData> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1616);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(AsmWasmData::kUsesBitsetOffset);
    USE(tmp1);
    TNode<HeapNumber>tmp2 = CodeStubAssembler(state_).LoadReference<HeapNumber>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<AsmWasmData> tmp3;
    TNode<HeapNumber> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<AsmWasmData> tmp5;
    TNode<HeapNumber> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<HeapNumber>{tmp6};
}

void StoreAsmWasmDataUsesBitset_1264(compiler::CodeAssemblerState* state_, TNode<AsmWasmData> p_o, TNode<HeapNumber> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<AsmWasmData, HeapNumber> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AsmWasmData, HeapNumber> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<AsmWasmData, HeapNumber> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<AsmWasmData> tmp0;
    TNode<HeapNumber> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1616);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(AsmWasmData::kUsesBitsetOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<AsmWasmData> tmp3;
    TNode<HeapNumber> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<AsmWasmData> tmp5;
    TNode<HeapNumber> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<NativeContext> LoadJSFinalizationGroupNativeContext_1265(compiler::CodeAssemblerState* state_, TNode<JSFinalizationGroup> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSFinalizationGroup> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSFinalizationGroup, NativeContext> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSFinalizationGroup, NativeContext> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSFinalizationGroup> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1620);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSFinalizationGroup::kNativeContextOffset);
    USE(tmp1);
    TNode<NativeContext>tmp2 = CodeStubAssembler(state_).LoadReference<NativeContext>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSFinalizationGroup> tmp3;
    TNode<NativeContext> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSFinalizationGroup> tmp5;
    TNode<NativeContext> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<NativeContext>{tmp6};
}

void StoreJSFinalizationGroupNativeContext_1266(compiler::CodeAssemblerState* state_, TNode<JSFinalizationGroup> p_o, TNode<NativeContext> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSFinalizationGroup, NativeContext> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSFinalizationGroup, NativeContext> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSFinalizationGroup, NativeContext> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSFinalizationGroup> tmp0;
    TNode<NativeContext> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1620);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSFinalizationGroup::kNativeContextOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSFinalizationGroup> tmp3;
    TNode<NativeContext> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSFinalizationGroup> tmp5;
    TNode<NativeContext> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadJSFinalizationGroupCleanup_1267(compiler::CodeAssemblerState* state_, TNode<JSFinalizationGroup> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSFinalizationGroup> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSFinalizationGroup, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSFinalizationGroup, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSFinalizationGroup> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1621);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSFinalizationGroup::kCleanupOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSFinalizationGroup> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSFinalizationGroup> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreJSFinalizationGroupCleanup_1268(compiler::CodeAssemblerState* state_, TNode<JSFinalizationGroup> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSFinalizationGroup, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSFinalizationGroup, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSFinalizationGroup, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSFinalizationGroup> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1621);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSFinalizationGroup::kCleanupOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSFinalizationGroup> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSFinalizationGroup> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<HeapObject> LoadJSFinalizationGroupActiveCells_1269(compiler::CodeAssemblerState* state_, TNode<JSFinalizationGroup> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSFinalizationGroup> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSFinalizationGroup, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSFinalizationGroup, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSFinalizationGroup> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1622);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSFinalizationGroup::kActiveCellsOffset);
    USE(tmp1);
    TNode<HeapObject>tmp2 = CodeStubAssembler(state_).LoadReference<HeapObject>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSFinalizationGroup> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSFinalizationGroup> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<HeapObject>{tmp6};
}

void StoreJSFinalizationGroupActiveCells_1270(compiler::CodeAssemblerState* state_, TNode<JSFinalizationGroup> p_o, TNode<HeapObject> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSFinalizationGroup, HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSFinalizationGroup, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSFinalizationGroup, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSFinalizationGroup> tmp0;
    TNode<HeapObject> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1622);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSFinalizationGroup::kActiveCellsOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSFinalizationGroup> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSFinalizationGroup> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<HeapObject> LoadJSFinalizationGroupClearedCells_1271(compiler::CodeAssemblerState* state_, TNode<JSFinalizationGroup> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSFinalizationGroup> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSFinalizationGroup, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSFinalizationGroup, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSFinalizationGroup> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1623);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSFinalizationGroup::kClearedCellsOffset);
    USE(tmp1);
    TNode<HeapObject>tmp2 = CodeStubAssembler(state_).LoadReference<HeapObject>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSFinalizationGroup> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSFinalizationGroup> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<HeapObject>{tmp6};
}

void StoreJSFinalizationGroupClearedCells_1272(compiler::CodeAssemblerState* state_, TNode<JSFinalizationGroup> p_o, TNode<HeapObject> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSFinalizationGroup, HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSFinalizationGroup, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSFinalizationGroup, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSFinalizationGroup> tmp0;
    TNode<HeapObject> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1623);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSFinalizationGroup::kClearedCellsOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSFinalizationGroup> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSFinalizationGroup> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadJSFinalizationGroupKeyMap_1273(compiler::CodeAssemblerState* state_, TNode<JSFinalizationGroup> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSFinalizationGroup> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSFinalizationGroup, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSFinalizationGroup, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSFinalizationGroup> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1624);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSFinalizationGroup::kKeyMapOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSFinalizationGroup> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSFinalizationGroup> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreJSFinalizationGroupKeyMap_1274(compiler::CodeAssemblerState* state_, TNode<JSFinalizationGroup> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSFinalizationGroup, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSFinalizationGroup, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSFinalizationGroup, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSFinalizationGroup> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1624);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSFinalizationGroup::kKeyMapOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSFinalizationGroup> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSFinalizationGroup> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<HeapObject> LoadJSFinalizationGroupNext_1275(compiler::CodeAssemblerState* state_, TNode<JSFinalizationGroup> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSFinalizationGroup> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSFinalizationGroup, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSFinalizationGroup, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSFinalizationGroup> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1625);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSFinalizationGroup::kNextOffset);
    USE(tmp1);
    TNode<HeapObject>tmp2 = CodeStubAssembler(state_).LoadReference<HeapObject>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSFinalizationGroup> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSFinalizationGroup> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<HeapObject>{tmp6};
}

void StoreJSFinalizationGroupNext_1276(compiler::CodeAssemblerState* state_, TNode<JSFinalizationGroup> p_o, TNode<HeapObject> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSFinalizationGroup, HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSFinalizationGroup, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSFinalizationGroup, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSFinalizationGroup> tmp0;
    TNode<HeapObject> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1625);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSFinalizationGroup::kNextOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSFinalizationGroup> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSFinalizationGroup> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Smi> LoadJSFinalizationGroupFlags_1277(compiler::CodeAssemblerState* state_, TNode<JSFinalizationGroup> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSFinalizationGroup> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSFinalizationGroup, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSFinalizationGroup, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSFinalizationGroup> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1626);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSFinalizationGroup::kFlagsOffset);
    USE(tmp1);
    TNode<Smi>tmp2 = CodeStubAssembler(state_).LoadReference<Smi>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSFinalizationGroup> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSFinalizationGroup> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Smi>{tmp6};
}

void StoreJSFinalizationGroupFlags_1278(compiler::CodeAssemblerState* state_, TNode<JSFinalizationGroup> p_o, TNode<Smi> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSFinalizationGroup, Smi> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSFinalizationGroup, Smi> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSFinalizationGroup, Smi> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSFinalizationGroup> tmp0;
    TNode<Smi> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1626);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSFinalizationGroup::kFlagsOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSFinalizationGroup> tmp3;
    TNode<Smi> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSFinalizationGroup> tmp5;
    TNode<Smi> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<JSFinalizationGroup> LoadJSFinalizationGroupCleanupIteratorFinalizationGroup_1279(compiler::CodeAssemblerState* state_, TNode<JSFinalizationGroupCleanupIterator> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSFinalizationGroupCleanupIterator> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSFinalizationGroupCleanupIterator, JSFinalizationGroup> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSFinalizationGroupCleanupIterator, JSFinalizationGroup> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSFinalizationGroupCleanupIterator> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1630);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSFinalizationGroupCleanupIterator::kFinalizationGroupOffset);
    USE(tmp1);
    TNode<JSFinalizationGroup>tmp2 = CodeStubAssembler(state_).LoadReference<JSFinalizationGroup>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSFinalizationGroupCleanupIterator> tmp3;
    TNode<JSFinalizationGroup> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSFinalizationGroupCleanupIterator> tmp5;
    TNode<JSFinalizationGroup> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<JSFinalizationGroup>{tmp6};
}

void StoreJSFinalizationGroupCleanupIteratorFinalizationGroup_1280(compiler::CodeAssemblerState* state_, TNode<JSFinalizationGroupCleanupIterator> p_o, TNode<JSFinalizationGroup> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSFinalizationGroupCleanupIterator, JSFinalizationGroup> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSFinalizationGroupCleanupIterator, JSFinalizationGroup> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSFinalizationGroupCleanupIterator, JSFinalizationGroup> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSFinalizationGroupCleanupIterator> tmp0;
    TNode<JSFinalizationGroup> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1630);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSFinalizationGroupCleanupIterator::kFinalizationGroupOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSFinalizationGroupCleanupIterator> tmp3;
    TNode<JSFinalizationGroup> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSFinalizationGroupCleanupIterator> tmp5;
    TNode<JSFinalizationGroup> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<HeapObject> LoadWeakCellFinalizationGroup_1281(compiler::CodeAssemblerState* state_, TNode<WeakCell> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WeakCell> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WeakCell, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WeakCell, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<WeakCell> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1634);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(WeakCell::kFinalizationGroupOffset);
    USE(tmp1);
    TNode<HeapObject>tmp2 = CodeStubAssembler(state_).LoadReference<HeapObject>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<WeakCell> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WeakCell> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<HeapObject>{tmp6};
}

void StoreWeakCellFinalizationGroup_1282(compiler::CodeAssemblerState* state_, TNode<WeakCell> p_o, TNode<HeapObject> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WeakCell, HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WeakCell, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WeakCell, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<WeakCell> tmp0;
    TNode<HeapObject> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1634);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(WeakCell::kFinalizationGroupOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<WeakCell> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WeakCell> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<HeapObject> LoadWeakCellTarget_1283(compiler::CodeAssemblerState* state_, TNode<WeakCell> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WeakCell> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WeakCell, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WeakCell, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<WeakCell> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1635);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(WeakCell::kTargetOffset);
    USE(tmp1);
    TNode<HeapObject>tmp2 = CodeStubAssembler(state_).LoadReference<HeapObject>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<WeakCell> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WeakCell> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<HeapObject>{tmp6};
}

void StoreWeakCellTarget_1284(compiler::CodeAssemblerState* state_, TNode<WeakCell> p_o, TNode<HeapObject> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WeakCell, HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WeakCell, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WeakCell, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<WeakCell> tmp0;
    TNode<HeapObject> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1635);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(WeakCell::kTargetOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<WeakCell> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WeakCell> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadWeakCellHoldings_1285(compiler::CodeAssemblerState* state_, TNode<WeakCell> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WeakCell> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WeakCell, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WeakCell, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<WeakCell> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1636);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(WeakCell::kHoldingsOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<WeakCell> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WeakCell> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreWeakCellHoldings_1286(compiler::CodeAssemblerState* state_, TNode<WeakCell> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WeakCell, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WeakCell, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WeakCell, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<WeakCell> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1636);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(WeakCell::kHoldingsOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<WeakCell> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WeakCell> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<HeapObject> LoadWeakCellPrev_1287(compiler::CodeAssemblerState* state_, TNode<WeakCell> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WeakCell> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WeakCell, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WeakCell, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<WeakCell> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1637);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(WeakCell::kPrevOffset);
    USE(tmp1);
    TNode<HeapObject>tmp2 = CodeStubAssembler(state_).LoadReference<HeapObject>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<WeakCell> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WeakCell> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<HeapObject>{tmp6};
}

void StoreWeakCellPrev_1288(compiler::CodeAssemblerState* state_, TNode<WeakCell> p_o, TNode<HeapObject> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WeakCell, HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WeakCell, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WeakCell, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<WeakCell> tmp0;
    TNode<HeapObject> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1637);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(WeakCell::kPrevOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<WeakCell> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WeakCell> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<HeapObject> LoadWeakCellNext_1289(compiler::CodeAssemblerState* state_, TNode<WeakCell> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WeakCell> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WeakCell, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WeakCell, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<WeakCell> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1638);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(WeakCell::kNextOffset);
    USE(tmp1);
    TNode<HeapObject>tmp2 = CodeStubAssembler(state_).LoadReference<HeapObject>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<WeakCell> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WeakCell> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<HeapObject>{tmp6};
}

void StoreWeakCellNext_1290(compiler::CodeAssemblerState* state_, TNode<WeakCell> p_o, TNode<HeapObject> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WeakCell, HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WeakCell, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WeakCell, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<WeakCell> tmp0;
    TNode<HeapObject> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1638);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(WeakCell::kNextOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<WeakCell> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WeakCell> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Object> LoadWeakCellKey_1291(compiler::CodeAssemblerState* state_, TNode<WeakCell> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WeakCell> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WeakCell, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WeakCell, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<WeakCell> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1639);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(WeakCell::kKeyOffset);
    USE(tmp1);
    TNode<Object>tmp2 = CodeStubAssembler(state_).LoadReference<Object>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<WeakCell> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WeakCell> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Object>{tmp6};
}

void StoreWeakCellKey_1292(compiler::CodeAssemblerState* state_, TNode<WeakCell> p_o, TNode<Object> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WeakCell, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WeakCell, Object> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WeakCell, Object> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<WeakCell> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1639);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(WeakCell::kKeyOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<WeakCell> tmp3;
    TNode<Object> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WeakCell> tmp5;
    TNode<Object> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<HeapObject> LoadWeakCellKeyListPrev_1293(compiler::CodeAssemblerState* state_, TNode<WeakCell> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WeakCell> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WeakCell, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WeakCell, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<WeakCell> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1640);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(WeakCell::kKeyListPrevOffset);
    USE(tmp1);
    TNode<HeapObject>tmp2 = CodeStubAssembler(state_).LoadReference<HeapObject>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<WeakCell> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WeakCell> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<HeapObject>{tmp6};
}

void StoreWeakCellKeyListPrev_1294(compiler::CodeAssemblerState* state_, TNode<WeakCell> p_o, TNode<HeapObject> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WeakCell, HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WeakCell, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WeakCell, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<WeakCell> tmp0;
    TNode<HeapObject> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1640);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(WeakCell::kKeyListPrevOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<WeakCell> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WeakCell> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<HeapObject> LoadWeakCellKeyListNext_1295(compiler::CodeAssemblerState* state_, TNode<WeakCell> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WeakCell> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WeakCell, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WeakCell, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<WeakCell> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1641);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(WeakCell::kKeyListNextOffset);
    USE(tmp1);
    TNode<HeapObject>tmp2 = CodeStubAssembler(state_).LoadReference<HeapObject>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<WeakCell> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WeakCell> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<HeapObject>{tmp6};
}

void StoreWeakCellKeyListNext_1296(compiler::CodeAssemblerState* state_, TNode<WeakCell> p_o, TNode<HeapObject> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<WeakCell, HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WeakCell, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<WeakCell, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<WeakCell> tmp0;
    TNode<HeapObject> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1641);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(WeakCell::kKeyListNextOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<WeakCell> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<WeakCell> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<HeapObject> LoadJSWeakRefTarget_1297(compiler::CodeAssemblerState* state_, TNode<JSWeakRef> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSWeakRef> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSWeakRef, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSWeakRef, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<JSWeakRef> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1644);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(JSWeakRef::kTargetOffset);
    USE(tmp1);
    TNode<HeapObject>tmp2 = CodeStubAssembler(state_).LoadReference<HeapObject>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<JSWeakRef> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSWeakRef> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<HeapObject>{tmp6};
}

void StoreJSWeakRefTarget_1298(compiler::CodeAssemblerState* state_, TNode<JSWeakRef> p_o, TNode<HeapObject> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<JSWeakRef, HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSWeakRef, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<JSWeakRef, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<JSWeakRef> tmp0;
    TNode<HeapObject> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1644);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(JSWeakRef::kTargetOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<JSWeakRef> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<JSWeakRef> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<FixedArray> LoadBytecodeArrayConstantPool_1299(compiler::CodeAssemblerState* state_, TNode<BytecodeArray> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<BytecodeArray> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<BytecodeArray, FixedArray> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<BytecodeArray, FixedArray> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<BytecodeArray> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1648);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(BytecodeArray::kConstantPoolOffset);
    USE(tmp1);
    TNode<FixedArray>tmp2 = CodeStubAssembler(state_).LoadReference<FixedArray>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<BytecodeArray> tmp3;
    TNode<FixedArray> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<BytecodeArray> tmp5;
    TNode<FixedArray> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<FixedArray>{tmp6};
}

void StoreBytecodeArrayConstantPool_1300(compiler::CodeAssemblerState* state_, TNode<BytecodeArray> p_o, TNode<FixedArray> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<BytecodeArray, FixedArray> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<BytecodeArray, FixedArray> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<BytecodeArray, FixedArray> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<BytecodeArray> tmp0;
    TNode<FixedArray> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1648);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(BytecodeArray::kConstantPoolOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<BytecodeArray> tmp3;
    TNode<FixedArray> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<BytecodeArray> tmp5;
    TNode<FixedArray> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<ByteArray> LoadBytecodeArrayHandlerTable_1301(compiler::CodeAssemblerState* state_, TNode<BytecodeArray> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<BytecodeArray> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<BytecodeArray, ByteArray> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<BytecodeArray, ByteArray> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<BytecodeArray> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1649);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(BytecodeArray::kHandlerTableOffset);
    USE(tmp1);
    TNode<ByteArray>tmp2 = CodeStubAssembler(state_).LoadReference<ByteArray>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<BytecodeArray> tmp3;
    TNode<ByteArray> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<BytecodeArray> tmp5;
    TNode<ByteArray> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<ByteArray>{tmp6};
}

void StoreBytecodeArrayHandlerTable_1302(compiler::CodeAssemblerState* state_, TNode<BytecodeArray> p_o, TNode<ByteArray> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<BytecodeArray, ByteArray> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<BytecodeArray, ByteArray> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<BytecodeArray, ByteArray> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<BytecodeArray> tmp0;
    TNode<ByteArray> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1649);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(BytecodeArray::kHandlerTableOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<BytecodeArray> tmp3;
    TNode<ByteArray> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<BytecodeArray> tmp5;
    TNode<ByteArray> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<HeapObject> LoadBytecodeArraySourcePositionTable_1303(compiler::CodeAssemblerState* state_, TNode<BytecodeArray> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<BytecodeArray> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<BytecodeArray, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<BytecodeArray, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<BytecodeArray> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1650);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(BytecodeArray::kSourcePositionTableOffset);
    USE(tmp1);
    TNode<HeapObject>tmp2 = CodeStubAssembler(state_).LoadReference<HeapObject>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<BytecodeArray> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<BytecodeArray> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<HeapObject>{tmp6};
}

void StoreBytecodeArraySourcePositionTable_1304(compiler::CodeAssemblerState* state_, TNode<BytecodeArray> p_o, TNode<HeapObject> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<BytecodeArray, HeapObject> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<BytecodeArray, HeapObject> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<BytecodeArray, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<BytecodeArray> tmp0;
    TNode<HeapObject> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1650);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(BytecodeArray::kSourcePositionTableOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<BytecodeArray> tmp3;
    TNode<HeapObject> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<BytecodeArray> tmp5;
    TNode<HeapObject> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Int32T> LoadBytecodeArrayFrameSize_1305(compiler::CodeAssemblerState* state_, TNode<BytecodeArray> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<BytecodeArray> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<BytecodeArray, Int32T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<BytecodeArray, Int32T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<BytecodeArray> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1652);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(BytecodeArray::kFrameSizeOffset);
    USE(tmp1);
    TNode<Int32T>tmp2 = CodeStubAssembler(state_).LoadReference<Int32T>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<BytecodeArray> tmp3;
    TNode<Int32T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<BytecodeArray> tmp5;
    TNode<Int32T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Int32T>{tmp6};
}

void StoreBytecodeArrayFrameSize_1306(compiler::CodeAssemblerState* state_, TNode<BytecodeArray> p_o, TNode<Int32T> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<BytecodeArray, Int32T> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<BytecodeArray, Int32T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<BytecodeArray, Int32T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<BytecodeArray> tmp0;
    TNode<Int32T> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1652);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(BytecodeArray::kFrameSizeOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<BytecodeArray> tmp3;
    TNode<Int32T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<BytecodeArray> tmp5;
    TNode<Int32T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Int32T> LoadBytecodeArrayParameterSize_1307(compiler::CodeAssemblerState* state_, TNode<BytecodeArray> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<BytecodeArray> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<BytecodeArray, Int32T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<BytecodeArray, Int32T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<BytecodeArray> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1653);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(BytecodeArray::kParameterSizeOffset);
    USE(tmp1);
    TNode<Int32T>tmp2 = CodeStubAssembler(state_).LoadReference<Int32T>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<BytecodeArray> tmp3;
    TNode<Int32T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<BytecodeArray> tmp5;
    TNode<Int32T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Int32T>{tmp6};
}

void StoreBytecodeArrayParameterSize_1308(compiler::CodeAssemblerState* state_, TNode<BytecodeArray> p_o, TNode<Int32T> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<BytecodeArray, Int32T> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<BytecodeArray, Int32T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<BytecodeArray, Int32T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<BytecodeArray> tmp0;
    TNode<Int32T> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1653);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(BytecodeArray::kParameterSizeOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<BytecodeArray> tmp3;
    TNode<Int32T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<BytecodeArray> tmp5;
    TNode<Int32T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Int32T> LoadBytecodeArrayIncomingNewTargetOrGeneratorRegister_1309(compiler::CodeAssemblerState* state_, TNode<BytecodeArray> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<BytecodeArray> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<BytecodeArray, Int32T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<BytecodeArray, Int32T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<BytecodeArray> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1654);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(BytecodeArray::kIncomingNewTargetOrGeneratorRegisterOffset);
    USE(tmp1);
    TNode<Int32T>tmp2 = CodeStubAssembler(state_).LoadReference<Int32T>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<BytecodeArray> tmp3;
    TNode<Int32T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<BytecodeArray> tmp5;
    TNode<Int32T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Int32T>{tmp6};
}

void StoreBytecodeArrayIncomingNewTargetOrGeneratorRegister_1310(compiler::CodeAssemblerState* state_, TNode<BytecodeArray> p_o, TNode<Int32T> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<BytecodeArray, Int32T> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<BytecodeArray, Int32T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<BytecodeArray, Int32T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<BytecodeArray> tmp0;
    TNode<Int32T> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1654);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(BytecodeArray::kIncomingNewTargetOrGeneratorRegisterOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<BytecodeArray> tmp3;
    TNode<Int32T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<BytecodeArray> tmp5;
    TNode<Int32T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Int8T> LoadBytecodeArrayOsrNestingLevel_1311(compiler::CodeAssemblerState* state_, TNode<BytecodeArray> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<BytecodeArray> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<BytecodeArray, Int8T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<BytecodeArray, Int8T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<BytecodeArray> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1655);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(BytecodeArray::kOsrNestingLevelOffset);
    USE(tmp1);
    TNode<Int8T>tmp2 = CodeStubAssembler(state_).LoadReference<Int8T>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<BytecodeArray> tmp3;
    TNode<Int8T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<BytecodeArray> tmp5;
    TNode<Int8T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Int8T>{tmp6};
}

void StoreBytecodeArrayOsrNestingLevel_1312(compiler::CodeAssemblerState* state_, TNode<BytecodeArray> p_o, TNode<Int8T> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<BytecodeArray, Int8T> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<BytecodeArray, Int8T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<BytecodeArray, Int8T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<BytecodeArray> tmp0;
    TNode<Int8T> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1655);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(BytecodeArray::kOsrNestingLevelOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<BytecodeArray> tmp3;
    TNode<Int8T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<BytecodeArray> tmp5;
    TNode<Int8T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<Int8T> LoadBytecodeArrayBytecodeAge_1313(compiler::CodeAssemblerState* state_, TNode<BytecodeArray> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<BytecodeArray> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<BytecodeArray, Int8T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<BytecodeArray, Int8T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o);

  if (block0.is_used()) {
    TNode<BytecodeArray> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1656);
    TNode<IntPtrT> tmp1 = ca_.IntPtrConstant(BytecodeArray::kBytecodeAgeOffset);
    USE(tmp1);
    TNode<Int8T>tmp2 = CodeStubAssembler(state_).LoadReference<Int8T>(CodeStubAssembler::Reference{tmp0, tmp1});
    ca_.Goto(&block1, tmp0, tmp2);
  }

  if (block1.is_used()) {
    TNode<BytecodeArray> tmp3;
    TNode<Int8T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<BytecodeArray> tmp5;
    TNode<Int8T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
  return TNode<Int8T>{tmp6};
}

void StoreBytecodeArrayBytecodeAge_1314(compiler::CodeAssemblerState* state_, TNode<BytecodeArray> p_o, TNode<Int8T> p_v) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<BytecodeArray, Int8T> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<BytecodeArray, Int8T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<BytecodeArray, Int8T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_o, p_v);

  if (block0.is_used()) {
    TNode<BytecodeArray> tmp0;
    TNode<Int8T> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 1656);
    TNode<IntPtrT> tmp2 = ca_.IntPtrConstant(BytecodeArray::kBytecodeAgeOffset);
    USE(tmp2);
    CodeStubAssembler(state_).StoreReference(CodeStubAssembler::Reference{tmp0, tmp2}, tmp1);
    ca_.Goto(&block1, tmp0, tmp1);
  }

  if (block1.is_used()) {
    TNode<BytecodeArray> tmp3;
    TNode<Int8T> tmp4;
    ca_.Bind(&block1, &tmp3, &tmp4);
    ca_.Goto(&block2, tmp3, tmp4);
  }

    TNode<BytecodeArray> tmp5;
    TNode<Int8T> tmp6;
    ca_.Bind(&block2, &tmp5, &tmp6);
}

TNode<HeapObject> Cast10HeapObject_1470(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Context, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, Object> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, Object, HeapObject> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, HeapObject> block6(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, HeapObject, HeapObject> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, HeapObject> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, HeapObject> block7(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_context, p_o);

  if (block0.is_used()) {
    TNode<Context> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2068);
    TNode<HeapObject> tmp2;
    USE(tmp2);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp2 = CodeStubAssembler(state_).TaggedToHeapObject(TNode<Object>{tmp1}, &label0);
    ca_.Goto(&block3, tmp0, tmp1, tmp1, tmp2);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block4, tmp0, tmp1, tmp1);
    }
  }

  if (block4.is_used()) {
    TNode<Context> tmp3;
    TNode<Object> tmp4;
    TNode<Object> tmp5;
    ca_.Bind(&block4, &tmp3, &tmp4, &tmp5);
    ca_.Goto(&block1);
  }

  if (block3.is_used()) {
    TNode<Context> tmp6;
    TNode<Object> tmp7;
    TNode<Object> tmp8;
    TNode<HeapObject> tmp9;
    ca_.Bind(&block3, &tmp6, &tmp7, &tmp8, &tmp9);
    TNode<HeapObject> tmp10;
    USE(tmp10);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp10 = Cast10HeapObject_100(state_, TNode<HeapObject>{tmp9}, &label0);
    ca_.Goto(&block5, tmp6, tmp7, tmp9, tmp10);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block6, tmp6, tmp7, tmp9);
    }
  }

  if (block6.is_used()) {
    TNode<Context> tmp11;
    TNode<Object> tmp12;
    TNode<HeapObject> tmp13;
    ca_.Bind(&block6, &tmp11, &tmp12, &tmp13);
    ca_.Goto(&block1);
  }

  if (block5.is_used()) {
    TNode<Context> tmp14;
    TNode<Object> tmp15;
    TNode<HeapObject> tmp16;
    TNode<HeapObject> tmp17;
    ca_.Bind(&block5, &tmp14, &tmp15, &tmp16, &tmp17);
    ca_.Goto(&block2, tmp14, tmp15, tmp17);
  }

  if (block2.is_used()) {
    TNode<Context> tmp18;
    TNode<Object> tmp19;
    TNode<HeapObject> tmp20;
    ca_.Bind(&block2, &tmp18, &tmp19, &tmp20);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2285);
    ca_.Goto(&block7, tmp18, tmp19, tmp20);
  }

  if (block1.is_used()) {
    ca_.Bind(&block1);
    ca_.Goto(label_CastError);
  }

    TNode<Context> tmp21;
    TNode<Object> tmp22;
    TNode<HeapObject> tmp23;
    ca_.Bind(&block7, &tmp21, &tmp22, &tmp23);
  return TNode<HeapObject>{tmp23};
}

TNode<Uint32T> Convert8ATuint327ATuint8_1471(compiler::CodeAssemblerState* state_, TNode<Uint8T> p_i) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Uint8T> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Uint8T, Uint32T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Uint8T, Uint32T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_i);

  if (block0.is_used()) {
    TNode<Uint8T> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2706);
    ca_.Goto(&block1, tmp0, tmp0);
  }

  if (block1.is_used()) {
    TNode<Uint8T> tmp1;
    TNode<Uint32T> tmp2;
    ca_.Bind(&block1, &tmp1, &tmp2);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2739);
    ca_.Goto(&block2, tmp1, tmp2);
  }

    TNode<Uint8T> tmp3;
    TNode<Uint32T> tmp4;
    ca_.Bind(&block2, &tmp3, &tmp4);
  return TNode<Uint32T>{tmp4};
}

TNode<Uint32T> Convert8ATuint328ATuint16_1472(compiler::CodeAssemblerState* state_, TNode<Uint16T> p_i) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Uint16T> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Uint16T, Uint32T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Uint16T, Uint32T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_i);

  if (block0.is_used()) {
    TNode<Uint16T> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2706);
    ca_.Goto(&block1, tmp0, tmp0);
  }

  if (block1.is_used()) {
    TNode<Uint16T> tmp1;
    TNode<Uint32T> tmp2;
    ca_.Bind(&block1, &tmp1, &tmp2);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2742);
    ca_.Goto(&block2, tmp1, tmp2);
  }

    TNode<Uint16T> tmp3;
    TNode<Uint32T> tmp4;
    ca_.Bind(&block2, &tmp3, &tmp4);
  return TNode<Uint32T>{tmp4};
}

TNode<Uint32T> Convert8ATuint328ATuint31_1473(compiler::CodeAssemblerState* state_, TNode<Uint32T> p_i) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Uint32T> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Uint32T, Uint32T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Uint32T, Uint32T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_i);

  if (block0.is_used()) {
    TNode<Uint32T> tmp0;
    ca_.Bind(&block0, &tmp0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2706);
    ca_.Goto(&block1, tmp0, tmp0);
  }

  if (block1.is_used()) {
    TNode<Uint32T> tmp1;
    TNode<Uint32T> tmp2;
    ca_.Bind(&block1, &tmp1, &tmp2);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2745);
    ca_.Goto(&block2, tmp1, tmp2);
  }

    TNode<Uint32T> tmp3;
    TNode<Uint32T> tmp4;
    ca_.Bind(&block2, &tmp3, &tmp4);
  return TNode<Uint32T>{tmp4};
}

TNode<JSFunction> UnsafeCast10JSFunction_1474(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<Object> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Context, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, JSFunction> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, JSFunction> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_context, p_o);

  if (block0.is_used()) {
    TNode<Context> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2846);
    TNode<JSFunction> tmp2;
    USE(tmp2);
    tmp2 = TORQUE_CAST(TNode<Object>{tmp1});
    ca_.Goto(&block1, tmp0, tmp1, tmp2);
  }

  if (block1.is_used()) {
    TNode<Context> tmp3;
    TNode<Object> tmp4;
    TNode<JSFunction> tmp5;
    ca_.Bind(&block1, &tmp3, &tmp4, &tmp5);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3012);
    ca_.Goto(&block2, tmp3, tmp4, tmp5);
  }

    TNode<Context> tmp6;
    TNode<Object> tmp7;
    TNode<JSFunction> tmp8;
    ca_.Bind(&block2, &tmp6, &tmp7, &tmp8);
  return TNode<JSFunction>{tmp8};
}

TNode<JSReceiver> UnsafeCast13ATConstructor_1475(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<Object> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Context, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, JSReceiver> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, JSReceiver> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_context, p_o);

  if (block0.is_used()) {
    TNode<Context> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2846);
    TNode<JSReceiver> tmp2;
    USE(tmp2);
    tmp2 = TORQUE_CAST(TNode<Object>{tmp1});
    ca_.Goto(&block1, tmp0, tmp1, tmp2);
  }

  if (block1.is_used()) {
    TNode<Context> tmp3;
    TNode<Object> tmp4;
    TNode<JSReceiver> tmp5;
    ca_.Bind(&block1, &tmp3, &tmp4, &tmp5);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3016);
    ca_.Goto(&block2, tmp3, tmp4, tmp5);
  }

    TNode<Context> tmp6;
    TNode<Object> tmp7;
    TNode<JSReceiver> tmp8;
    ca_.Bind(&block2, &tmp6, &tmp7, &tmp8);
  return TNode<JSReceiver>{tmp8};
}

TNode<Map> UnsafeCast3Map_1476(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<Object> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Context, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, Map> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, Map> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_context, p_o);

  if (block0.is_used()) {
    TNode<Context> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2846);
    TNode<Map> tmp2;
    USE(tmp2);
    tmp2 = TORQUE_CAST(TNode<Object>{tmp1});
    ca_.Goto(&block1, tmp0, tmp1, tmp2);
  }

  if (block1.is_used()) {
    TNode<Context> tmp3;
    TNode<Object> tmp4;
    TNode<Map> tmp5;
    ca_.Bind(&block1, &tmp3, &tmp4, &tmp5);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3024);
    ca_.Goto(&block2, tmp3, tmp4, tmp5);
  }

    TNode<Context> tmp6;
    TNode<Object> tmp7;
    TNode<Map> tmp8;
    ca_.Bind(&block2, &tmp6, &tmp7, &tmp8);
  return TNode<Map>{tmp8};
}

TNode<JSReceiver> UnsafeCast71UT19ATCallableApiObject17ATCallableJSProxy15JSBoundFunction10JSFunction_1477(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<Object> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Context, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, JSReceiver> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, JSReceiver> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_context, p_o);

  if (block0.is_used()) {
    TNode<Context> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2846);
    TNode<JSReceiver> tmp2;
    USE(tmp2);
    tmp2 = TORQUE_CAST(TNode<Object>{tmp1});
    ca_.Goto(&block1, tmp0, tmp1, tmp2);
  }

  if (block1.is_used()) {
    TNode<Context> tmp3;
    TNode<Object> tmp4;
    TNode<JSReceiver> tmp5;
    ca_.Bind(&block1, &tmp3, &tmp4, &tmp5);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3043);
    ca_.Goto(&block2, tmp3, tmp4, tmp5);
  }

    TNode<Context> tmp6;
    TNode<Object> tmp7;
    TNode<JSReceiver> tmp8;
    ca_.Bind(&block2, &tmp6, &tmp7, &tmp8);
  return TNode<JSReceiver>{tmp8};
}

TNode<JSArray> Cast7JSArray_1478(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Context, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, Object> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, Object, HeapObject> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, HeapObject> block6(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, HeapObject, JSArray> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, JSArray> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, JSArray> block7(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_context, p_o);

  if (block0.is_used()) {
    TNode<Context> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2068);
    TNode<HeapObject> tmp2;
    USE(tmp2);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp2 = CodeStubAssembler(state_).TaggedToHeapObject(TNode<Object>{tmp1}, &label0);
    ca_.Goto(&block3, tmp0, tmp1, tmp1, tmp2);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block4, tmp0, tmp1, tmp1);
    }
  }

  if (block4.is_used()) {
    TNode<Context> tmp3;
    TNode<Object> tmp4;
    TNode<Object> tmp5;
    ca_.Bind(&block4, &tmp3, &tmp4, &tmp5);
    ca_.Goto(&block1);
  }

  if (block3.is_used()) {
    TNode<Context> tmp6;
    TNode<Object> tmp7;
    TNode<Object> tmp8;
    TNode<HeapObject> tmp9;
    ca_.Bind(&block3, &tmp6, &tmp7, &tmp8, &tmp9);
    TNode<JSArray> tmp10;
    USE(tmp10);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp10 = Cast7JSArray_113(state_, TNode<HeapObject>{tmp9}, &label0);
    ca_.Goto(&block5, tmp6, tmp7, tmp9, tmp10);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block6, tmp6, tmp7, tmp9);
    }
  }

  if (block6.is_used()) {
    TNode<Context> tmp11;
    TNode<Object> tmp12;
    TNode<HeapObject> tmp13;
    ca_.Bind(&block6, &tmp11, &tmp12, &tmp13);
    ca_.Goto(&block1);
  }

  if (block5.is_used()) {
    TNode<Context> tmp14;
    TNode<Object> tmp15;
    TNode<HeapObject> tmp16;
    TNode<JSArray> tmp17;
    ca_.Bind(&block5, &tmp14, &tmp15, &tmp16, &tmp17);
    ca_.Goto(&block2, tmp14, tmp15, tmp17);
  }

  if (block2.is_used()) {
    TNode<Context> tmp18;
    TNode<Object> tmp19;
    TNode<JSArray> tmp20;
    ca_.Bind(&block2, &tmp18, &tmp19, &tmp20);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3402);
    ca_.Goto(&block7, tmp18, tmp19, tmp20);
  }

  if (block1.is_used()) {
    ca_.Bind(&block1);
    ca_.Goto(label_CastError);
  }

    TNode<Context> tmp21;
    TNode<Object> tmp22;
    TNode<JSArray> tmp23;
    ca_.Bind(&block7, &tmp21, &tmp22, &tmp23);
  return TNode<JSArray>{tmp23};
}

TNode<BoolT> Is13ATFastJSArray20UT5ATSmi10HeapObject_1479(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<Object> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Context, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, Object> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, Object, JSArray> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, JSArray> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, BoolT> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, BoolT> block6(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_context, p_o);

  if (block0.is_used()) {
    TNode<Context> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2840);
    TNode<JSArray> tmp2;
    USE(tmp2);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp2 = Cast13ATFastJSArray_1458(state_, TNode<Context>{tmp0}, TNode<Object>{tmp1}, &label0);
    ca_.Goto(&block4, tmp0, tmp1, tmp1, tmp2);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block5, tmp0, tmp1, tmp1);
    }
  }

  if (block5.is_used()) {
    TNode<Context> tmp3;
    TNode<Object> tmp4;
    TNode<Object> tmp5;
    ca_.Bind(&block5, &tmp3, &tmp4, &tmp5);
    ca_.Goto(&block3, tmp3, tmp4);
  }

  if (block4.is_used()) {
    TNode<Context> tmp6;
    TNode<Object> tmp7;
    TNode<Object> tmp8;
    TNode<JSArray> tmp9;
    ca_.Bind(&block4, &tmp6, &tmp7, &tmp8, &tmp9);
    ca_.Goto(&block2, tmp6, tmp7, tmp9);
  }

  if (block3.is_used()) {
    TNode<Context> tmp10;
    TNode<Object> tmp11;
    ca_.Bind(&block3, &tmp10, &tmp11);
    TNode<BoolT> tmp12;
    USE(tmp12);
    tmp12 = FromConstexpr6ATbool16ATconstexpr_bool_167(state_, false);
    ca_.Goto(&block1, tmp10, tmp11, tmp12);
  }

  if (block2.is_used()) {
    TNode<Context> tmp13;
    TNode<Object> tmp14;
    TNode<JSArray> tmp15;
    ca_.Bind(&block2, &tmp13, &tmp14, &tmp15);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2841);
    TNode<BoolT> tmp16;
    USE(tmp16);
    tmp16 = FromConstexpr6ATbool16ATconstexpr_bool_167(state_, true);
    ca_.Goto(&block1, tmp13, tmp14, tmp16);
  }

  if (block1.is_used()) {
    TNode<Context> tmp17;
    TNode<Object> tmp18;
    TNode<BoolT> tmp19;
    ca_.Bind(&block1, &tmp17, &tmp18, &tmp19);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3448);
    ca_.Goto(&block6, tmp17, tmp18, tmp19);
  }

    TNode<Context> tmp20;
    TNode<Object> tmp21;
    TNode<BoolT> tmp22;
    ca_.Bind(&block6, &tmp20, &tmp21, &tmp22);
  return TNode<BoolT>{tmp22};
}

TNode<BoolT> Is20ATFastJSArrayForRead20UT5ATSmi10HeapObject_1480(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<Object> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Context, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, Object> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, Object, JSArray> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, JSArray> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, BoolT> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, BoolT> block6(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_context, p_o);

  if (block0.is_used()) {
    TNode<Context> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2840);
    TNode<JSArray> tmp2;
    USE(tmp2);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp2 = Cast20ATFastJSArrayForRead_1456(state_, TNode<Context>{tmp0}, TNode<Object>{tmp1}, &label0);
    ca_.Goto(&block4, tmp0, tmp1, tmp1, tmp2);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block5, tmp0, tmp1, tmp1);
    }
  }

  if (block5.is_used()) {
    TNode<Context> tmp3;
    TNode<Object> tmp4;
    TNode<Object> tmp5;
    ca_.Bind(&block5, &tmp3, &tmp4, &tmp5);
    ca_.Goto(&block3, tmp3, tmp4);
  }

  if (block4.is_used()) {
    TNode<Context> tmp6;
    TNode<Object> tmp7;
    TNode<Object> tmp8;
    TNode<JSArray> tmp9;
    ca_.Bind(&block4, &tmp6, &tmp7, &tmp8, &tmp9);
    ca_.Goto(&block2, tmp6, tmp7, tmp9);
  }

  if (block3.is_used()) {
    TNode<Context> tmp10;
    TNode<Object> tmp11;
    ca_.Bind(&block3, &tmp10, &tmp11);
    TNode<BoolT> tmp12;
    USE(tmp12);
    tmp12 = FromConstexpr6ATbool16ATconstexpr_bool_167(state_, false);
    ca_.Goto(&block1, tmp10, tmp11, tmp12);
  }

  if (block2.is_used()) {
    TNode<Context> tmp13;
    TNode<Object> tmp14;
    TNode<JSArray> tmp15;
    ca_.Bind(&block2, &tmp13, &tmp14, &tmp15);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2841);
    TNode<BoolT> tmp16;
    USE(tmp16);
    tmp16 = FromConstexpr6ATbool16ATconstexpr_bool_167(state_, true);
    ca_.Goto(&block1, tmp13, tmp14, tmp16);
  }

  if (block1.is_used()) {
    TNode<Context> tmp17;
    TNode<Object> tmp18;
    TNode<BoolT> tmp19;
    ca_.Bind(&block1, &tmp17, &tmp18, &tmp19);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3467);
    ca_.Goto(&block6, tmp17, tmp18, tmp19);
  }

    TNode<Context> tmp20;
    TNode<Object> tmp21;
    TNode<BoolT> tmp22;
    ca_.Bind(&block6, &tmp20, &tmp21, &tmp22);
  return TNode<BoolT>{tmp22};
}

TNode<BoolT> Is34ATFastJSArrayWithNoCustomIteration20UT5ATSmi10HeapObject_1481(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<Object> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Context, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, Object> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, Object, JSArray> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, JSArray> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, BoolT> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, BoolT> block6(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_context, p_o);

  if (block0.is_used()) {
    TNode<Context> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2840);
    TNode<JSArray> tmp2;
    USE(tmp2);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp2 = Cast34ATFastJSArrayWithNoCustomIteration_1492(state_, TNode<Context>{tmp0}, TNode<Object>{tmp1}, &label0);
    ca_.Goto(&block4, tmp0, tmp1, tmp1, tmp2);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block5, tmp0, tmp1, tmp1);
    }
  }

  if (block5.is_used()) {
    TNode<Context> tmp3;
    TNode<Object> tmp4;
    TNode<Object> tmp5;
    ca_.Bind(&block5, &tmp3, &tmp4, &tmp5);
    ca_.Goto(&block3, tmp3, tmp4);
  }

  if (block4.is_used()) {
    TNode<Context> tmp6;
    TNode<Object> tmp7;
    TNode<Object> tmp8;
    TNode<JSArray> tmp9;
    ca_.Bind(&block4, &tmp6, &tmp7, &tmp8, &tmp9);
    ca_.Goto(&block2, tmp6, tmp7, tmp9);
  }

  if (block3.is_used()) {
    TNode<Context> tmp10;
    TNode<Object> tmp11;
    ca_.Bind(&block3, &tmp10, &tmp11);
    TNode<BoolT> tmp12;
    USE(tmp12);
    tmp12 = FromConstexpr6ATbool16ATconstexpr_bool_167(state_, false);
    ca_.Goto(&block1, tmp10, tmp11, tmp12);
  }

  if (block2.is_used()) {
    TNode<Context> tmp13;
    TNode<Object> tmp14;
    TNode<JSArray> tmp15;
    ca_.Bind(&block2, &tmp13, &tmp14, &tmp15);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2841);
    TNode<BoolT> tmp16;
    USE(tmp16);
    tmp16 = FromConstexpr6ATbool16ATconstexpr_bool_167(state_, true);
    ca_.Goto(&block1, tmp13, tmp14, tmp16);
  }

  if (block1.is_used()) {
    TNode<Context> tmp17;
    TNode<Object> tmp18;
    TNode<BoolT> tmp19;
    ca_.Bind(&block1, &tmp17, &tmp18, &tmp19);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3476);
    ca_.Goto(&block6, tmp17, tmp18, tmp19);
  }

    TNode<Context> tmp20;
    TNode<Object> tmp21;
    TNode<BoolT> tmp22;
    ca_.Bind(&block6, &tmp20, &tmp21, &tmp22);
  return TNode<BoolT>{tmp22};
}

TNode<BoolT> Is41ATFastJSArrayForReadWithNoCustomIteration20UT5ATSmi10HeapObject_1482(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<Object> p_o) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Context, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, Object> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, Object, JSArray> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, JSArray> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, BoolT> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, BoolT> block6(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_context, p_o);

  if (block0.is_used()) {
    TNode<Context> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2840);
    TNode<JSArray> tmp2;
    USE(tmp2);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp2 = Cast41ATFastJSArrayForReadWithNoCustomIteration_1526(state_, TNode<Context>{tmp0}, TNode<Object>{tmp1}, &label0);
    ca_.Goto(&block4, tmp0, tmp1, tmp1, tmp2);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block5, tmp0, tmp1, tmp1);
    }
  }

  if (block5.is_used()) {
    TNode<Context> tmp3;
    TNode<Object> tmp4;
    TNode<Object> tmp5;
    ca_.Bind(&block5, &tmp3, &tmp4, &tmp5);
    ca_.Goto(&block3, tmp3, tmp4);
  }

  if (block4.is_used()) {
    TNode<Context> tmp6;
    TNode<Object> tmp7;
    TNode<Object> tmp8;
    TNode<JSArray> tmp9;
    ca_.Bind(&block4, &tmp6, &tmp7, &tmp8, &tmp9);
    ca_.Goto(&block2, tmp6, tmp7, tmp9);
  }

  if (block3.is_used()) {
    TNode<Context> tmp10;
    TNode<Object> tmp11;
    ca_.Bind(&block3, &tmp10, &tmp11);
    TNode<BoolT> tmp12;
    USE(tmp12);
    tmp12 = FromConstexpr6ATbool16ATconstexpr_bool_167(state_, false);
    ca_.Goto(&block1, tmp10, tmp11, tmp12);
  }

  if (block2.is_used()) {
    TNode<Context> tmp13;
    TNode<Object> tmp14;
    TNode<JSArray> tmp15;
    ca_.Bind(&block2, &tmp13, &tmp14, &tmp15);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2841);
    TNode<BoolT> tmp16;
    USE(tmp16);
    tmp16 = FromConstexpr6ATbool16ATconstexpr_bool_167(state_, true);
    ca_.Goto(&block1, tmp13, tmp14, tmp16);
  }

  if (block1.is_used()) {
    TNode<Context> tmp17;
    TNode<Object> tmp18;
    TNode<BoolT> tmp19;
    ca_.Bind(&block1, &tmp17, &tmp18, &tmp19);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3482);
    ca_.Goto(&block6, tmp17, tmp18, tmp19);
  }

    TNode<Context> tmp20;
    TNode<Object> tmp21;
    TNode<BoolT> tmp22;
    ca_.Bind(&block6, &tmp20, &tmp21, &tmp22);
  return TNode<BoolT>{tmp22};
}

TNode<Float64T> Convert9ATfloat6417ATconstexpr_int31_1483(compiler::CodeAssemblerState* state_, int31_t p_i) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Float64T> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Float64T> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0);

  if (block0.is_used()) {
    ca_.Bind(&block0);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2706);
    TNode<Float64T> tmp0;
    USE(tmp0);
    tmp0 = FromConstexpr9ATfloat6417ATconstexpr_int31_165(state_, p_i);
    ca_.Goto(&block1, tmp0);
  }

  if (block1.is_used()) {
    TNode<Float64T> tmp1;
    ca_.Bind(&block1, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 3576);
    ca_.Goto(&block2, tmp1);
  }

    TNode<Float64T> tmp2;
    ca_.Bind(&block2, &tmp2);
  return TNode<Float64T>{tmp2};
}

TNode<JSArray> Cast41ATFastJSArrayForReadWithNoCustomIteration_1526(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError) {
  compiler::CodeAssembler ca_(state_);
  compiler::CodeAssemblerParameterizedLabel<Context, Object> block0(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, Object> block4(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, Object, HeapObject> block3(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, HeapObject> block6(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, HeapObject, JSArray> block5(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, JSArray> block2(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<> block1(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
  compiler::CodeAssemblerParameterizedLabel<Context, Object, JSArray> block7(&ca_, compiler::CodeAssemblerLabel::kNonDeferred);
    ca_.Goto(&block0, p_context, p_o);

  if (block0.is_used()) {
    TNode<Context> tmp0;
    TNode<Object> tmp1;
    ca_.Bind(&block0, &tmp0, &tmp1);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2068);
    TNode<HeapObject> tmp2;
    USE(tmp2);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp2 = CodeStubAssembler(state_).TaggedToHeapObject(TNode<Object>{tmp1}, &label0);
    ca_.Goto(&block3, tmp0, tmp1, tmp1, tmp2);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block4, tmp0, tmp1, tmp1);
    }
  }

  if (block4.is_used()) {
    TNode<Context> tmp3;
    TNode<Object> tmp4;
    TNode<Object> tmp5;
    ca_.Bind(&block4, &tmp3, &tmp4, &tmp5);
    ca_.Goto(&block1);
  }

  if (block3.is_used()) {
    TNode<Context> tmp6;
    TNode<Object> tmp7;
    TNode<Object> tmp8;
    TNode<HeapObject> tmp9;
    ca_.Bind(&block3, &tmp6, &tmp7, &tmp8, &tmp9);
    TNode<JSArray> tmp10;
    USE(tmp10);
    compiler::CodeAssemblerLabel label0(&ca_);
    tmp10 = Cast41ATFastJSArrayForReadWithNoCustomIteration_141(state_, TNode<Context>{tmp6}, TNode<HeapObject>{tmp9}, &label0);
    ca_.Goto(&block5, tmp6, tmp7, tmp9, tmp10);
    if (label0.is_used()) {
      ca_.Bind(&label0);
      ca_.Goto(&block6, tmp6, tmp7, tmp9);
    }
  }

  if (block6.is_used()) {
    TNode<Context> tmp11;
    TNode<Object> tmp12;
    TNode<HeapObject> tmp13;
    ca_.Bind(&block6, &tmp11, &tmp12, &tmp13);
    ca_.Goto(&block1);
  }

  if (block5.is_used()) {
    TNode<Context> tmp14;
    TNode<Object> tmp15;
    TNode<HeapObject> tmp16;
    TNode<JSArray> tmp17;
    ca_.Bind(&block5, &tmp14, &tmp15, &tmp16, &tmp17);
    ca_.Goto(&block2, tmp14, tmp15, tmp17);
  }

  if (block2.is_used()) {
    TNode<Context> tmp18;
    TNode<Object> tmp19;
    TNode<JSArray> tmp20;
    ca_.Bind(&block2, &tmp18, &tmp19, &tmp20);
    ca_.SetSourcePosition("../../src/builtins/base.tq", 2840);
    ca_.Goto(&block7, tmp18, tmp19, tmp20);
  }

  if (block1.is_used()) {
    ca_.Bind(&block1);
    ca_.Goto(label_CastError);
  }

    TNode<Context> tmp21;
    TNode<Object> tmp22;
    TNode<JSArray> tmp23;
    ca_.Bind(&block7, &tmp21, &tmp22, &tmp23);
  return TNode<JSArray>{tmp23};
}

}  // namespace internal
}  // namespace v8

