#ifndef V8_GEN_TORQUE_GENERATED_SRC_BUILTINS_BASE_TQ_H_
#define V8_GEN_TORQUE_GENERATED_SRC_BUILTINS_BASE_TQ_H_

#include "src/compiler/code-assembler.h"
#include "src/codegen/code-stub-assembler.h"
#include "src/utils/utils.h"
#include "torque-generated/field-offsets-tq.h"
#include "torque-generated/csa-types-tq.h"

namespace v8 {
namespace internal {

TNode<JSObject> NewJSObject_55(compiler::CodeAssemblerState* state_, TNode<Context> p_context);
TNode<Map> GetDerivedMap_56(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<JSFunction> p_target, TNode<JSReceiver> p_newTarget);
TNode<JSObject> AllocateFastOrSlowJSObjectFromMap_57(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<Map> p_map);
TNode<JSProxyRevocableResult> NewJSProxyRevocableResult_58(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<JSProxy> p_proxy, TNode<JSFunction> p_revoke);
TNode<JSArray> NewJSArray_59(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<Map> p_map, TNode<FixedArrayBase> p_elements);
TNode<JSArray> NewJSArray_60(compiler::CodeAssemblerState* state_, TNode<Context> p_context);
  TNode<UintPtrT> kSmiMax_61(compiler::CodeAssemblerState* state_);
  TNode<Oddball> TheHole_62(compiler::CodeAssemblerState* state_);
  TNode<Oddball> Null_63(compiler::CodeAssemblerState* state_);
  TNode<Oddball> Undefined_64(compiler::CodeAssemblerState* state_);
  TNode<Oddball> True_65(compiler::CodeAssemblerState* state_);
  TNode<Oddball> False_66(compiler::CodeAssemblerState* state_);
  TNode<String> kEmptyString_67(compiler::CodeAssemblerState* state_);
  TNode<String> kLengthString_68(compiler::CodeAssemblerState* state_);
  TNode<HeapNumber> kNaN_69(compiler::CodeAssemblerState* state_);
int31_t GetStartOfCaptureIndex_70(compiler::CodeAssemblerState* state_, int31_t p_captureIndex);
TNode<Object> ToPrimitiveDefault_71(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<Object> p_v);
TNode<BoolT> ElementsKindNotEqual_72(compiler::CodeAssemblerState* state_, TNode<Int32T> p_k1, TNode<Int32T> p_k2);
TNode<BoolT> IsNumberEqual_73(compiler::CodeAssemblerState* state_, TNode<Number> p_a, TNode<Number> p_b);
TNode<BoolT> IsNumberNotEqual_74(compiler::CodeAssemblerState* state_, TNode<Number> p_a, TNode<Number> p_b);
TNode<BoolT> NumberIsLessThan_75(compiler::CodeAssemblerState* state_, TNode<Number> p_a, TNode<Number> p_b);
TNode<BoolT> NumberIsLessThanOrEqual_76(compiler::CodeAssemblerState* state_, TNode<Number> p_a, TNode<Number> p_b);
TNode<BoolT> NumberIsGreaterThan_77(compiler::CodeAssemblerState* state_, TNode<Number> p_a, TNode<Number> p_b);
TNode<BoolT> NumberIsGreaterThanOrEqual_78(compiler::CodeAssemblerState* state_, TNode<Number> p_a, TNode<Number> p_b);
TNode<BoolT> Float64IsNaN_79(compiler::CodeAssemblerState* state_, TNode<Float64T> p_n);
TNode<Number> Min_80(compiler::CodeAssemblerState* state_, TNode<Number> p_x, TNode<Number> p_y);
TNode<Number> Max_81(compiler::CodeAssemblerState* state_, TNode<Number> p_x, TNode<Number> p_y);
TNode<String> StringAdd_82(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<String> p_a, TNode<String> p_b);
TNode<Smi> Cast5ATSmi_83(compiler::CodeAssemblerState* state_, TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
TNode<Smi> Cast13ATPositiveSmi_84(compiler::CodeAssemblerState* state_, TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
TNode<Number> Cast20UT5ATSmi10HeapNumber_85(compiler::CodeAssemblerState* state_, TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
TNode<Oddball> Cast11ATUndefined_86(compiler::CodeAssemblerState* state_, TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
TNode<Numeric> Cast29UT8ATBigInt5ATSmi10HeapNumber_87(compiler::CodeAssemblerState* state_, TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
TNode<Oddball> Cast9ATTheHole_88(compiler::CodeAssemblerState* state_, TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
TNode<Oddball> Cast9ATTheHole_89(compiler::CodeAssemblerState* state_, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
TNode<Oddball> Cast6ATTrue_90(compiler::CodeAssemblerState* state_, TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
TNode<Oddball> Cast6ATTrue_91(compiler::CodeAssemblerState* state_, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
TNode<Oddball> Cast7ATFalse_92(compiler::CodeAssemblerState* state_, TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
TNode<Oddball> Cast7ATFalse_93(compiler::CodeAssemblerState* state_, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
TNode<Oddball> Cast17UT7ATFalse6ATTrue_94(compiler::CodeAssemblerState* state_, TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
TNode<Oddball> Cast17UT7ATFalse6ATTrue_95(compiler::CodeAssemblerState* state_, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
TNode<Object> Cast78UT8ATBigInt7ATFalse6ATNull5ATSmi6ATTrue11ATUndefined10HeapNumber6String6Symbol_96(compiler::CodeAssemblerState* state_, TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
TNode<Object> Cast90UT8ATBigInt7ATFalse6ATNull5ATSmi6ATTrue11ATUndefined10HeapNumber10JSReceiver6String6Symbol_97(compiler::CodeAssemblerState* state_, TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
TNode<Object> Cast100UT8ATBigInt7ATFalse6ATNull5ATSmi9ATTheHole6ATTrue11ATUndefined10HeapNumber10JSReceiver6String6Symbol_98(compiler::CodeAssemblerState* state_, TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
TNode<Object> Cast30UT5ATSmi9ATTheHole10HeapNumber_99(compiler::CodeAssemblerState* state_, TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
TNode<HeapObject> Cast10HeapObject_100(compiler::CodeAssemblerState* state_, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label__CastError);
TNode<Oddball> Cast6ATNull_101(compiler::CodeAssemblerState* state_, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
TNode<Oddball> Cast11ATUndefined_102(compiler::CodeAssemblerState* state_, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
TNode<FixedArray> Cast10FixedArray_103(compiler::CodeAssemblerState* state_, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
TNode<FixedDoubleArray> Cast16FixedDoubleArray_104(compiler::CodeAssemblerState* state_, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
TNode<FixedArray> Cast25ATSloppyArgumentsElements_105(compiler::CodeAssemblerState* state_, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
TNode<JSDataView> Cast10JSDataView_106(compiler::CodeAssemblerState* state_, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
TNode<JSProxy> Cast7JSProxy_107(compiler::CodeAssemblerState* state_, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
TNode<JSStringIterator> Cast16JSStringIterator_108(compiler::CodeAssemblerState* state_, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
TNode<JSTypedArray> Cast12JSTypedArray_109(compiler::CodeAssemblerState* state_, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
TNode<JSTypedArray> Cast12JSTypedArray_110(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
TNode<JSReceiver> Cast71UT19ATCallableApiObject17ATCallableJSProxy15JSBoundFunction10JSFunction_111(compiler::CodeAssemblerState* state_, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
TNode<HeapObject> Cast84UT19ATCallableApiObject17ATCallableJSProxy11ATUndefined15JSBoundFunction10JSFunction_112(compiler::CodeAssemblerState* state_, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
TNode<JSArray> Cast7JSArray_113(compiler::CodeAssemblerState* state_, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
TNode<JSArrayBuffer> Cast13JSArrayBuffer_114(compiler::CodeAssemblerState* state_, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
TNode<Context> Cast7Context_115(compiler::CodeAssemblerState* state_, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
TNode<NativeContext> Cast15ATNativeContext_116(compiler::CodeAssemblerState* state_, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
TNode<JSObject> Cast8JSObject_117(compiler::CodeAssemblerState* state_, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
TNode<NumberDictionary> Cast18ATNumberDictionary_118(compiler::CodeAssemblerState* state_, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
TNode<String> Cast6String_119(compiler::CodeAssemblerState* state_, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
TNode<Oddball> Cast7Oddball_120(compiler::CodeAssemblerState* state_, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
TNode<Symbol> Cast6Symbol_121(compiler::CodeAssemblerState* state_, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
TNode<Symbol> Cast14ATPublicSymbol_122(compiler::CodeAssemblerState* state_, TNode<Symbol> p_o, compiler::CodeAssemblerLabel* label_CastError);
TNode<Symbol> Cast15ATPrivateSymbol_123(compiler::CodeAssemblerState* state_, TNode<Symbol> p_o, compiler::CodeAssemblerLabel* label_CastError);
TNode<Symbol> Cast14ATPublicSymbol_124(compiler::CodeAssemblerState* state_, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
TNode<Symbol> Cast15ATPrivateSymbol_125(compiler::CodeAssemblerState* state_, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
TNode<String> Cast14ATDirectString_126(compiler::CodeAssemblerState* state_, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
TNode<JSReceiver> Cast13ATConstructor_127(compiler::CodeAssemblerState* state_, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
TNode<HeapNumber> Cast10HeapNumber_128(compiler::CodeAssemblerState* state_, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
TNode<BigInt> Cast8ATBigInt_129(compiler::CodeAssemblerState* state_, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
TNode<JSRegExp> Cast8JSRegExp_130(compiler::CodeAssemblerState* state_, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
TNode<JSRegExpResult> Cast20ATFastJSRegExpResult_131(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
TNode<Map> Cast3Map_132(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
TNode<FeedbackVector> Cast14FeedbackVector_133(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
TNode<JSPrimitiveWrapper> Cast18JSPrimitiveWrapper_134(compiler::CodeAssemblerState* state_, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
TNode<JSArgumentsObjectWithLength> Cast27JSArgumentsObjectWithLength_135(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
TNode<JSRegExp> Cast14ATFastJSRegExp_136(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
TNode<JSArray> Cast13ATFastJSArray_137(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
TNode<JSArray> Cast20ATFastJSArrayForRead_138(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
TNode<JSArray> Cast20ATFastJSArrayForCopy_139(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
TNode<JSArray> Cast34ATFastJSArrayWithNoCustomIteration_140(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
TNode<JSArray> Cast41ATFastJSArrayForReadWithNoCustomIteration_141(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
TNode<JSReceiver> Cast10JSReceiver_142(compiler::CodeAssemblerState* state_, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
TNode<JSFunction> Cast10JSFunction_143(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
TNode<DebugInfo> Cast9DebugInfo_144(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
TNode<FixedArray> Cast14ATCoverageInfo_145(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
TNode<HeapObject> Cast21UT6ATNull10JSReceiver_146(compiler::CodeAssemblerState* state_, TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
TNode<Int32T> FromConstexpr7ATint3117ATconstexpr_int31_147(compiler::CodeAssemblerState* state_, int31_t p_i);
TNode<Int32T> FromConstexpr7ATint3217ATconstexpr_int31_148(compiler::CodeAssemblerState* state_, int31_t p_i);
TNode<Int32T> FromConstexpr7ATint3217ATconstexpr_int32_149(compiler::CodeAssemblerState* state_, int32_t p_i);
TNode<IntPtrT> FromConstexpr8ATintptr17ATconstexpr_int31_150(compiler::CodeAssemblerState* state_, int31_t p_i);
TNode<IntPtrT> FromConstexpr8ATintptr17ATconstexpr_int32_151(compiler::CodeAssemblerState* state_, int32_t p_i);
TNode<IntPtrT> FromConstexpr8ATintptr18ATconstexpr_intptr_152(compiler::CodeAssemblerState* state_, intptr_t p_i);
TNode<UintPtrT> FromConstexpr9ATuintptr19ATconstexpr_uintptr_153(compiler::CodeAssemblerState* state_, uintptr_t p_i);
TNode<Smi> FromConstexpr5ATSmi17ATconstexpr_int31_154(compiler::CodeAssemblerState* state_, int31_t p_i);
TNode<Smi> FromConstexpr13ATPositiveSmi17ATconstexpr_int31_155(compiler::CodeAssemblerState* state_, int31_t p_i);
TNode<String> FromConstexpr6String18ATconstexpr_string_156(compiler::CodeAssemblerState* state_, const char* p_s);
TNode<Number> FromConstexpr20UT5ATSmi10HeapNumber18ATconstexpr_uint32_157(compiler::CodeAssemblerState* state_, uint32_t p_i);
TNode<Number> FromConstexpr20UT5ATSmi10HeapNumber17ATconstexpr_int32_158(compiler::CodeAssemblerState* state_, int32_t p_i);
TNode<Number> FromConstexpr20UT5ATSmi10HeapNumber19ATconstexpr_float64_159(compiler::CodeAssemblerState* state_, double p_f);
TNode<Number> FromConstexpr20UT5ATSmi10HeapNumber17ATconstexpr_int31_160(compiler::CodeAssemblerState* state_, int31_t p_i);
TNode<Number> FromConstexpr20UT5ATSmi10HeapNumber15ATconstexpr_Smi_161(compiler::CodeAssemblerState* state_, Smi p_s);
TNode<Smi> FromConstexpr5ATSmi15ATconstexpr_Smi_162(compiler::CodeAssemblerState* state_, Smi p_s);
TNode<Uint32T> FromConstexpr8ATuint3217ATconstexpr_int31_163(compiler::CodeAssemblerState* state_, int31_t p_i);
TNode<UintPtrT> FromConstexpr9ATuintptr17ATconstexpr_int31_164(compiler::CodeAssemblerState* state_, int31_t p_i);
TNode<Float64T> FromConstexpr9ATfloat6417ATconstexpr_int31_165(compiler::CodeAssemblerState* state_, int31_t p_i);
TNode<Float64T> FromConstexpr9ATfloat6419ATconstexpr_float64_166(compiler::CodeAssemblerState* state_, double p_i);
TNode<BoolT> FromConstexpr6ATbool16ATconstexpr_bool_167(compiler::CodeAssemblerState* state_, bool p_b);
TNode<Smi> FromConstexpr14ATLanguageMode24ATconstexpr_LanguageMode_168(compiler::CodeAssemblerState* state_, LanguageMode p_m);
TNode<Int32T> FromConstexpr14ATElementsKind24ATconstexpr_ElementsKind_169(compiler::CodeAssemblerState* state_, ElementsKind p_e);
TNode<Object> FromConstexpr20UT5ATSmi10HeapObject18ATconstexpr_string_170(compiler::CodeAssemblerState* state_, const char* p_s);
TNode<Object> FromConstexpr90UT8ATBigInt7ATFalse6ATNull5ATSmi6ATTrue11ATUndefined10HeapNumber10JSReceiver6String6Symbol18ATconstexpr_string_171(compiler::CodeAssemblerState* state_, const char* p_s);
TNode<IntPtrT> FromConstexpr19ATNativeContextSlot29ATconstexpr_NativeContextSlot_172(compiler::CodeAssemblerState* state_, int32_t p_c);
TNode<IntPtrT> FromConstexpr13ATContextSlot23ATconstexpr_ContextSlot_173(compiler::CodeAssemblerState* state_, int32_t p_c);
TNode<Int32T> Convert7ATint3214ATElementsKind_174(compiler::CodeAssemblerState* state_, TNode<Int32T> p_elementsKind);
TNode<Number> Convert20UT5ATSmi10HeapNumber7ATint32_175(compiler::CodeAssemblerState* state_, TNode<Int32T> p_i);
TNode<IntPtrT> Convert8ATintptr7ATint32_176(compiler::CodeAssemblerState* state_, TNode<Int32T> p_i);
TNode<IntPtrT> Convert8ATintptr8ATuint32_177(compiler::CodeAssemblerState* state_, TNode<Uint32T> p_i);
TNode<Smi> Convert5ATSmi7ATint32_178(compiler::CodeAssemblerState* state_, TNode<Int32T> p_i);
TNode<Number> Convert20UT5ATSmi10HeapNumber8ATuint32_179(compiler::CodeAssemblerState* state_, TNode<Uint32T> p_ui);
TNode<Smi> Convert5ATSmi8ATuint32_180(compiler::CodeAssemblerState* state_, TNode<Uint32T> p_ui);
TNode<UintPtrT> Convert9ATuintptr8ATuint32_181(compiler::CodeAssemblerState* state_, TNode<Uint32T> p_ui);
TNode<Int32T> Convert7ATint327ATuint8_182(compiler::CodeAssemblerState* state_, TNode<Uint8T> p_i);
TNode<Int32T> Convert7ATint328ATuint16_183(compiler::CodeAssemblerState* state_, TNode<Uint16T> p_i);
TNode<Int32T> Convert7ATint328ATuint31_184(compiler::CodeAssemblerState* state_, TNode<Uint32T> p_i);
TNode<Int32T> Convert7ATint328ATintptr_185(compiler::CodeAssemblerState* state_, TNode<IntPtrT> p_i);
TNode<Smi> Convert5ATSmi8ATintptr_186(compiler::CodeAssemblerState* state_, TNode<IntPtrT> p_i);
TNode<Uint32T> Convert8ATuint329ATuintptr_187(compiler::CodeAssemblerState* state_, TNode<UintPtrT> p_ui);
TNode<IntPtrT> Convert8ATintptr5ATSmi_188(compiler::CodeAssemblerState* state_, TNode<Smi> p_s);
TNode<UintPtrT> Convert9ATuintptr13ATPositiveSmi_189(compiler::CodeAssemblerState* state_, TNode<Smi> p_ps);
TNode<IntPtrT> Convert8ATintptr9ATuintptr_190(compiler::CodeAssemblerState* state_, TNode<UintPtrT> p_ui);
TNode<Smi> Convert13ATPositiveSmi8ATintptr_191(compiler::CodeAssemblerState* state_, TNode<IntPtrT> p_i);
TNode<Smi> Convert13ATPositiveSmi9ATuintptr_192(compiler::CodeAssemblerState* state_, TNode<UintPtrT> p_ui, compiler::CodeAssemblerLabel* label_IfOverflow);
TNode<Smi> Convert13ATPositiveSmi8ATintptr_193(compiler::CodeAssemblerState* state_, TNode<IntPtrT> p_i, compiler::CodeAssemblerLabel* label_IfOverflow);
TNode<Int32T> Convert7ATint325ATSmi_194(compiler::CodeAssemblerState* state_, TNode<Smi> p_s);
TNode<Float64T> Convert9ATfloat6410HeapNumber_195(compiler::CodeAssemblerState* state_, TNode<HeapNumber> p_h);
TNode<Float64T> Convert9ATfloat6420UT5ATSmi10HeapNumber_196(compiler::CodeAssemblerState* state_, TNode<Number> p_n);
TNode<UintPtrT> Convert9ATuintptr20UT5ATSmi10HeapNumber_197(compiler::CodeAssemblerState* state_, TNode<Number> p_n);
TNode<Float64T> Convert9ATfloat649ATfloat32_198(compiler::CodeAssemblerState* state_, TNode<Float32T> p_f);
TNode<Float32T> Convert9ATfloat329ATfloat64_199(compiler::CodeAssemblerState* state_, TNode<Float64T> p_f);
TNode<Float32T> Convert9ATfloat3220UT5ATSmi10HeapNumber_200(compiler::CodeAssemblerState* state_, TNode<Number> p_n);
TNode<Number> Convert20UT5ATSmi10HeapNumber9ATfloat64_201(compiler::CodeAssemblerState* state_, TNode<Float64T> p_d);
TNode<Float64T> Convert9ATfloat649ATuintptr_202(compiler::CodeAssemblerState* state_, TNode<UintPtrT> p_ui);
TNode<Number> Convert20UT5ATSmi10HeapNumber9ATuintptr_203(compiler::CodeAssemblerState* state_, TNode<UintPtrT> p_ui);
TNode<UintPtrT> Convert9ATuintptr9ATfloat64_204(compiler::CodeAssemblerState* state_, TNode<Float64T> p_d);
TNode<UintPtrT> Convert9ATuintptr8ATintptr_205(compiler::CodeAssemblerState* state_, TNode<IntPtrT> p_i);
TNode<UintPtrT> Convert9ATuintptr8ATRawPtr_206(compiler::CodeAssemblerState* state_, TNode<RawPtrT> p_r);
TNode<IntPtrT> Convert8ATintptr8ATRawPtr_207(compiler::CodeAssemblerState* state_, TNode<RawPtrT> p_r);
TNode<BInt> Convert6ATbint7ATint32_208(compiler::CodeAssemblerState* state_, TNode<Int32T> p_v);
TNode<BInt> Convert6ATbint8ATintptr_209(compiler::CodeAssemblerState* state_, TNode<IntPtrT> p_v);
TNode<BInt> Convert6ATbint5ATSmi_210(compiler::CodeAssemblerState* state_, TNode<Smi> p_v);
  TNode<Map> kFixedArrayMap_211(compiler::CodeAssemblerState* state_);
  TNode<Map> kCOWMap_212(compiler::CodeAssemblerState* state_);
  TNode<ByteArray> kEmptyByteArray_213(compiler::CodeAssemblerState* state_);
  TNode<FixedArray> kEmptyFixedArray_214(compiler::CodeAssemblerState* state_);
void StoreFastJSArrayLength_215(compiler::CodeAssemblerState* state_, TNode<JSArray> p_array, TNode<Smi> p_length);
void StoreFixedDoubleArrayDirect_216(compiler::CodeAssemblerState* state_, TNode<FixedDoubleArray> p_a, TNode<Smi> p_i, TNode<Number> p_v);
void StoreFixedArrayDirect_217(compiler::CodeAssemblerState* state_, TNode<FixedArray> p_a, TNode<Smi> p_i, TNode<Object> p_v);
TNode<Int32T> FastHoleyElementsKind_218(compiler::CodeAssemblerState* state_, TNode<Int32T> p_kind);
TNode<Int32T> AllowDoubleElements_219(compiler::CodeAssemblerState* state_, TNode<Int32T> p_kind);
TNode<Int32T> AllowNonNumberElements_220(compiler::CodeAssemblerState* state_, TNode<Int32T> p_kind);
TNode<JSFunction> GetObjectFunction_221(compiler::CodeAssemblerState* state_, TNode<Context> p_context);
TNode<JSReceiver> GetArrayBufferFunction_222(compiler::CodeAssemblerState* state_, TNode<Context> p_context);
TNode<JSFunction> GetArrayBufferNoInitFunction_223(compiler::CodeAssemblerState* state_, TNode<Context> p_context);
TNode<Map> GetFastPackedElementsJSArrayMap_224(compiler::CodeAssemblerState* state_, TNode<Context> p_context);
TNode<Map> GetFastPackedSmiElementsJSArrayMap_225(compiler::CodeAssemblerState* state_, TNode<Context> p_context);
TNode<Map> GetProxyRevocableResultMap_226(compiler::CodeAssemblerState* state_, TNode<Context> p_context);
TNode<Map> GetIteratorResultMap_227(compiler::CodeAssemblerState* state_, TNode<Context> p_context);
TNode<Map> GetInitialStringIteratorMap_228(compiler::CodeAssemblerState* state_, TNode<Context> p_context);
TNode<JSReceiver> GetReflectApply_229(compiler::CodeAssemblerState* state_, TNode<Context> p_context);
TNode<RegExpMatchInfo> GetRegExpLastMatchInfo_230(compiler::CodeAssemblerState* state_, TNode<Context> p_context);
void TorqueMoveElementsSmi_231(compiler::CodeAssemblerState* state_, TNode<FixedArray> p_elements, TNode<IntPtrT> p_dstIndex, TNode<IntPtrT> p_srcIndex, TNode<IntPtrT> p_count);
void TorqueMoveElements_232(compiler::CodeAssemblerState* state_, TNode<FixedArray> p_elements, TNode<IntPtrT> p_dstIndex, TNode<IntPtrT> p_srcIndex, TNode<IntPtrT> p_count);
void TorqueMoveElements_233(compiler::CodeAssemblerState* state_, TNode<FixedDoubleArray> p_elements, TNode<IntPtrT> p_dstIndex, TNode<IntPtrT> p_srcIndex, TNode<IntPtrT> p_count);
void TorqueCopyElements_234(compiler::CodeAssemblerState* state_, TNode<FixedArray> p_dstElements, TNode<IntPtrT> p_dstIndex, TNode<FixedArray> p_srcElements, TNode<IntPtrT> p_srcIndex, TNode<IntPtrT> p_count);
void TorqueCopyElements_235(compiler::CodeAssemblerState* state_, TNode<FixedDoubleArray> p_dstElements, TNode<IntPtrT> p_dstIndex, TNode<FixedDoubleArray> p_srcElements, TNode<IntPtrT> p_srcIndex, TNode<IntPtrT> p_count);
TNode<Object> LoadElementNoHole10FixedArray_236(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<JSArray> p_a, TNode<Smi> p_index, compiler::CodeAssemblerLabel* label_IfHole);
TNode<Object> LoadElementNoHole16FixedDoubleArray_237(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<JSArray> p_a, TNode<Smi> p_index, compiler::CodeAssemblerLabel* label_IfHole);
TorqueStructFastJSArrayWitness NewFastJSArrayWitness_238(compiler::CodeAssemblerState* state_, TNode<JSArray> p_array);
TorqueStructFastJSArrayForReadWitness NewFastJSArrayForReadWitness_239(compiler::CodeAssemblerState* state_, TNode<JSArray> p_array);
TNode<BoolT> NumberIsNaN_240(compiler::CodeAssemblerState* state_, TNode<Number> p_number);
TNode<BoolT> IsForceSlowPath_241(compiler::CodeAssemblerState* state_);
TNode<BoolT> ToBoolean_242(compiler::CodeAssemblerState* state_, TNode<Object> p_obj);
TNode<Object> RequireObjectCoercible_243(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<Object> p_value, const char* p_name);
TNode<BoolT> SameValue_244(compiler::CodeAssemblerState* state_, TNode<Object> p_a, TNode<Object> p_b);
TNode<Number> ToIndex_245(compiler::CodeAssemblerState* state_, TNode<Object> p_input, TNode<Context> p_context, compiler::CodeAssemblerLabel* label_RangeError);
TNode<Number> GetLengthProperty_246(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<Object> p_o);
TNode<JSReceiver> GetMethod_247(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<Object> p_o, const char* p_name, compiler::CodeAssemblerLabel* label_IfNullOrUndefined);
TNode<BoolT> IsFastJSArray_248(compiler::CodeAssemblerState* state_, TNode<Object> p_o, TNode<Context> p_context);
void BranchIfFastJSArray_249(compiler::CodeAssemblerState* state_, TNode<Object> p_o, TNode<Context> p_context, compiler::CodeAssemblerLabel* label_True, compiler::CodeAssemblerLabel* label_False);
void BranchIfFastJSArrayForRead_250(compiler::CodeAssemblerState* state_, TNode<Object> p_o, TNode<Context> p_context, compiler::CodeAssemblerLabel* label_True, compiler::CodeAssemblerLabel* label_False);
TNode<BoolT> IsFastJSArrayWithNoCustomIteration_251(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<Object> p_o);
TNode<BoolT> IsFastJSArrayForReadWithNoCustomIteration_252(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<Object> p_o);
TNode<String> ToStringImpl_253(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<Object> p_o);
void VerifiedUnreachable_254(compiler::CodeAssemblerState* state_);
TNode<BoolT> Float64IsSomeInfinity_255(compiler::CodeAssemblerState* state_, TNode<Float64T> p_value);
TNode<BoolT> IsIntegerOrSomeInfinity_256(compiler::CodeAssemblerState* state_, TNode<Object> p_o);
TNode<Object> ReplaceTheHoleWithUndefined_257(compiler::CodeAssemblerState* state_, TNode<Object> p_o);
TNode<Map> LoadHeapObjectMap_497(compiler::CodeAssemblerState* state_, TNode<HeapObject> p_o);
void StoreHeapObjectMap_498(compiler::CodeAssemblerState* state_, TNode<HeapObject> p_o, TNode<Map> p_v);
TNode<Smi> LoadContextLength_499(compiler::CodeAssemblerState* state_, TNode<Context> p_o);
void StoreContextLength_500(compiler::CodeAssemblerState* state_, TNode<Context> p_o, TNode<Smi> p_v);
TNode<ScopeInfo> LoadContextScopeInfo_501(compiler::CodeAssemblerState* state_, TNode<Context> p_o);
void StoreContextScopeInfo_502(compiler::CodeAssemblerState* state_, TNode<Context> p_o, TNode<ScopeInfo> p_v);
TNode<Object> LoadContextPrevious_503(compiler::CodeAssemblerState* state_, TNode<Context> p_o);
void StoreContextPrevious_504(compiler::CodeAssemblerState* state_, TNode<Context> p_o, TNode<Object> p_v);
TNode<Object> LoadContextExtension_505(compiler::CodeAssemblerState* state_, TNode<Context> p_o);
void StoreContextExtension_506(compiler::CodeAssemblerState* state_, TNode<Context> p_o, TNode<Object> p_v);
TNode<Object> LoadContextNativeContext_507(compiler::CodeAssemblerState* state_, TNode<Context> p_o);
void StoreContextNativeContext_508(compiler::CodeAssemblerState* state_, TNode<Context> p_o, TNode<Object> p_v);
TNode<Object> LoadJSReceiverPropertiesOrHash_509(compiler::CodeAssemblerState* state_, TNode<JSReceiver> p_o);
void StoreJSReceiverPropertiesOrHash_510(compiler::CodeAssemblerState* state_, TNode<JSReceiver> p_o, TNode<Object> p_v);
TNode<Float64T> LoadHeapNumberValue_511(compiler::CodeAssemblerState* state_, TNode<HeapNumber> p_o);
void StoreHeapNumberValue_512(compiler::CodeAssemblerState* state_, TNode<HeapNumber> p_o, TNode<Float64T> p_v);
TNode<Uint32T> LoadNameHashField_513(compiler::CodeAssemblerState* state_, TNode<Name> p_o);
void StoreNameHashField_514(compiler::CodeAssemblerState* state_, TNode<Name> p_o, TNode<Uint32T> p_v);
TNode<Int32T> LoadStringLength_515(compiler::CodeAssemblerState* state_, TNode<String> p_o);
void StoreStringLength_516(compiler::CodeAssemblerState* state_, TNode<String> p_o, TNode<Int32T> p_v);
TNode<Int32T> LoadSymbolFlags_517(compiler::CodeAssemblerState* state_, TNode<Symbol> p_o);
void StoreSymbolFlags_518(compiler::CodeAssemblerState* state_, TNode<Symbol> p_o, TNode<Int32T> p_v);
TNode<Object> LoadSymbolName_519(compiler::CodeAssemblerState* state_, TNode<Symbol> p_o);
void StoreSymbolName_520(compiler::CodeAssemblerState* state_, TNode<Symbol> p_o, TNode<Object> p_v);
TNode<Float64T> LoadOddballToNumberRaw_521(compiler::CodeAssemblerState* state_, TNode<Oddball> p_o);
void StoreOddballToNumberRaw_522(compiler::CodeAssemblerState* state_, TNode<Oddball> p_o, TNode<Float64T> p_v);
TNode<String> LoadOddballToString_523(compiler::CodeAssemblerState* state_, TNode<Oddball> p_o);
void StoreOddballToString_524(compiler::CodeAssemblerState* state_, TNode<Oddball> p_o, TNode<String> p_v);
TNode<Number> LoadOddballToNumber_525(compiler::CodeAssemblerState* state_, TNode<Oddball> p_o);
void StoreOddballToNumber_526(compiler::CodeAssemblerState* state_, TNode<Oddball> p_o, TNode<Number> p_v);
TNode<String> LoadOddballTypeOf_527(compiler::CodeAssemblerState* state_, TNode<Oddball> p_o);
void StoreOddballTypeOf_528(compiler::CodeAssemblerState* state_, TNode<Oddball> p_o, TNode<String> p_v);
TNode<Smi> LoadOddballKind_529(compiler::CodeAssemblerState* state_, TNode<Oddball> p_o);
void StoreOddballKind_530(compiler::CodeAssemblerState* state_, TNode<Oddball> p_o, TNode<Smi> p_v);
TNode<Smi> LoadFixedArrayBaseLength_531(compiler::CodeAssemblerState* state_, TNode<FixedArrayBase> p_o);
void StoreFixedArrayBaseLength_532(compiler::CodeAssemblerState* state_, TNode<FixedArrayBase> p_o, TNode<Smi> p_v);
TNode<String> LoadConsStringFirst_533(compiler::CodeAssemblerState* state_, TNode<ConsString> p_o);
void StoreConsStringFirst_534(compiler::CodeAssemblerState* state_, TNode<ConsString> p_o, TNode<String> p_v);
TNode<String> LoadConsStringSecond_535(compiler::CodeAssemblerState* state_, TNode<ConsString> p_o);
void StoreConsStringSecond_536(compiler::CodeAssemblerState* state_, TNode<ConsString> p_o, TNode<String> p_v);
TNode<RawPtrT> LoadExternalStringResource_537(compiler::CodeAssemblerState* state_, TNode<ExternalString> p_o);
void StoreExternalStringResource_538(compiler::CodeAssemblerState* state_, TNode<ExternalString> p_o, TNode<RawPtrT> p_v);
TNode<RawPtrT> LoadExternalStringResourceData_539(compiler::CodeAssemblerState* state_, TNode<ExternalString> p_o);
void StoreExternalStringResourceData_540(compiler::CodeAssemblerState* state_, TNode<ExternalString> p_o, TNode<RawPtrT> p_v);
TNode<String> LoadSlicedStringParent_541(compiler::CodeAssemblerState* state_, TNode<SlicedString> p_o);
void StoreSlicedStringParent_542(compiler::CodeAssemblerState* state_, TNode<SlicedString> p_o, TNode<String> p_v);
TNode<Smi> LoadSlicedStringOffset_543(compiler::CodeAssemblerState* state_, TNode<SlicedString> p_o);
void StoreSlicedStringOffset_544(compiler::CodeAssemblerState* state_, TNode<SlicedString> p_o, TNode<Smi> p_v);
TNode<String> LoadThinStringActual_545(compiler::CodeAssemblerState* state_, TNode<ThinString> p_o);
void StoreThinStringActual_546(compiler::CodeAssemblerState* state_, TNode<ThinString> p_o, TNode<String> p_v);
TNode<Object> LoadTuple2Value1_547(compiler::CodeAssemblerState* state_, TNode<Tuple2> p_o);
void StoreTuple2Value1_548(compiler::CodeAssemblerState* state_, TNode<Tuple2> p_o, TNode<Object> p_v);
TNode<Object> LoadTuple2Value2_549(compiler::CodeAssemblerState* state_, TNode<Tuple2> p_o);
void StoreTuple2Value2_550(compiler::CodeAssemblerState* state_, TNode<Tuple2> p_o, TNode<Object> p_v);
TNode<Object> LoadTuple3Value3_551(compiler::CodeAssemblerState* state_, TNode<Tuple3> p_o);
void StoreTuple3Value3_552(compiler::CodeAssemblerState* state_, TNode<Tuple3> p_o, TNode<Object> p_v);
TNode<Smi> LoadWeakFixedArrayLength_553(compiler::CodeAssemblerState* state_, TNode<WeakFixedArray> p_o);
void StoreWeakFixedArrayLength_554(compiler::CodeAssemblerState* state_, TNode<WeakFixedArray> p_o, TNode<Smi> p_v);
TNode<Uint8T> LoadMapInstanceSizeInWords_555(compiler::CodeAssemblerState* state_, TNode<Map> p_o);
void StoreMapInstanceSizeInWords_556(compiler::CodeAssemblerState* state_, TNode<Map> p_o, TNode<Uint8T> p_v);
TNode<Uint8T> LoadMapInObjectPropertiesStartOrConstructorFunctionIndex_557(compiler::CodeAssemblerState* state_, TNode<Map> p_o);
void StoreMapInObjectPropertiesStartOrConstructorFunctionIndex_558(compiler::CodeAssemblerState* state_, TNode<Map> p_o, TNode<Uint8T> p_v);
TNode<Uint8T> LoadMapUsedOrUnusedInstanceSizeInWords_559(compiler::CodeAssemblerState* state_, TNode<Map> p_o);
void StoreMapUsedOrUnusedInstanceSizeInWords_560(compiler::CodeAssemblerState* state_, TNode<Map> p_o, TNode<Uint8T> p_v);
TNode<Uint8T> LoadMapVisitorId_561(compiler::CodeAssemblerState* state_, TNode<Map> p_o);
void StoreMapVisitorId_562(compiler::CodeAssemblerState* state_, TNode<Map> p_o, TNode<Uint8T> p_v);
TNode<Uint16T> LoadMapInstanceType_563(compiler::CodeAssemblerState* state_, TNode<Map> p_o);
void StoreMapInstanceType_564(compiler::CodeAssemblerState* state_, TNode<Map> p_o, TNode<Uint16T> p_v);
TNode<Uint8T> LoadMapBitField_565(compiler::CodeAssemblerState* state_, TNode<Map> p_o);
void StoreMapBitField_566(compiler::CodeAssemblerState* state_, TNode<Map> p_o, TNode<Uint8T> p_v);
TNode<Uint8T> LoadMapBitField2_567(compiler::CodeAssemblerState* state_, TNode<Map> p_o);
void StoreMapBitField2_568(compiler::CodeAssemblerState* state_, TNode<Map> p_o, TNode<Uint8T> p_v);
TNode<Uint32T> LoadMapBitField3_569(compiler::CodeAssemblerState* state_, TNode<Map> p_o);
void StoreMapBitField3_570(compiler::CodeAssemblerState* state_, TNode<Map> p_o, TNode<Uint32T> p_v);
TNode<Uint32T> LoadMapOptionalPadding_571(compiler::CodeAssemblerState* state_, TNode<Map> p_o);
void StoreMapOptionalPadding_572(compiler::CodeAssemblerState* state_, TNode<Map> p_o, TNode<Uint32T> p_v);
TNode<HeapObject> LoadMapPrototype_573(compiler::CodeAssemblerState* state_, TNode<Map> p_o);
void StoreMapPrototype_574(compiler::CodeAssemblerState* state_, TNode<Map> p_o, TNode<HeapObject> p_v);
TNode<Object> LoadMapConstructorOrBackPointer_575(compiler::CodeAssemblerState* state_, TNode<Map> p_o);
void StoreMapConstructorOrBackPointer_576(compiler::CodeAssemblerState* state_, TNode<Map> p_o, TNode<Object> p_v);
TNode<DescriptorArray> LoadMapInstanceDescriptors_577(compiler::CodeAssemblerState* state_, TNode<Map> p_o);
void StoreMapInstanceDescriptors_578(compiler::CodeAssemblerState* state_, TNode<Map> p_o, TNode<DescriptorArray> p_v);
TNode<LayoutDescriptor> LoadMapLayoutDescriptor_579(compiler::CodeAssemblerState* state_, TNode<Map> p_o);
void StoreMapLayoutDescriptor_580(compiler::CodeAssemblerState* state_, TNode<Map> p_o, TNode<LayoutDescriptor> p_v);
TNode<WeakFixedArray> LoadMapDependentCode_581(compiler::CodeAssemblerState* state_, TNode<Map> p_o);
void StoreMapDependentCode_582(compiler::CodeAssemblerState* state_, TNode<Map> p_o, TNode<WeakFixedArray> p_v);
TNode<Object> LoadMapPrototypeValidityCell_583(compiler::CodeAssemblerState* state_, TNode<Map> p_o);
void StoreMapPrototypeValidityCell_584(compiler::CodeAssemblerState* state_, TNode<Map> p_o, TNode<Object> p_v);
TNode<Object> LoadMapTransitionsOrPrototypeInfo_585(compiler::CodeAssemblerState* state_, TNode<Map> p_o);
void StoreMapTransitionsOrPrototypeInfo_586(compiler::CodeAssemblerState* state_, TNode<Map> p_o, TNode<Object> p_v);
TNode<FixedArray> LoadEnumCacheKeys_587(compiler::CodeAssemblerState* state_, TNode<EnumCache> p_o);
void StoreEnumCacheKeys_588(compiler::CodeAssemblerState* state_, TNode<EnumCache> p_o, TNode<FixedArray> p_v);
TNode<FixedArray> LoadEnumCacheIndices_589(compiler::CodeAssemblerState* state_, TNode<EnumCache> p_o);
void StoreEnumCacheIndices_590(compiler::CodeAssemblerState* state_, TNode<EnumCache> p_o, TNode<FixedArray> p_v);
TNode<ByteArray> LoadSourcePositionTableWithFrameCacheSourcePositionTable_591(compiler::CodeAssemblerState* state_, TNode<SourcePositionTableWithFrameCache> p_o);
void StoreSourcePositionTableWithFrameCacheSourcePositionTable_592(compiler::CodeAssemblerState* state_, TNode<SourcePositionTableWithFrameCache> p_o, TNode<ByteArray> p_v);
TNode<Object> LoadSourcePositionTableWithFrameCacheStackFrameCache_593(compiler::CodeAssemblerState* state_, TNode<SourcePositionTableWithFrameCache> p_o);
void StoreSourcePositionTableWithFrameCacheStackFrameCache_594(compiler::CodeAssemblerState* state_, TNode<SourcePositionTableWithFrameCache> p_o, TNode<Object> p_v);
TNode<Uint16T> LoadDescriptorArrayNumberOfAllDescriptors_595(compiler::CodeAssemblerState* state_, TNode<DescriptorArray> p_o);
void StoreDescriptorArrayNumberOfAllDescriptors_596(compiler::CodeAssemblerState* state_, TNode<DescriptorArray> p_o, TNode<Uint16T> p_v);
TNode<Uint16T> LoadDescriptorArrayNumberOfDescriptors_597(compiler::CodeAssemblerState* state_, TNode<DescriptorArray> p_o);
void StoreDescriptorArrayNumberOfDescriptors_598(compiler::CodeAssemblerState* state_, TNode<DescriptorArray> p_o, TNode<Uint16T> p_v);
TNode<Uint16T> LoadDescriptorArrayRawNumberOfMarkedDescriptors_599(compiler::CodeAssemblerState* state_, TNode<DescriptorArray> p_o);
void StoreDescriptorArrayRawNumberOfMarkedDescriptors_600(compiler::CodeAssemblerState* state_, TNode<DescriptorArray> p_o, TNode<Uint16T> p_v);
TNode<Uint16T> LoadDescriptorArrayFiller16Bits_601(compiler::CodeAssemblerState* state_, TNode<DescriptorArray> p_o);
void StoreDescriptorArrayFiller16Bits_602(compiler::CodeAssemblerState* state_, TNode<DescriptorArray> p_o, TNode<Uint16T> p_v);
TNode<EnumCache> LoadDescriptorArrayEnumCache_603(compiler::CodeAssemblerState* state_, TNode<DescriptorArray> p_o);
void StoreDescriptorArrayEnumCache_604(compiler::CodeAssemblerState* state_, TNode<DescriptorArray> p_o, TNode<EnumCache> p_v);
TNode<FixedArrayBase> LoadJSObjectElements_605(compiler::CodeAssemblerState* state_, TNode<JSObject> p_o);
void StoreJSObjectElements_606(compiler::CodeAssemblerState* state_, TNode<JSObject> p_o, TNode<FixedArrayBase> p_v);
TNode<SharedFunctionInfo> LoadJSFunctionSharedFunctionInfo_607(compiler::CodeAssemblerState* state_, TNode<JSFunction> p_o);
void StoreJSFunctionSharedFunctionInfo_608(compiler::CodeAssemblerState* state_, TNode<JSFunction> p_o, TNode<SharedFunctionInfo> p_v);
TNode<Context> LoadJSFunctionContext_609(compiler::CodeAssemblerState* state_, TNode<JSFunction> p_o);
void StoreJSFunctionContext_610(compiler::CodeAssemblerState* state_, TNode<JSFunction> p_o, TNode<Context> p_v);
TNode<FeedbackCell> LoadJSFunctionFeedbackCell_611(compiler::CodeAssemblerState* state_, TNode<JSFunction> p_o);
void StoreJSFunctionFeedbackCell_612(compiler::CodeAssemblerState* state_, TNode<JSFunction> p_o, TNode<FeedbackCell> p_v);
TNode<Code> LoadJSFunctionCode_613(compiler::CodeAssemblerState* state_, TNode<JSFunction> p_o);
void StoreJSFunctionCode_614(compiler::CodeAssemblerState* state_, TNode<JSFunction> p_o, TNode<Code> p_v);
TNode<HeapObject> LoadJSFunctionPrototypeOrInitialMap_615(compiler::CodeAssemblerState* state_, TNode<JSFunction> p_o);
void StoreJSFunctionPrototypeOrInitialMap_616(compiler::CodeAssemblerState* state_, TNode<JSFunction> p_o, TNode<HeapObject> p_v);
TNode<HeapObject> LoadJSProxyTarget_617(compiler::CodeAssemblerState* state_, TNode<JSProxy> p_o);
void StoreJSProxyTarget_618(compiler::CodeAssemblerState* state_, TNode<JSProxy> p_o, TNode<HeapObject> p_v);
TNode<HeapObject> LoadJSProxyHandler_619(compiler::CodeAssemblerState* state_, TNode<JSProxy> p_o);
void StoreJSProxyHandler_620(compiler::CodeAssemblerState* state_, TNode<JSProxy> p_o, TNode<HeapObject> p_v);
TNode<Object> LoadJSProxyRevocableResultProxy_621(compiler::CodeAssemblerState* state_, TNode<JSProxyRevocableResult> p_o);
void StoreJSProxyRevocableResultProxy_622(compiler::CodeAssemblerState* state_, TNode<JSProxyRevocableResult> p_o, TNode<Object> p_v);
TNode<Object> LoadJSProxyRevocableResultRevoke_623(compiler::CodeAssemblerState* state_, TNode<JSProxyRevocableResult> p_o);
void StoreJSProxyRevocableResultRevoke_624(compiler::CodeAssemblerState* state_, TNode<JSProxyRevocableResult> p_o, TNode<Object> p_v);
TNode<Object> LoadJSGlobalProxyNativeContext_625(compiler::CodeAssemblerState* state_, TNode<JSGlobalProxy> p_o);
void StoreJSGlobalProxyNativeContext_626(compiler::CodeAssemblerState* state_, TNode<JSGlobalProxy> p_o, TNode<Object> p_v);
TNode<Object> LoadJSPrimitiveWrapperValue_627(compiler::CodeAssemblerState* state_, TNode<JSPrimitiveWrapper> p_o);
void StoreJSPrimitiveWrapperValue_628(compiler::CodeAssemblerState* state_, TNode<JSPrimitiveWrapper> p_o, TNode<Object> p_v);
TNode<Object> LoadJSArgumentsObjectWithLengthLength_629(compiler::CodeAssemblerState* state_, TNode<JSArgumentsObjectWithLength> p_o);
void StoreJSArgumentsObjectWithLengthLength_630(compiler::CodeAssemblerState* state_, TNode<JSArgumentsObjectWithLength> p_o, TNode<Object> p_v);
TNode<Object> LoadJSSloppyArgumentsObjectCallee_631(compiler::CodeAssemblerState* state_, TNode<JSSloppyArgumentsObject> p_o);
void StoreJSSloppyArgumentsObjectCallee_632(compiler::CodeAssemblerState* state_, TNode<JSSloppyArgumentsObject> p_o, TNode<Object> p_v);
TNode<JSReceiver> LoadJSArrayIteratorIteratedObject_633(compiler::CodeAssemblerState* state_, TNode<JSArrayIterator> p_o);
void StoreJSArrayIteratorIteratedObject_634(compiler::CodeAssemblerState* state_, TNode<JSArrayIterator> p_o, TNode<JSReceiver> p_v);
TNode<Number> LoadJSArrayIteratorNextIndex_635(compiler::CodeAssemblerState* state_, TNode<JSArrayIterator> p_o);
void StoreJSArrayIteratorNextIndex_636(compiler::CodeAssemblerState* state_, TNode<JSArrayIterator> p_o, TNode<Number> p_v);
TNode<Smi> LoadJSArrayIteratorKind_637(compiler::CodeAssemblerState* state_, TNode<JSArrayIterator> p_o);
void StoreJSArrayIteratorKind_638(compiler::CodeAssemblerState* state_, TNode<JSArrayIterator> p_o, TNode<Smi> p_v);
TNode<Number> LoadJSArrayLength_639(compiler::CodeAssemblerState* state_, TNode<JSArray> p_o);
void StoreJSArrayLength_640(compiler::CodeAssemblerState* state_, TNode<JSArray> p_o, TNode<Number> p_v);
TNode<BoolT> _method_JSArray_IsEmpty(compiler::CodeAssemblerState* state_, TNode<JSArray> p_this);
TNode<Object> LoadCallHandlerInfoCallback_641(compiler::CodeAssemblerState* state_, TNode<CallHandlerInfo> p_o);
void StoreCallHandlerInfoCallback_642(compiler::CodeAssemblerState* state_, TNode<CallHandlerInfo> p_o, TNode<Object> p_v);
TNode<Object> LoadCallHandlerInfoJsCallback_643(compiler::CodeAssemblerState* state_, TNode<CallHandlerInfo> p_o);
void StoreCallHandlerInfoJsCallback_644(compiler::CodeAssemblerState* state_, TNode<CallHandlerInfo> p_o, TNode<Object> p_v);
TNode<Object> LoadCallHandlerInfoData_645(compiler::CodeAssemblerState* state_, TNode<CallHandlerInfo> p_o);
void StoreCallHandlerInfoData_646(compiler::CodeAssemblerState* state_, TNode<CallHandlerInfo> p_o, TNode<Object> p_v);
TNode<FixedArray> LoadModuleExports_647(compiler::CodeAssemblerState* state_, TNode<Module> p_o);
void StoreModuleExports_648(compiler::CodeAssemblerState* state_, TNode<Module> p_o, TNode<FixedArray> p_v);
TNode<Smi> LoadModuleHash_649(compiler::CodeAssemblerState* state_, TNode<Module> p_o);
void StoreModuleHash_650(compiler::CodeAssemblerState* state_, TNode<Module> p_o, TNode<Smi> p_v);
TNode<Smi> LoadModuleStatus_651(compiler::CodeAssemblerState* state_, TNode<Module> p_o);
void StoreModuleStatus_652(compiler::CodeAssemblerState* state_, TNode<Module> p_o, TNode<Smi> p_v);
TNode<HeapObject> LoadModuleModuleNamespace_653(compiler::CodeAssemblerState* state_, TNode<Module> p_o);
void StoreModuleModuleNamespace_654(compiler::CodeAssemblerState* state_, TNode<Module> p_o, TNode<HeapObject> p_v);
TNode<Object> LoadModuleException_655(compiler::CodeAssemblerState* state_, TNode<Module> p_o);
void StoreModuleException_656(compiler::CodeAssemblerState* state_, TNode<Module> p_o, TNode<Object> p_v);
TNode<HeapObject> LoadSourceTextModuleCode_657(compiler::CodeAssemblerState* state_, TNode<SourceTextModule> p_o);
void StoreSourceTextModuleCode_658(compiler::CodeAssemblerState* state_, TNode<SourceTextModule> p_o, TNode<HeapObject> p_v);
TNode<FixedArray> LoadSourceTextModuleRegularExports_659(compiler::CodeAssemblerState* state_, TNode<SourceTextModule> p_o);
void StoreSourceTextModuleRegularExports_660(compiler::CodeAssemblerState* state_, TNode<SourceTextModule> p_o, TNode<FixedArray> p_v);
TNode<FixedArray> LoadSourceTextModuleRegularImports_661(compiler::CodeAssemblerState* state_, TNode<SourceTextModule> p_o);
void StoreSourceTextModuleRegularImports_662(compiler::CodeAssemblerState* state_, TNode<SourceTextModule> p_o, TNode<FixedArray> p_v);
TNode<FixedArray> LoadSourceTextModuleRequestedModules_663(compiler::CodeAssemblerState* state_, TNode<SourceTextModule> p_o);
void StoreSourceTextModuleRequestedModules_664(compiler::CodeAssemblerState* state_, TNode<SourceTextModule> p_o, TNode<FixedArray> p_v);
TNode<Script> LoadSourceTextModuleScript_665(compiler::CodeAssemblerState* state_, TNode<SourceTextModule> p_o);
void StoreSourceTextModuleScript_666(compiler::CodeAssemblerState* state_, TNode<SourceTextModule> p_o, TNode<Script> p_v);
TNode<HeapObject> LoadSourceTextModuleImportMeta_667(compiler::CodeAssemblerState* state_, TNode<SourceTextModule> p_o);
void StoreSourceTextModuleImportMeta_668(compiler::CodeAssemblerState* state_, TNode<SourceTextModule> p_o, TNode<HeapObject> p_v);
TNode<ArrayList> LoadSourceTextModuleAsyncParentModules_669(compiler::CodeAssemblerState* state_, TNode<SourceTextModule> p_o);
void StoreSourceTextModuleAsyncParentModules_670(compiler::CodeAssemblerState* state_, TNode<SourceTextModule> p_o, TNode<ArrayList> p_v);
TNode<HeapObject> LoadSourceTextModuleTopLevelCapability_671(compiler::CodeAssemblerState* state_, TNode<SourceTextModule> p_o);
void StoreSourceTextModuleTopLevelCapability_672(compiler::CodeAssemblerState* state_, TNode<SourceTextModule> p_o, TNode<HeapObject> p_v);
TNode<Smi> LoadSourceTextModuleDfsIndex_673(compiler::CodeAssemblerState* state_, TNode<SourceTextModule> p_o);
void StoreSourceTextModuleDfsIndex_674(compiler::CodeAssemblerState* state_, TNode<SourceTextModule> p_o, TNode<Smi> p_v);
TNode<Smi> LoadSourceTextModuleDfsAncestorIndex_675(compiler::CodeAssemblerState* state_, TNode<SourceTextModule> p_o);
void StoreSourceTextModuleDfsAncestorIndex_676(compiler::CodeAssemblerState* state_, TNode<SourceTextModule> p_o, TNode<Smi> p_v);
TNode<Smi> LoadSourceTextModulePendingAsyncDependencies_677(compiler::CodeAssemblerState* state_, TNode<SourceTextModule> p_o);
void StoreSourceTextModulePendingAsyncDependencies_678(compiler::CodeAssemblerState* state_, TNode<SourceTextModule> p_o, TNode<Smi> p_v);
TNode<Smi> LoadSourceTextModuleFlags_679(compiler::CodeAssemblerState* state_, TNode<SourceTextModule> p_o);
void StoreSourceTextModuleFlags_680(compiler::CodeAssemblerState* state_, TNode<SourceTextModule> p_o, TNode<Smi> p_v);
TNode<String> LoadSyntheticModuleName_681(compiler::CodeAssemblerState* state_, TNode<SyntheticModule> p_o);
void StoreSyntheticModuleName_682(compiler::CodeAssemblerState* state_, TNode<SyntheticModule> p_o, TNode<String> p_v);
TNode<FixedArray> LoadSyntheticModuleExportNames_683(compiler::CodeAssemblerState* state_, TNode<SyntheticModule> p_o);
void StoreSyntheticModuleExportNames_684(compiler::CodeAssemblerState* state_, TNode<SyntheticModule> p_o, TNode<FixedArray> p_v);
TNode<Foreign> LoadSyntheticModuleEvaluationSteps_685(compiler::CodeAssemblerState* state_, TNode<SyntheticModule> p_o);
void StoreSyntheticModuleEvaluationSteps_686(compiler::CodeAssemblerState* state_, TNode<SyntheticModule> p_o, TNode<Foreign> p_v);
TNode<Module> LoadJSModuleNamespaceModule_687(compiler::CodeAssemblerState* state_, TNode<JSModuleNamespace> p_o);
void StoreJSModuleNamespaceModule_688(compiler::CodeAssemblerState* state_, TNode<JSModuleNamespace> p_o, TNode<Module> p_v);
TNode<Object> LoadJSWeakCollectionTable_689(compiler::CodeAssemblerState* state_, TNode<JSWeakCollection> p_o);
void StoreJSWeakCollectionTable_690(compiler::CodeAssemblerState* state_, TNode<JSWeakCollection> p_o, TNode<Object> p_v);
TNode<Object> LoadJSCollectionIteratorTable_691(compiler::CodeAssemblerState* state_, TNode<JSCollectionIterator> p_o);
void StoreJSCollectionIteratorTable_692(compiler::CodeAssemblerState* state_, TNode<JSCollectionIterator> p_o, TNode<Object> p_v);
TNode<Object> LoadJSCollectionIteratorIndex_693(compiler::CodeAssemblerState* state_, TNode<JSCollectionIterator> p_o);
void StoreJSCollectionIteratorIndex_694(compiler::CodeAssemblerState* state_, TNode<JSCollectionIterator> p_o, TNode<Object> p_v);
TNode<Smi> LoadJSMessageObjectMessageType_695(compiler::CodeAssemblerState* state_, TNode<JSMessageObject> p_o);
void StoreJSMessageObjectMessageType_696(compiler::CodeAssemblerState* state_, TNode<JSMessageObject> p_o, TNode<Smi> p_v);
TNode<Object> LoadJSMessageObjectArguments_697(compiler::CodeAssemblerState* state_, TNode<JSMessageObject> p_o);
void StoreJSMessageObjectArguments_698(compiler::CodeAssemblerState* state_, TNode<JSMessageObject> p_o, TNode<Object> p_v);
TNode<Script> LoadJSMessageObjectScript_699(compiler::CodeAssemblerState* state_, TNode<JSMessageObject> p_o);
void StoreJSMessageObjectScript_700(compiler::CodeAssemblerState* state_, TNode<JSMessageObject> p_o, TNode<Script> p_v);
TNode<Object> LoadJSMessageObjectStackFrames_701(compiler::CodeAssemblerState* state_, TNode<JSMessageObject> p_o);
void StoreJSMessageObjectStackFrames_702(compiler::CodeAssemblerState* state_, TNode<JSMessageObject> p_o, TNode<Object> p_v);
TNode<HeapObject> LoadJSMessageObjectSharedInfo_703(compiler::CodeAssemblerState* state_, TNode<JSMessageObject> p_o);
void StoreJSMessageObjectSharedInfo_704(compiler::CodeAssemblerState* state_, TNode<JSMessageObject> p_o, TNode<HeapObject> p_v);
TNode<Smi> LoadJSMessageObjectBytecodeOffset_705(compiler::CodeAssemblerState* state_, TNode<JSMessageObject> p_o);
void StoreJSMessageObjectBytecodeOffset_706(compiler::CodeAssemblerState* state_, TNode<JSMessageObject> p_o, TNode<Smi> p_v);
TNode<Smi> LoadJSMessageObjectStartPosition_707(compiler::CodeAssemblerState* state_, TNode<JSMessageObject> p_o);
void StoreJSMessageObjectStartPosition_708(compiler::CodeAssemblerState* state_, TNode<JSMessageObject> p_o, TNode<Smi> p_v);
TNode<Smi> LoadJSMessageObjectEndPosition_709(compiler::CodeAssemblerState* state_, TNode<JSMessageObject> p_o);
void StoreJSMessageObjectEndPosition_710(compiler::CodeAssemblerState* state_, TNode<JSMessageObject> p_o, TNode<Smi> p_v);
TNode<Smi> LoadJSMessageObjectErrorLevel_711(compiler::CodeAssemblerState* state_, TNode<JSMessageObject> p_o);
void StoreJSMessageObjectErrorLevel_712(compiler::CodeAssemblerState* state_, TNode<JSMessageObject> p_o, TNode<Smi> p_v);
TNode<Smi> LoadWeakArrayListCapacity_713(compiler::CodeAssemblerState* state_, TNode<WeakArrayList> p_o);
void StoreWeakArrayListCapacity_714(compiler::CodeAssemblerState* state_, TNode<WeakArrayList> p_o, TNode<Smi> p_v);
TNode<Smi> LoadWeakArrayListLength_715(compiler::CodeAssemblerState* state_, TNode<WeakArrayList> p_o);
void StoreWeakArrayListLength_716(compiler::CodeAssemblerState* state_, TNode<WeakArrayList> p_o, TNode<Smi> p_v);
TNode<HeapObject> LoadPrototypeInfoJsModuleNamespace_717(compiler::CodeAssemblerState* state_, TNode<PrototypeInfo> p_o);
void StorePrototypeInfoJsModuleNamespace_718(compiler::CodeAssemblerState* state_, TNode<PrototypeInfo> p_o, TNode<HeapObject> p_v);
TNode<Object> LoadPrototypeInfoPrototypeUsers_719(compiler::CodeAssemblerState* state_, TNode<PrototypeInfo> p_o);
void StorePrototypeInfoPrototypeUsers_720(compiler::CodeAssemblerState* state_, TNode<PrototypeInfo> p_o, TNode<Object> p_v);
TNode<Smi> LoadPrototypeInfoRegistrySlot_721(compiler::CodeAssemblerState* state_, TNode<PrototypeInfo> p_o);
void StorePrototypeInfoRegistrySlot_722(compiler::CodeAssemblerState* state_, TNode<PrototypeInfo> p_o, TNode<Smi> p_v);
TNode<Object> LoadPrototypeInfoValidityCell_723(compiler::CodeAssemblerState* state_, TNode<PrototypeInfo> p_o);
void StorePrototypeInfoValidityCell_724(compiler::CodeAssemblerState* state_, TNode<PrototypeInfo> p_o, TNode<Object> p_v);
TNode<HeapObject> LoadPrototypeInfoObjectCreateMap_725(compiler::CodeAssemblerState* state_, TNode<PrototypeInfo> p_o);
void StorePrototypeInfoObjectCreateMap_726(compiler::CodeAssemblerState* state_, TNode<PrototypeInfo> p_o, TNode<HeapObject> p_v);
TNode<Smi> LoadPrototypeInfoBitField_727(compiler::CodeAssemblerState* state_, TNode<PrototypeInfo> p_o);
void StorePrototypeInfoBitField_728(compiler::CodeAssemblerState* state_, TNode<PrototypeInfo> p_o, TNode<Smi> p_v);
TNode<Object> LoadScriptSource_729(compiler::CodeAssemblerState* state_, TNode<Script> p_o);
void StoreScriptSource_730(compiler::CodeAssemblerState* state_, TNode<Script> p_o, TNode<Object> p_v);
TNode<Object> LoadScriptName_731(compiler::CodeAssemblerState* state_, TNode<Script> p_o);
void StoreScriptName_732(compiler::CodeAssemblerState* state_, TNode<Script> p_o, TNode<Object> p_v);
TNode<Smi> LoadScriptLineOffset_733(compiler::CodeAssemblerState* state_, TNode<Script> p_o);
void StoreScriptLineOffset_734(compiler::CodeAssemblerState* state_, TNode<Script> p_o, TNode<Smi> p_v);
TNode<Smi> LoadScriptColumnOffset_735(compiler::CodeAssemblerState* state_, TNode<Script> p_o);
void StoreScriptColumnOffset_736(compiler::CodeAssemblerState* state_, TNode<Script> p_o, TNode<Smi> p_v);
TNode<Object> LoadScriptContext_737(compiler::CodeAssemblerState* state_, TNode<Script> p_o);
void StoreScriptContext_738(compiler::CodeAssemblerState* state_, TNode<Script> p_o, TNode<Object> p_v);
TNode<Smi> LoadScriptScriptType_739(compiler::CodeAssemblerState* state_, TNode<Script> p_o);
void StoreScriptScriptType_740(compiler::CodeAssemblerState* state_, TNode<Script> p_o, TNode<Smi> p_v);
TNode<Object> LoadScriptLineEnds_741(compiler::CodeAssemblerState* state_, TNode<Script> p_o);
void StoreScriptLineEnds_742(compiler::CodeAssemblerState* state_, TNode<Script> p_o, TNode<Object> p_v);
TNode<Smi> LoadScriptId_743(compiler::CodeAssemblerState* state_, TNode<Script> p_o);
void StoreScriptId_744(compiler::CodeAssemblerState* state_, TNode<Script> p_o, TNode<Smi> p_v);
TNode<Object> LoadScriptEvalFromSharedOrWrappedArguments_745(compiler::CodeAssemblerState* state_, TNode<Script> p_o);
void StoreScriptEvalFromSharedOrWrappedArguments_746(compiler::CodeAssemblerState* state_, TNode<Script> p_o, TNode<Object> p_v);
TNode<Object> LoadScriptEvalFromPosition_747(compiler::CodeAssemblerState* state_, TNode<Script> p_o);
void StoreScriptEvalFromPosition_748(compiler::CodeAssemblerState* state_, TNode<Script> p_o, TNode<Object> p_v);
TNode<Object> LoadScriptSharedFunctionInfos_749(compiler::CodeAssemblerState* state_, TNode<Script> p_o);
void StoreScriptSharedFunctionInfos_750(compiler::CodeAssemblerState* state_, TNode<Script> p_o, TNode<Object> p_v);
TNode<Smi> LoadScriptFlags_751(compiler::CodeAssemblerState* state_, TNode<Script> p_o);
void StoreScriptFlags_752(compiler::CodeAssemblerState* state_, TNode<Script> p_o, TNode<Smi> p_v);
TNode<Object> LoadScriptSourceUrl_753(compiler::CodeAssemblerState* state_, TNode<Script> p_o);
void StoreScriptSourceUrl_754(compiler::CodeAssemblerState* state_, TNode<Script> p_o, TNode<Object> p_v);
TNode<Object> LoadScriptSourceMappingUrl_755(compiler::CodeAssemblerState* state_, TNode<Script> p_o);
void StoreScriptSourceMappingUrl_756(compiler::CodeAssemblerState* state_, TNode<Script> p_o, TNode<Object> p_v);
TNode<Object> LoadScriptHostDefinedOptions_757(compiler::CodeAssemblerState* state_, TNode<Script> p_o);
void StoreScriptHostDefinedOptions_758(compiler::CodeAssemblerState* state_, TNode<Script> p_o, TNode<Object> p_v);
TNode<Smi> LoadEmbedderDataArrayLength_759(compiler::CodeAssemblerState* state_, TNode<EmbedderDataArray> p_o);
void StoreEmbedderDataArrayLength_760(compiler::CodeAssemblerState* state_, TNode<EmbedderDataArray> p_o, TNode<Smi> p_v);
TNode<Int32T> LoadPreparseDataDataLength_761(compiler::CodeAssemblerState* state_, TNode<PreparseData> p_o);
void StorePreparseDataDataLength_762(compiler::CodeAssemblerState* state_, TNode<PreparseData> p_o, TNode<Int32T> p_v);
TNode<Int32T> LoadPreparseDataInnerLength_763(compiler::CodeAssemblerState* state_, TNode<PreparseData> p_o);
void StorePreparseDataInnerLength_764(compiler::CodeAssemblerState* state_, TNode<PreparseData> p_o, TNode<Int32T> p_v);
TNode<BytecodeArray> LoadInterpreterDataBytecodeArray_765(compiler::CodeAssemblerState* state_, TNode<InterpreterData> p_o);
void StoreInterpreterDataBytecodeArray_766(compiler::CodeAssemblerState* state_, TNode<InterpreterData> p_o, TNode<BytecodeArray> p_v);
TNode<Code> LoadInterpreterDataInterpreterTrampoline_767(compiler::CodeAssemblerState* state_, TNode<InterpreterData> p_o);
void StoreInterpreterDataInterpreterTrampoline_768(compiler::CodeAssemblerState* state_, TNode<InterpreterData> p_o, TNode<Code> p_v);
TNode<Object> LoadSharedFunctionInfoFunctionData_769(compiler::CodeAssemblerState* state_, TNode<SharedFunctionInfo> p_o);
void StoreSharedFunctionInfoFunctionData_770(compiler::CodeAssemblerState* state_, TNode<SharedFunctionInfo> p_o, TNode<Object> p_v);
TNode<Object> LoadSharedFunctionInfoNameOrScopeInfo_771(compiler::CodeAssemblerState* state_, TNode<SharedFunctionInfo> p_o);
void StoreSharedFunctionInfoNameOrScopeInfo_772(compiler::CodeAssemblerState* state_, TNode<SharedFunctionInfo> p_o, TNode<Object> p_v);
TNode<HeapObject> LoadSharedFunctionInfoOuterScopeInfoOrFeedbackMetadata_773(compiler::CodeAssemblerState* state_, TNode<SharedFunctionInfo> p_o);
void StoreSharedFunctionInfoOuterScopeInfoOrFeedbackMetadata_774(compiler::CodeAssemblerState* state_, TNode<SharedFunctionInfo> p_o, TNode<HeapObject> p_v);
TNode<HeapObject> LoadSharedFunctionInfoScriptOrDebugInfo_775(compiler::CodeAssemblerState* state_, TNode<SharedFunctionInfo> p_o);
void StoreSharedFunctionInfoScriptOrDebugInfo_776(compiler::CodeAssemblerState* state_, TNode<SharedFunctionInfo> p_o, TNode<HeapObject> p_v);
TNode<Int16T> LoadSharedFunctionInfoLength_777(compiler::CodeAssemblerState* state_, TNode<SharedFunctionInfo> p_o);
void StoreSharedFunctionInfoLength_778(compiler::CodeAssemblerState* state_, TNode<SharedFunctionInfo> p_o, TNode<Int16T> p_v);
TNode<Uint16T> LoadSharedFunctionInfoFormalParameterCount_779(compiler::CodeAssemblerState* state_, TNode<SharedFunctionInfo> p_o);
void StoreSharedFunctionInfoFormalParameterCount_780(compiler::CodeAssemblerState* state_, TNode<SharedFunctionInfo> p_o, TNode<Uint16T> p_v);
TNode<Uint16T> LoadSharedFunctionInfoExpectedNofProperties_781(compiler::CodeAssemblerState* state_, TNode<SharedFunctionInfo> p_o);
void StoreSharedFunctionInfoExpectedNofProperties_782(compiler::CodeAssemblerState* state_, TNode<SharedFunctionInfo> p_o, TNode<Uint16T> p_v);
TNode<Int16T> LoadSharedFunctionInfoFunctionTokenOffset_783(compiler::CodeAssemblerState* state_, TNode<SharedFunctionInfo> p_o);
void StoreSharedFunctionInfoFunctionTokenOffset_784(compiler::CodeAssemblerState* state_, TNode<SharedFunctionInfo> p_o, TNode<Int16T> p_v);
TNode<Int32T> LoadSharedFunctionInfoFlags_785(compiler::CodeAssemblerState* state_, TNode<SharedFunctionInfo> p_o);
void StoreSharedFunctionInfoFlags_786(compiler::CodeAssemblerState* state_, TNode<SharedFunctionInfo> p_o, TNode<Int32T> p_v);
TNode<Int32T> LoadSharedFunctionInfoFunctionLiteralId_787(compiler::CodeAssemblerState* state_, TNode<SharedFunctionInfo> p_o);
void StoreSharedFunctionInfoFunctionLiteralId_788(compiler::CodeAssemblerState* state_, TNode<SharedFunctionInfo> p_o, TNode<Int32T> p_v);
TNode<String> LoadUncompiledDataInferredName_789(compiler::CodeAssemblerState* state_, TNode<UncompiledData> p_o);
void StoreUncompiledDataInferredName_790(compiler::CodeAssemblerState* state_, TNode<UncompiledData> p_o, TNode<String> p_v);
TNode<Int32T> LoadUncompiledDataStartPosition_791(compiler::CodeAssemblerState* state_, TNode<UncompiledData> p_o);
void StoreUncompiledDataStartPosition_792(compiler::CodeAssemblerState* state_, TNode<UncompiledData> p_o, TNode<Int32T> p_v);
TNode<Int32T> LoadUncompiledDataEndPosition_793(compiler::CodeAssemblerState* state_, TNode<UncompiledData> p_o);
void StoreUncompiledDataEndPosition_794(compiler::CodeAssemblerState* state_, TNode<UncompiledData> p_o, TNode<Int32T> p_v);
TNode<PreparseData> LoadUncompiledDataWithPreparseDataPreparseData_795(compiler::CodeAssemblerState* state_, TNode<UncompiledDataWithPreparseData> p_o);
void StoreUncompiledDataWithPreparseDataPreparseData_796(compiler::CodeAssemblerState* state_, TNode<UncompiledDataWithPreparseData> p_o, TNode<PreparseData> p_v);
TNode<JSReceiver> LoadJSBoundFunctionBoundTargetFunction_797(compiler::CodeAssemblerState* state_, TNode<JSBoundFunction> p_o);
void StoreJSBoundFunctionBoundTargetFunction_798(compiler::CodeAssemblerState* state_, TNode<JSBoundFunction> p_o, TNode<JSReceiver> p_v);
TNode<Object> LoadJSBoundFunctionBoundThis_799(compiler::CodeAssemblerState* state_, TNode<JSBoundFunction> p_o);
void StoreJSBoundFunctionBoundThis_800(compiler::CodeAssemblerState* state_, TNode<JSBoundFunction> p_o, TNode<Object> p_v);
TNode<FixedArray> LoadJSBoundFunctionBoundArguments_801(compiler::CodeAssemblerState* state_, TNode<JSBoundFunction> p_o);
void StoreJSBoundFunctionBoundArguments_802(compiler::CodeAssemblerState* state_, TNode<JSBoundFunction> p_o, TNode<FixedArray> p_v);
TNode<RawPtrT> LoadForeignForeignAddress_803(compiler::CodeAssemblerState* state_, TNode<Foreign> p_o);
void StoreForeignForeignAddress_804(compiler::CodeAssemblerState* state_, TNode<Foreign> p_o, TNode<RawPtrT> p_v);
TNode<Smi> LoadFreeSpaceSize_805(compiler::CodeAssemblerState* state_, TNode<FreeSpace> p_o);
void StoreFreeSpaceSize_806(compiler::CodeAssemblerState* state_, TNode<FreeSpace> p_o, TNode<Smi> p_v);
TNode<Object> LoadFreeSpaceNext_807(compiler::CodeAssemblerState* state_, TNode<FreeSpace> p_o);
void StoreFreeSpaceNext_808(compiler::CodeAssemblerState* state_, TNode<FreeSpace> p_o, TNode<Object> p_v);
TNode<UintPtrT> LoadJSArrayBufferByteLength_809(compiler::CodeAssemblerState* state_, TNode<JSArrayBuffer> p_o);
void StoreJSArrayBufferByteLength_810(compiler::CodeAssemblerState* state_, TNode<JSArrayBuffer> p_o, TNode<UintPtrT> p_v);
TNode<RawPtrT> LoadJSArrayBufferBackingStore_811(compiler::CodeAssemblerState* state_, TNode<JSArrayBuffer> p_o);
void StoreJSArrayBufferBackingStore_812(compiler::CodeAssemblerState* state_, TNode<JSArrayBuffer> p_o, TNode<RawPtrT> p_v);
TNode<JSArrayBuffer> LoadJSArrayBufferViewBuffer_813(compiler::CodeAssemblerState* state_, TNode<JSArrayBufferView> p_o);
void StoreJSArrayBufferViewBuffer_814(compiler::CodeAssemblerState* state_, TNode<JSArrayBufferView> p_o, TNode<JSArrayBuffer> p_v);
TNode<UintPtrT> LoadJSArrayBufferViewByteOffset_815(compiler::CodeAssemblerState* state_, TNode<JSArrayBufferView> p_o);
void StoreJSArrayBufferViewByteOffset_816(compiler::CodeAssemblerState* state_, TNode<JSArrayBufferView> p_o, TNode<UintPtrT> p_v);
TNode<UintPtrT> LoadJSArrayBufferViewByteLength_817(compiler::CodeAssemblerState* state_, TNode<JSArrayBufferView> p_o);
void StoreJSArrayBufferViewByteLength_818(compiler::CodeAssemblerState* state_, TNode<JSArrayBufferView> p_o, TNode<UintPtrT> p_v);
TNode<UintPtrT> LoadJSTypedArrayLength_819(compiler::CodeAssemblerState* state_, TNode<JSTypedArray> p_o);
void StoreJSTypedArrayLength_820(compiler::CodeAssemblerState* state_, TNode<JSTypedArray> p_o, TNode<UintPtrT> p_v);
TNode<RawPtrT> LoadJSTypedArrayExternalPointer_821(compiler::CodeAssemblerState* state_, TNode<JSTypedArray> p_o);
void StoreJSTypedArrayExternalPointer_822(compiler::CodeAssemblerState* state_, TNode<JSTypedArray> p_o, TNode<RawPtrT> p_v);
TNode<Object> LoadJSTypedArrayBasePointer_823(compiler::CodeAssemblerState* state_, TNode<JSTypedArray> p_o);
void StoreJSTypedArrayBasePointer_824(compiler::CodeAssemblerState* state_, TNode<JSTypedArray> p_o, TNode<Object> p_v);
TNode<Object> LoadJSCollectionTable_825(compiler::CodeAssemblerState* state_, TNode<JSCollection> p_o);
void StoreJSCollectionTable_826(compiler::CodeAssemblerState* state_, TNode<JSCollection> p_o, TNode<Object> p_v);
TNode<Object> LoadJSDateValue_827(compiler::CodeAssemblerState* state_, TNode<JSDate> p_o);
void StoreJSDateValue_828(compiler::CodeAssemblerState* state_, TNode<JSDate> p_o, TNode<Object> p_v);
TNode<Object> LoadJSDateYear_829(compiler::CodeAssemblerState* state_, TNode<JSDate> p_o);
void StoreJSDateYear_830(compiler::CodeAssemblerState* state_, TNode<JSDate> p_o, TNode<Object> p_v);
TNode<Object> LoadJSDateMonth_831(compiler::CodeAssemblerState* state_, TNode<JSDate> p_o);
void StoreJSDateMonth_832(compiler::CodeAssemblerState* state_, TNode<JSDate> p_o, TNode<Object> p_v);
TNode<Object> LoadJSDateDay_833(compiler::CodeAssemblerState* state_, TNode<JSDate> p_o);
void StoreJSDateDay_834(compiler::CodeAssemblerState* state_, TNode<JSDate> p_o, TNode<Object> p_v);
TNode<Object> LoadJSDateWeekday_835(compiler::CodeAssemblerState* state_, TNode<JSDate> p_o);
void StoreJSDateWeekday_836(compiler::CodeAssemblerState* state_, TNode<JSDate> p_o, TNode<Object> p_v);
TNode<Object> LoadJSDateHour_837(compiler::CodeAssemblerState* state_, TNode<JSDate> p_o);
void StoreJSDateHour_838(compiler::CodeAssemblerState* state_, TNode<JSDate> p_o, TNode<Object> p_v);
TNode<Object> LoadJSDateMin_839(compiler::CodeAssemblerState* state_, TNode<JSDate> p_o);
void StoreJSDateMin_840(compiler::CodeAssemblerState* state_, TNode<JSDate> p_o, TNode<Object> p_v);
TNode<Object> LoadJSDateSec_841(compiler::CodeAssemblerState* state_, TNode<JSDate> p_o);
void StoreJSDateSec_842(compiler::CodeAssemblerState* state_, TNode<JSDate> p_o, TNode<Object> p_v);
TNode<Object> LoadJSDateCacheStamp_843(compiler::CodeAssemblerState* state_, TNode<JSDate> p_o);
void StoreJSDateCacheStamp_844(compiler::CodeAssemblerState* state_, TNode<JSDate> p_o, TNode<Object> p_v);
TNode<NativeContext> LoadJSGlobalObjectNativeContext_845(compiler::CodeAssemblerState* state_, TNode<JSGlobalObject> p_o);
void StoreJSGlobalObjectNativeContext_846(compiler::CodeAssemblerState* state_, TNode<JSGlobalObject> p_o, TNode<NativeContext> p_v);
TNode<JSGlobalProxy> LoadJSGlobalObjectGlobalProxy_847(compiler::CodeAssemblerState* state_, TNode<JSGlobalObject> p_o);
void StoreJSGlobalObjectGlobalProxy_848(compiler::CodeAssemblerState* state_, TNode<JSGlobalObject> p_o, TNode<JSGlobalProxy> p_v);
TNode<JSReceiver> LoadJSAsyncFromSyncIteratorSyncIterator_849(compiler::CodeAssemblerState* state_, TNode<JSAsyncFromSyncIterator> p_o);
void StoreJSAsyncFromSyncIteratorSyncIterator_850(compiler::CodeAssemblerState* state_, TNode<JSAsyncFromSyncIterator> p_o, TNode<JSReceiver> p_v);
TNode<Object> LoadJSAsyncFromSyncIteratorNext_851(compiler::CodeAssemblerState* state_, TNode<JSAsyncFromSyncIterator> p_o);
void StoreJSAsyncFromSyncIteratorNext_852(compiler::CodeAssemblerState* state_, TNode<JSAsyncFromSyncIterator> p_o, TNode<Object> p_v);
TNode<String> LoadJSStringIteratorString_853(compiler::CodeAssemblerState* state_, TNode<JSStringIterator> p_o);
void StoreJSStringIteratorString_854(compiler::CodeAssemblerState* state_, TNode<JSStringIterator> p_o, TNode<String> p_v);
TNode<Smi> LoadJSStringIteratorNextIndex_855(compiler::CodeAssemblerState* state_, TNode<JSStringIterator> p_o);
void StoreJSStringIteratorNextIndex_856(compiler::CodeAssemblerState* state_, TNode<JSStringIterator> p_o, TNode<Smi> p_v);
TNode<Object> LoadTemplateInfoTag_857(compiler::CodeAssemblerState* state_, TNode<TemplateInfo> p_o);
void StoreTemplateInfoTag_858(compiler::CodeAssemblerState* state_, TNode<TemplateInfo> p_o, TNode<Object> p_v);
TNode<Object> LoadTemplateInfoSerialNumber_859(compiler::CodeAssemblerState* state_, TNode<TemplateInfo> p_o);
void StoreTemplateInfoSerialNumber_860(compiler::CodeAssemblerState* state_, TNode<TemplateInfo> p_o, TNode<Object> p_v);
TNode<Smi> LoadTemplateInfoNumberOfProperties_861(compiler::CodeAssemblerState* state_, TNode<TemplateInfo> p_o);
void StoreTemplateInfoNumberOfProperties_862(compiler::CodeAssemblerState* state_, TNode<TemplateInfo> p_o, TNode<Smi> p_v);
TNode<Object> LoadTemplateInfoPropertyList_863(compiler::CodeAssemblerState* state_, TNode<TemplateInfo> p_o);
void StoreTemplateInfoPropertyList_864(compiler::CodeAssemblerState* state_, TNode<TemplateInfo> p_o, TNode<Object> p_v);
TNode<Object> LoadTemplateInfoPropertyAccessors_865(compiler::CodeAssemblerState* state_, TNode<TemplateInfo> p_o);
void StoreTemplateInfoPropertyAccessors_866(compiler::CodeAssemblerState* state_, TNode<TemplateInfo> p_o, TNode<Object> p_v);
TNode<FixedArray> LoadTemplateObjectDescriptionRawStrings_867(compiler::CodeAssemblerState* state_, TNode<TemplateObjectDescription> p_o);
void StoreTemplateObjectDescriptionRawStrings_868(compiler::CodeAssemblerState* state_, TNode<TemplateObjectDescription> p_o, TNode<FixedArray> p_v);
TNode<FixedArray> LoadTemplateObjectDescriptionCookedStrings_869(compiler::CodeAssemblerState* state_, TNode<TemplateObjectDescription> p_o);
void StoreTemplateObjectDescriptionCookedStrings_870(compiler::CodeAssemblerState* state_, TNode<TemplateObjectDescription> p_o, TNode<FixedArray> p_v);
TNode<Object> LoadFunctionTemplateRareDataPrototypeTemplate_871(compiler::CodeAssemblerState* state_, TNode<FunctionTemplateRareData> p_o);
void StoreFunctionTemplateRareDataPrototypeTemplate_872(compiler::CodeAssemblerState* state_, TNode<FunctionTemplateRareData> p_o, TNode<Object> p_v);
TNode<Object> LoadFunctionTemplateRareDataPrototypeProviderTemplate_873(compiler::CodeAssemblerState* state_, TNode<FunctionTemplateRareData> p_o);
void StoreFunctionTemplateRareDataPrototypeProviderTemplate_874(compiler::CodeAssemblerState* state_, TNode<FunctionTemplateRareData> p_o, TNode<Object> p_v);
TNode<Object> LoadFunctionTemplateRareDataParentTemplate_875(compiler::CodeAssemblerState* state_, TNode<FunctionTemplateRareData> p_o);
void StoreFunctionTemplateRareDataParentTemplate_876(compiler::CodeAssemblerState* state_, TNode<FunctionTemplateRareData> p_o, TNode<Object> p_v);
TNode<Object> LoadFunctionTemplateRareDataNamedPropertyHandler_877(compiler::CodeAssemblerState* state_, TNode<FunctionTemplateRareData> p_o);
void StoreFunctionTemplateRareDataNamedPropertyHandler_878(compiler::CodeAssemblerState* state_, TNode<FunctionTemplateRareData> p_o, TNode<Object> p_v);
TNode<Object> LoadFunctionTemplateRareDataIndexedPropertyHandler_879(compiler::CodeAssemblerState* state_, TNode<FunctionTemplateRareData> p_o);
void StoreFunctionTemplateRareDataIndexedPropertyHandler_880(compiler::CodeAssemblerState* state_, TNode<FunctionTemplateRareData> p_o, TNode<Object> p_v);
TNode<Object> LoadFunctionTemplateRareDataInstanceTemplate_881(compiler::CodeAssemblerState* state_, TNode<FunctionTemplateRareData> p_o);
void StoreFunctionTemplateRareDataInstanceTemplate_882(compiler::CodeAssemblerState* state_, TNode<FunctionTemplateRareData> p_o, TNode<Object> p_v);
TNode<Object> LoadFunctionTemplateRareDataInstanceCallHandler_883(compiler::CodeAssemblerState* state_, TNode<FunctionTemplateRareData> p_o);
void StoreFunctionTemplateRareDataInstanceCallHandler_884(compiler::CodeAssemblerState* state_, TNode<FunctionTemplateRareData> p_o, TNode<Object> p_v);
TNode<Object> LoadFunctionTemplateRareDataAccessCheckInfo_885(compiler::CodeAssemblerState* state_, TNode<FunctionTemplateRareData> p_o);
void StoreFunctionTemplateRareDataAccessCheckInfo_886(compiler::CodeAssemblerState* state_, TNode<FunctionTemplateRareData> p_o, TNode<Object> p_v);
TNode<Object> LoadFunctionTemplateInfoCallCode_887(compiler::CodeAssemblerState* state_, TNode<FunctionTemplateInfo> p_o);
void StoreFunctionTemplateInfoCallCode_888(compiler::CodeAssemblerState* state_, TNode<FunctionTemplateInfo> p_o, TNode<Object> p_v);
TNode<Object> LoadFunctionTemplateInfoClassName_889(compiler::CodeAssemblerState* state_, TNode<FunctionTemplateInfo> p_o);
void StoreFunctionTemplateInfoClassName_890(compiler::CodeAssemblerState* state_, TNode<FunctionTemplateInfo> p_o, TNode<Object> p_v);
TNode<Object> LoadFunctionTemplateInfoSignature_891(compiler::CodeAssemblerState* state_, TNode<FunctionTemplateInfo> p_o);
void StoreFunctionTemplateInfoSignature_892(compiler::CodeAssemblerState* state_, TNode<FunctionTemplateInfo> p_o, TNode<Object> p_v);
TNode<HeapObject> LoadFunctionTemplateInfoRareData_893(compiler::CodeAssemblerState* state_, TNode<FunctionTemplateInfo> p_o);
void StoreFunctionTemplateInfoRareData_894(compiler::CodeAssemblerState* state_, TNode<FunctionTemplateInfo> p_o, TNode<HeapObject> p_v);
TNode<Object> LoadFunctionTemplateInfoSharedFunctionInfo_895(compiler::CodeAssemblerState* state_, TNode<FunctionTemplateInfo> p_o);
void StoreFunctionTemplateInfoSharedFunctionInfo_896(compiler::CodeAssemblerState* state_, TNode<FunctionTemplateInfo> p_o, TNode<Object> p_v);
TNode<Smi> LoadFunctionTemplateInfoFlag_897(compiler::CodeAssemblerState* state_, TNode<FunctionTemplateInfo> p_o);
void StoreFunctionTemplateInfoFlag_898(compiler::CodeAssemblerState* state_, TNode<FunctionTemplateInfo> p_o, TNode<Smi> p_v);
TNode<Smi> LoadFunctionTemplateInfoLength_899(compiler::CodeAssemblerState* state_, TNode<FunctionTemplateInfo> p_o);
void StoreFunctionTemplateInfoLength_900(compiler::CodeAssemblerState* state_, TNode<FunctionTemplateInfo> p_o, TNode<Smi> p_v);
TNode<Object> LoadFunctionTemplateInfoCachedPropertyName_901(compiler::CodeAssemblerState* state_, TNode<FunctionTemplateInfo> p_o);
void StoreFunctionTemplateInfoCachedPropertyName_902(compiler::CodeAssemblerState* state_, TNode<FunctionTemplateInfo> p_o, TNode<Object> p_v);
TNode<Object> LoadObjectTemplateInfoConstructor_903(compiler::CodeAssemblerState* state_, TNode<ObjectTemplateInfo> p_o);
void StoreObjectTemplateInfoConstructor_904(compiler::CodeAssemblerState* state_, TNode<ObjectTemplateInfo> p_o, TNode<Object> p_v);
TNode<Object> LoadObjectTemplateInfoData_905(compiler::CodeAssemblerState* state_, TNode<ObjectTemplateInfo> p_o);
void StoreObjectTemplateInfoData_906(compiler::CodeAssemblerState* state_, TNode<ObjectTemplateInfo> p_o, TNode<Object> p_v);
TNode<Smi> LoadPropertyArrayLengthAndHash_907(compiler::CodeAssemblerState* state_, TNode<PropertyArray> p_o);
void StorePropertyArrayLengthAndHash_908(compiler::CodeAssemblerState* state_, TNode<PropertyArray> p_o, TNode<Smi> p_v);
TNode<Name> LoadPropertyCellName_909(compiler::CodeAssemblerState* state_, TNode<PropertyCell> p_o);
void StorePropertyCellName_910(compiler::CodeAssemblerState* state_, TNode<PropertyCell> p_o, TNode<Name> p_v);
TNode<Smi> LoadPropertyCellPropertyDetailsRaw_911(compiler::CodeAssemblerState* state_, TNode<PropertyCell> p_o);
void StorePropertyCellPropertyDetailsRaw_912(compiler::CodeAssemblerState* state_, TNode<PropertyCell> p_o, TNode<Smi> p_v);
TNode<Object> LoadPropertyCellValue_913(compiler::CodeAssemblerState* state_, TNode<PropertyCell> p_o);
void StorePropertyCellValue_914(compiler::CodeAssemblerState* state_, TNode<PropertyCell> p_o, TNode<Object> p_v);
TNode<WeakFixedArray> LoadPropertyCellDependentCode_915(compiler::CodeAssemblerState* state_, TNode<PropertyCell> p_o);
void StorePropertyCellDependentCode_916(compiler::CodeAssemblerState* state_, TNode<PropertyCell> p_o, TNode<WeakFixedArray> p_v);
TNode<RawPtrT> LoadJSDataViewDataPointer_917(compiler::CodeAssemblerState* state_, TNode<JSDataView> p_o);
void StoreJSDataViewDataPointer_918(compiler::CodeAssemblerState* state_, TNode<JSDataView> p_o, TNode<RawPtrT> p_v);
TNode<Object> LoadInterceptorInfoGetter_919(compiler::CodeAssemblerState* state_, TNode<InterceptorInfo> p_o);
void StoreInterceptorInfoGetter_920(compiler::CodeAssemblerState* state_, TNode<InterceptorInfo> p_o, TNode<Object> p_v);
TNode<Object> LoadInterceptorInfoSetter_921(compiler::CodeAssemblerState* state_, TNode<InterceptorInfo> p_o);
void StoreInterceptorInfoSetter_922(compiler::CodeAssemblerState* state_, TNode<InterceptorInfo> p_o, TNode<Object> p_v);
TNode<Object> LoadInterceptorInfoQuery_923(compiler::CodeAssemblerState* state_, TNode<InterceptorInfo> p_o);
void StoreInterceptorInfoQuery_924(compiler::CodeAssemblerState* state_, TNode<InterceptorInfo> p_o, TNode<Object> p_v);
TNode<Object> LoadInterceptorInfoDescriptor_925(compiler::CodeAssemblerState* state_, TNode<InterceptorInfo> p_o);
void StoreInterceptorInfoDescriptor_926(compiler::CodeAssemblerState* state_, TNode<InterceptorInfo> p_o, TNode<Object> p_v);
TNode<Object> LoadInterceptorInfoDeleter_927(compiler::CodeAssemblerState* state_, TNode<InterceptorInfo> p_o);
void StoreInterceptorInfoDeleter_928(compiler::CodeAssemblerState* state_, TNode<InterceptorInfo> p_o, TNode<Object> p_v);
TNode<Object> LoadInterceptorInfoEnumerator_929(compiler::CodeAssemblerState* state_, TNode<InterceptorInfo> p_o);
void StoreInterceptorInfoEnumerator_930(compiler::CodeAssemblerState* state_, TNode<InterceptorInfo> p_o, TNode<Object> p_v);
TNode<Object> LoadInterceptorInfoDefiner_931(compiler::CodeAssemblerState* state_, TNode<InterceptorInfo> p_o);
void StoreInterceptorInfoDefiner_932(compiler::CodeAssemblerState* state_, TNode<InterceptorInfo> p_o, TNode<Object> p_v);
TNode<Object> LoadInterceptorInfoData_933(compiler::CodeAssemblerState* state_, TNode<InterceptorInfo> p_o);
void StoreInterceptorInfoData_934(compiler::CodeAssemblerState* state_, TNode<InterceptorInfo> p_o, TNode<Object> p_v);
TNode<Smi> LoadInterceptorInfoFlags_935(compiler::CodeAssemblerState* state_, TNode<InterceptorInfo> p_o);
void StoreInterceptorInfoFlags_936(compiler::CodeAssemblerState* state_, TNode<InterceptorInfo> p_o, TNode<Smi> p_v);
TNode<Object> LoadAccessCheckInfoCallback_937(compiler::CodeAssemblerState* state_, TNode<AccessCheckInfo> p_o);
void StoreAccessCheckInfoCallback_938(compiler::CodeAssemblerState* state_, TNode<AccessCheckInfo> p_o, TNode<Object> p_v);
TNode<Object> LoadAccessCheckInfoNamedInterceptor_939(compiler::CodeAssemblerState* state_, TNode<AccessCheckInfo> p_o);
void StoreAccessCheckInfoNamedInterceptor_940(compiler::CodeAssemblerState* state_, TNode<AccessCheckInfo> p_o, TNode<Object> p_v);
TNode<Object> LoadAccessCheckInfoIndexedInterceptor_941(compiler::CodeAssemblerState* state_, TNode<AccessCheckInfo> p_o);
void StoreAccessCheckInfoIndexedInterceptor_942(compiler::CodeAssemblerState* state_, TNode<AccessCheckInfo> p_o, TNode<Object> p_v);
TNode<Object> LoadAccessCheckInfoData_943(compiler::CodeAssemblerState* state_, TNode<AccessCheckInfo> p_o);
void StoreAccessCheckInfoData_944(compiler::CodeAssemblerState* state_, TNode<AccessCheckInfo> p_o, TNode<Object> p_v);
TNode<Smi> LoadArrayBoilerplateDescriptionFlags_945(compiler::CodeAssemblerState* state_, TNode<ArrayBoilerplateDescription> p_o);
void StoreArrayBoilerplateDescriptionFlags_946(compiler::CodeAssemblerState* state_, TNode<ArrayBoilerplateDescription> p_o, TNode<Smi> p_v);
TNode<FixedArrayBase> LoadArrayBoilerplateDescriptionConstantElements_947(compiler::CodeAssemblerState* state_, TNode<ArrayBoilerplateDescription> p_o);
void StoreArrayBoilerplateDescriptionConstantElements_948(compiler::CodeAssemblerState* state_, TNode<ArrayBoilerplateDescription> p_o, TNode<FixedArrayBase> p_v);
TNode<Smi> LoadAliasedArgumentsEntryAliasedContextSlot_949(compiler::CodeAssemblerState* state_, TNode<AliasedArgumentsEntry> p_o);
void StoreAliasedArgumentsEntryAliasedContextSlot_950(compiler::CodeAssemblerState* state_, TNode<AliasedArgumentsEntry> p_o, TNode<Smi> p_v);
TNode<Object> LoadCellValue_951(compiler::CodeAssemblerState* state_, TNode<Cell> p_o);
void StoreCellValue_952(compiler::CodeAssemblerState* state_, TNode<Cell> p_o, TNode<Object> p_v);
TNode<Object> LoadDataHandlerSmiHandler_953(compiler::CodeAssemblerState* state_, TNode<DataHandler> p_o);
void StoreDataHandlerSmiHandler_954(compiler::CodeAssemblerState* state_, TNode<DataHandler> p_o, TNode<Object> p_v);
TNode<Object> LoadDataHandlerValidityCell_955(compiler::CodeAssemblerState* state_, TNode<DataHandler> p_o);
void StoreDataHandlerValidityCell_956(compiler::CodeAssemblerState* state_, TNode<DataHandler> p_o, TNode<Object> p_v);
TNode<Object> LoadDataHandlerData1_957(compiler::CodeAssemblerState* state_, TNode<DataHandler> p_o);
void StoreDataHandlerData1_958(compiler::CodeAssemblerState* state_, TNode<DataHandler> p_o, TNode<Object> p_v);
TNode<Object> LoadDataHandlerData2_959(compiler::CodeAssemblerState* state_, TNode<DataHandler> p_o);
void StoreDataHandlerData2_960(compiler::CodeAssemblerState* state_, TNode<DataHandler> p_o, TNode<Object> p_v);
TNode<Object> LoadDataHandlerData3_961(compiler::CodeAssemblerState* state_, TNode<DataHandler> p_o);
void StoreDataHandlerData3_962(compiler::CodeAssemblerState* state_, TNode<DataHandler> p_o, TNode<Object> p_v);
TNode<JSFunction> LoadJSGeneratorObjectFunction_963(compiler::CodeAssemblerState* state_, TNode<JSGeneratorObject> p_o);
void StoreJSGeneratorObjectFunction_964(compiler::CodeAssemblerState* state_, TNode<JSGeneratorObject> p_o, TNode<JSFunction> p_v);
TNode<Context> LoadJSGeneratorObjectContext_965(compiler::CodeAssemblerState* state_, TNode<JSGeneratorObject> p_o);
void StoreJSGeneratorObjectContext_966(compiler::CodeAssemblerState* state_, TNode<JSGeneratorObject> p_o, TNode<Context> p_v);
TNode<Object> LoadJSGeneratorObjectReceiver_967(compiler::CodeAssemblerState* state_, TNode<JSGeneratorObject> p_o);
void StoreJSGeneratorObjectReceiver_968(compiler::CodeAssemblerState* state_, TNode<JSGeneratorObject> p_o, TNode<Object> p_v);
TNode<Object> LoadJSGeneratorObjectInputOrDebugPos_969(compiler::CodeAssemblerState* state_, TNode<JSGeneratorObject> p_o);
void StoreJSGeneratorObjectInputOrDebugPos_970(compiler::CodeAssemblerState* state_, TNode<JSGeneratorObject> p_o, TNode<Object> p_v);
TNode<Smi> LoadJSGeneratorObjectResumeMode_971(compiler::CodeAssemblerState* state_, TNode<JSGeneratorObject> p_o);
void StoreJSGeneratorObjectResumeMode_972(compiler::CodeAssemblerState* state_, TNode<JSGeneratorObject> p_o, TNode<Smi> p_v);
TNode<Smi> LoadJSGeneratorObjectContinuation_973(compiler::CodeAssemblerState* state_, TNode<JSGeneratorObject> p_o);
void StoreJSGeneratorObjectContinuation_974(compiler::CodeAssemblerState* state_, TNode<JSGeneratorObject> p_o, TNode<Smi> p_v);
TNode<FixedArray> LoadJSGeneratorObjectParametersAndRegisters_975(compiler::CodeAssemblerState* state_, TNode<JSGeneratorObject> p_o);
void StoreJSGeneratorObjectParametersAndRegisters_976(compiler::CodeAssemblerState* state_, TNode<JSGeneratorObject> p_o, TNode<FixedArray> p_v);
TNode<JSPromise> LoadJSAsyncFunctionObjectPromise_977(compiler::CodeAssemblerState* state_, TNode<JSAsyncFunctionObject> p_o);
void StoreJSAsyncFunctionObjectPromise_978(compiler::CodeAssemblerState* state_, TNode<JSAsyncFunctionObject> p_o, TNode<JSPromise> p_v);
TNode<HeapObject> LoadJSAsyncGeneratorObjectQueue_979(compiler::CodeAssemblerState* state_, TNode<JSAsyncGeneratorObject> p_o);
void StoreJSAsyncGeneratorObjectQueue_980(compiler::CodeAssemblerState* state_, TNode<JSAsyncGeneratorObject> p_o, TNode<HeapObject> p_v);
TNode<Smi> LoadJSAsyncGeneratorObjectIsAwaiting_981(compiler::CodeAssemblerState* state_, TNode<JSAsyncGeneratorObject> p_o);
void StoreJSAsyncGeneratorObjectIsAwaiting_982(compiler::CodeAssemblerState* state_, TNode<JSAsyncGeneratorObject> p_o, TNode<Smi> p_v);
TNode<Object> LoadJSPromiseReactionsOrResult_983(compiler::CodeAssemblerState* state_, TNode<JSPromise> p_o);
void StoreJSPromiseReactionsOrResult_984(compiler::CodeAssemblerState* state_, TNode<JSPromise> p_o, TNode<Object> p_v);
TNode<Smi> LoadJSPromiseFlags_985(compiler::CodeAssemblerState* state_, TNode<JSPromise> p_o);
void StoreJSPromiseFlags_986(compiler::CodeAssemblerState* state_, TNode<JSPromise> p_o, TNode<Smi> p_v);
TNode<Foreign> LoadCallbackTaskCallback_987(compiler::CodeAssemblerState* state_, TNode<CallbackTask> p_o);
void StoreCallbackTaskCallback_988(compiler::CodeAssemblerState* state_, TNode<CallbackTask> p_o, TNode<Foreign> p_v);
TNode<Foreign> LoadCallbackTaskData_989(compiler::CodeAssemblerState* state_, TNode<CallbackTask> p_o);
void StoreCallbackTaskData_990(compiler::CodeAssemblerState* state_, TNode<CallbackTask> p_o, TNode<Foreign> p_v);
TNode<JSReceiver> LoadCallableTaskCallable_991(compiler::CodeAssemblerState* state_, TNode<CallableTask> p_o);
void StoreCallableTaskCallable_992(compiler::CodeAssemblerState* state_, TNode<CallableTask> p_o, TNode<JSReceiver> p_v);
TNode<Context> LoadCallableTaskContext_993(compiler::CodeAssemblerState* state_, TNode<CallableTask> p_o);
void StoreCallableTaskContext_994(compiler::CodeAssemblerState* state_, TNode<CallableTask> p_o, TNode<Context> p_v);
TNode<Smi> LoadStackFrameInfoLineNumber_995(compiler::CodeAssemblerState* state_, TNode<StackFrameInfo> p_o);
void StoreStackFrameInfoLineNumber_996(compiler::CodeAssemblerState* state_, TNode<StackFrameInfo> p_o, TNode<Smi> p_v);
TNode<Smi> LoadStackFrameInfoColumnNumber_997(compiler::CodeAssemblerState* state_, TNode<StackFrameInfo> p_o);
void StoreStackFrameInfoColumnNumber_998(compiler::CodeAssemblerState* state_, TNode<StackFrameInfo> p_o, TNode<Smi> p_v);
TNode<Smi> LoadStackFrameInfoPromiseAllIndex_999(compiler::CodeAssemblerState* state_, TNode<StackFrameInfo> p_o);
void StoreStackFrameInfoPromiseAllIndex_1000(compiler::CodeAssemblerState* state_, TNode<StackFrameInfo> p_o, TNode<Smi> p_v);
TNode<Smi> LoadStackFrameInfoScriptId_1001(compiler::CodeAssemblerState* state_, TNode<StackFrameInfo> p_o);
void StoreStackFrameInfoScriptId_1002(compiler::CodeAssemblerState* state_, TNode<StackFrameInfo> p_o, TNode<Smi> p_v);
TNode<HeapObject> LoadStackFrameInfoScriptName_1003(compiler::CodeAssemblerState* state_, TNode<StackFrameInfo> p_o);
void StoreStackFrameInfoScriptName_1004(compiler::CodeAssemblerState* state_, TNode<StackFrameInfo> p_o, TNode<HeapObject> p_v);
TNode<HeapObject> LoadStackFrameInfoScriptNameOrSourceUrl_1005(compiler::CodeAssemblerState* state_, TNode<StackFrameInfo> p_o);
void StoreStackFrameInfoScriptNameOrSourceUrl_1006(compiler::CodeAssemblerState* state_, TNode<StackFrameInfo> p_o, TNode<HeapObject> p_v);
TNode<HeapObject> LoadStackFrameInfoFunctionName_1007(compiler::CodeAssemblerState* state_, TNode<StackFrameInfo> p_o);
void StoreStackFrameInfoFunctionName_1008(compiler::CodeAssemblerState* state_, TNode<StackFrameInfo> p_o, TNode<HeapObject> p_v);
TNode<HeapObject> LoadStackFrameInfoMethodName_1009(compiler::CodeAssemblerState* state_, TNode<StackFrameInfo> p_o);
void StoreStackFrameInfoMethodName_1010(compiler::CodeAssemblerState* state_, TNode<StackFrameInfo> p_o, TNode<HeapObject> p_v);
TNode<HeapObject> LoadStackFrameInfoTypeName_1011(compiler::CodeAssemblerState* state_, TNode<StackFrameInfo> p_o);
void StoreStackFrameInfoTypeName_1012(compiler::CodeAssemblerState* state_, TNode<StackFrameInfo> p_o, TNode<HeapObject> p_v);
TNode<HeapObject> LoadStackFrameInfoEvalOrigin_1013(compiler::CodeAssemblerState* state_, TNode<StackFrameInfo> p_o);
void StoreStackFrameInfoEvalOrigin_1014(compiler::CodeAssemblerState* state_, TNode<StackFrameInfo> p_o, TNode<HeapObject> p_v);
TNode<HeapObject> LoadStackFrameInfoWasmModuleName_1015(compiler::CodeAssemblerState* state_, TNode<StackFrameInfo> p_o);
void StoreStackFrameInfoWasmModuleName_1016(compiler::CodeAssemblerState* state_, TNode<StackFrameInfo> p_o, TNode<HeapObject> p_v);
TNode<HeapObject> LoadStackFrameInfoWasmInstance_1017(compiler::CodeAssemblerState* state_, TNode<StackFrameInfo> p_o);
void StoreStackFrameInfoWasmInstance_1018(compiler::CodeAssemblerState* state_, TNode<StackFrameInfo> p_o, TNode<HeapObject> p_v);
TNode<Smi> LoadStackFrameInfoFlag_1019(compiler::CodeAssemblerState* state_, TNode<StackFrameInfo> p_o);
void StoreStackFrameInfoFlag_1020(compiler::CodeAssemblerState* state_, TNode<StackFrameInfo> p_o, TNode<Smi> p_v);
TNode<HeapObject> LoadStackTraceFrameFrameArray_1021(compiler::CodeAssemblerState* state_, TNode<StackTraceFrame> p_o);
void StoreStackTraceFrameFrameArray_1022(compiler::CodeAssemblerState* state_, TNode<StackTraceFrame> p_o, TNode<HeapObject> p_v);
TNode<Smi> LoadStackTraceFrameFrameIndex_1023(compiler::CodeAssemblerState* state_, TNode<StackTraceFrame> p_o);
void StoreStackTraceFrameFrameIndex_1024(compiler::CodeAssemblerState* state_, TNode<StackTraceFrame> p_o, TNode<Smi> p_v);
TNode<HeapObject> LoadStackTraceFrameFrameInfo_1025(compiler::CodeAssemblerState* state_, TNode<StackTraceFrame> p_o);
void StoreStackTraceFrameFrameInfo_1026(compiler::CodeAssemblerState* state_, TNode<StackTraceFrame> p_o, TNode<HeapObject> p_v);
TNode<Smi> LoadStackTraceFrameId_1027(compiler::CodeAssemblerState* state_, TNode<StackTraceFrame> p_o);
void StoreStackTraceFrameId_1028(compiler::CodeAssemblerState* state_, TNode<StackTraceFrame> p_o, TNode<Smi> p_v);
TNode<Smi> LoadClassPositionsStart_1029(compiler::CodeAssemblerState* state_, TNode<ClassPositions> p_o);
void StoreClassPositionsStart_1030(compiler::CodeAssemblerState* state_, TNode<ClassPositions> p_o, TNode<Smi> p_v);
TNode<Smi> LoadClassPositionsEnd_1031(compiler::CodeAssemblerState* state_, TNode<ClassPositions> p_o);
void StoreClassPositionsEnd_1032(compiler::CodeAssemblerState* state_, TNode<ClassPositions> p_o, TNode<Smi> p_v);
TNode<Code> LoadWasmExportedFunctionDataWrapperCode_1033(compiler::CodeAssemblerState* state_, TNode<WasmExportedFunctionData> p_o);
void StoreWasmExportedFunctionDataWrapperCode_1034(compiler::CodeAssemblerState* state_, TNode<WasmExportedFunctionData> p_o, TNode<Code> p_v);
TNode<JSObject> LoadWasmExportedFunctionDataInstance_1035(compiler::CodeAssemblerState* state_, TNode<WasmExportedFunctionData> p_o);
void StoreWasmExportedFunctionDataInstance_1036(compiler::CodeAssemblerState* state_, TNode<WasmExportedFunctionData> p_o, TNode<JSObject> p_v);
TNode<Smi> LoadWasmExportedFunctionDataJumpTableOffset_1037(compiler::CodeAssemblerState* state_, TNode<WasmExportedFunctionData> p_o);
void StoreWasmExportedFunctionDataJumpTableOffset_1038(compiler::CodeAssemblerState* state_, TNode<WasmExportedFunctionData> p_o, TNode<Smi> p_v);
TNode<Smi> LoadWasmExportedFunctionDataFunctionIndex_1039(compiler::CodeAssemblerState* state_, TNode<WasmExportedFunctionData> p_o);
void StoreWasmExportedFunctionDataFunctionIndex_1040(compiler::CodeAssemblerState* state_, TNode<WasmExportedFunctionData> p_o, TNode<Smi> p_v);
TNode<Object> LoadWasmExportedFunctionDataCWrapperCode_1041(compiler::CodeAssemblerState* state_, TNode<WasmExportedFunctionData> p_o);
void StoreWasmExportedFunctionDataCWrapperCode_1042(compiler::CodeAssemblerState* state_, TNode<WasmExportedFunctionData> p_o, TNode<Object> p_v);
TNode<Object> LoadWasmExportedFunctionDataWasmCallTarget_1043(compiler::CodeAssemblerState* state_, TNode<WasmExportedFunctionData> p_o);
void StoreWasmExportedFunctionDataWasmCallTarget_1044(compiler::CodeAssemblerState* state_, TNode<WasmExportedFunctionData> p_o, TNode<Object> p_v);
TNode<Smi> LoadWasmExportedFunctionDataPackedArgsSize_1045(compiler::CodeAssemblerState* state_, TNode<WasmExportedFunctionData> p_o);
void StoreWasmExportedFunctionDataPackedArgsSize_1046(compiler::CodeAssemblerState* state_, TNode<WasmExportedFunctionData> p_o, TNode<Smi> p_v);
TNode<JSReceiver> LoadWasmJSFunctionDataCallable_1047(compiler::CodeAssemblerState* state_, TNode<WasmJSFunctionData> p_o);
void StoreWasmJSFunctionDataCallable_1048(compiler::CodeAssemblerState* state_, TNode<WasmJSFunctionData> p_o, TNode<JSReceiver> p_v);
TNode<Code> LoadWasmJSFunctionDataWrapperCode_1049(compiler::CodeAssemblerState* state_, TNode<WasmJSFunctionData> p_o);
void StoreWasmJSFunctionDataWrapperCode_1050(compiler::CodeAssemblerState* state_, TNode<WasmJSFunctionData> p_o, TNode<Code> p_v);
TNode<Smi> LoadWasmJSFunctionDataSerializedReturnCount_1051(compiler::CodeAssemblerState* state_, TNode<WasmJSFunctionData> p_o);
void StoreWasmJSFunctionDataSerializedReturnCount_1052(compiler::CodeAssemblerState* state_, TNode<WasmJSFunctionData> p_o, TNode<Smi> p_v);
TNode<Smi> LoadWasmJSFunctionDataSerializedParameterCount_1053(compiler::CodeAssemblerState* state_, TNode<WasmJSFunctionData> p_o);
void StoreWasmJSFunctionDataSerializedParameterCount_1054(compiler::CodeAssemblerState* state_, TNode<WasmJSFunctionData> p_o, TNode<Smi> p_v);
TNode<ByteArray> LoadWasmJSFunctionDataSerializedSignature_1055(compiler::CodeAssemblerState* state_, TNode<WasmJSFunctionData> p_o);
void StoreWasmJSFunctionDataSerializedSignature_1056(compiler::CodeAssemblerState* state_, TNode<WasmJSFunctionData> p_o, TNode<ByteArray> p_v);
TNode<RawPtrT> LoadWasmCapiFunctionDataCallTarget_1057(compiler::CodeAssemblerState* state_, TNode<WasmCapiFunctionData> p_o);
void StoreWasmCapiFunctionDataCallTarget_1058(compiler::CodeAssemblerState* state_, TNode<WasmCapiFunctionData> p_o, TNode<RawPtrT> p_v);
TNode<Foreign> LoadWasmCapiFunctionDataEmbedderData_1059(compiler::CodeAssemblerState* state_, TNode<WasmCapiFunctionData> p_o);
void StoreWasmCapiFunctionDataEmbedderData_1060(compiler::CodeAssemblerState* state_, TNode<WasmCapiFunctionData> p_o, TNode<Foreign> p_v);
TNode<Code> LoadWasmCapiFunctionDataWrapperCode_1061(compiler::CodeAssemblerState* state_, TNode<WasmCapiFunctionData> p_o);
void StoreWasmCapiFunctionDataWrapperCode_1062(compiler::CodeAssemblerState* state_, TNode<WasmCapiFunctionData> p_o, TNode<Code> p_v);
TNode<ByteArray> LoadWasmCapiFunctionDataSerializedSignature_1063(compiler::CodeAssemblerState* state_, TNode<WasmCapiFunctionData> p_o);
void StoreWasmCapiFunctionDataSerializedSignature_1064(compiler::CodeAssemblerState* state_, TNode<WasmCapiFunctionData> p_o, TNode<ByteArray> p_v);
TNode<Uint32T> LoadWasmIndirectFunctionTableSize_1065(compiler::CodeAssemblerState* state_, TNode<WasmIndirectFunctionTable> p_o);
void StoreWasmIndirectFunctionTableSize_1066(compiler::CodeAssemblerState* state_, TNode<WasmIndirectFunctionTable> p_o, TNode<Uint32T> p_v);
TNode<Uint32T> LoadWasmIndirectFunctionTableOptionalPadding_1067(compiler::CodeAssemblerState* state_, TNode<WasmIndirectFunctionTable> p_o);
void StoreWasmIndirectFunctionTableOptionalPadding_1068(compiler::CodeAssemblerState* state_, TNode<WasmIndirectFunctionTable> p_o, TNode<Uint32T> p_v);
TNode<RawPtrT> LoadWasmIndirectFunctionTableSigIds_1069(compiler::CodeAssemblerState* state_, TNode<WasmIndirectFunctionTable> p_o);
void StoreWasmIndirectFunctionTableSigIds_1070(compiler::CodeAssemblerState* state_, TNode<WasmIndirectFunctionTable> p_o, TNode<RawPtrT> p_v);
TNode<RawPtrT> LoadWasmIndirectFunctionTableTargets_1071(compiler::CodeAssemblerState* state_, TNode<WasmIndirectFunctionTable> p_o);
void StoreWasmIndirectFunctionTableTargets_1072(compiler::CodeAssemblerState* state_, TNode<WasmIndirectFunctionTable> p_o, TNode<RawPtrT> p_v);
TNode<HeapObject> LoadWasmIndirectFunctionTableManagedNativeAllocations_1073(compiler::CodeAssemblerState* state_, TNode<WasmIndirectFunctionTable> p_o);
void StoreWasmIndirectFunctionTableManagedNativeAllocations_1074(compiler::CodeAssemblerState* state_, TNode<WasmIndirectFunctionTable> p_o, TNode<HeapObject> p_v);
TNode<FixedArray> LoadWasmIndirectFunctionTableRefs_1075(compiler::CodeAssemblerState* state_, TNode<WasmIndirectFunctionTable> p_o);
void StoreWasmIndirectFunctionTableRefs_1076(compiler::CodeAssemblerState* state_, TNode<WasmIndirectFunctionTable> p_o, TNode<FixedArray> p_v);
TNode<JSObject> LoadWasmDebugInfoInstance_1077(compiler::CodeAssemblerState* state_, TNode<WasmDebugInfo> p_o);
void StoreWasmDebugInfoInstance_1078(compiler::CodeAssemblerState* state_, TNode<WasmDebugInfo> p_o, TNode<JSObject> p_v);
TNode<HeapObject> LoadWasmDebugInfoInterpreterHandle_1079(compiler::CodeAssemblerState* state_, TNode<WasmDebugInfo> p_o);
void StoreWasmDebugInfoInterpreterHandle_1080(compiler::CodeAssemblerState* state_, TNode<WasmDebugInfo> p_o, TNode<HeapObject> p_v);
TNode<HeapObject> LoadWasmDebugInfoLocalsNames_1081(compiler::CodeAssemblerState* state_, TNode<WasmDebugInfo> p_o);
void StoreWasmDebugInfoLocalsNames_1082(compiler::CodeAssemblerState* state_, TNode<WasmDebugInfo> p_o, TNode<HeapObject> p_v);
TNode<HeapObject> LoadWasmDebugInfoCWasmEntries_1083(compiler::CodeAssemblerState* state_, TNode<WasmDebugInfo> p_o);
void StoreWasmDebugInfoCWasmEntries_1084(compiler::CodeAssemblerState* state_, TNode<WasmDebugInfo> p_o, TNode<HeapObject> p_v);
TNode<HeapObject> LoadWasmDebugInfoCWasmEntryMap_1085(compiler::CodeAssemblerState* state_, TNode<WasmDebugInfo> p_o);
void StoreWasmDebugInfoCWasmEntryMap_1086(compiler::CodeAssemblerState* state_, TNode<WasmDebugInfo> p_o, TNode<HeapObject> p_v);
TNode<Smi> LoadWasmExceptionTagIndex_1087(compiler::CodeAssemblerState* state_, TNode<WasmExceptionTag> p_o);
void StoreWasmExceptionTagIndex_1088(compiler::CodeAssemblerState* state_, TNode<WasmExceptionTag> p_o, TNode<Smi> p_v);
TNode<HeapObject> LoadAsyncGeneratorRequestNext_1089(compiler::CodeAssemblerState* state_, TNode<AsyncGeneratorRequest> p_o);
void StoreAsyncGeneratorRequestNext_1090(compiler::CodeAssemblerState* state_, TNode<AsyncGeneratorRequest> p_o, TNode<HeapObject> p_v);
TNode<Smi> LoadAsyncGeneratorRequestResumeMode_1091(compiler::CodeAssemblerState* state_, TNode<AsyncGeneratorRequest> p_o);
void StoreAsyncGeneratorRequestResumeMode_1092(compiler::CodeAssemblerState* state_, TNode<AsyncGeneratorRequest> p_o, TNode<Smi> p_v);
TNode<Object> LoadAsyncGeneratorRequestValue_1093(compiler::CodeAssemblerState* state_, TNode<AsyncGeneratorRequest> p_o);
void StoreAsyncGeneratorRequestValue_1094(compiler::CodeAssemblerState* state_, TNode<AsyncGeneratorRequest> p_o, TNode<Object> p_v);
TNode<JSPromise> LoadAsyncGeneratorRequestPromise_1095(compiler::CodeAssemblerState* state_, TNode<AsyncGeneratorRequest> p_o);
void StoreAsyncGeneratorRequestPromise_1096(compiler::CodeAssemblerState* state_, TNode<AsyncGeneratorRequest> p_o, TNode<JSPromise> p_v);
TNode<HeapObject> LoadSourceTextModuleInfoEntryExportName_1097(compiler::CodeAssemblerState* state_, TNode<SourceTextModuleInfoEntry> p_o);
void StoreSourceTextModuleInfoEntryExportName_1098(compiler::CodeAssemblerState* state_, TNode<SourceTextModuleInfoEntry> p_o, TNode<HeapObject> p_v);
TNode<HeapObject> LoadSourceTextModuleInfoEntryLocalName_1099(compiler::CodeAssemblerState* state_, TNode<SourceTextModuleInfoEntry> p_o);
void StoreSourceTextModuleInfoEntryLocalName_1100(compiler::CodeAssemblerState* state_, TNode<SourceTextModuleInfoEntry> p_o, TNode<HeapObject> p_v);
TNode<HeapObject> LoadSourceTextModuleInfoEntryImportName_1101(compiler::CodeAssemblerState* state_, TNode<SourceTextModuleInfoEntry> p_o);
void StoreSourceTextModuleInfoEntryImportName_1102(compiler::CodeAssemblerState* state_, TNode<SourceTextModuleInfoEntry> p_o, TNode<HeapObject> p_v);
TNode<Smi> LoadSourceTextModuleInfoEntryModuleRequest_1103(compiler::CodeAssemblerState* state_, TNode<SourceTextModuleInfoEntry> p_o);
void StoreSourceTextModuleInfoEntryModuleRequest_1104(compiler::CodeAssemblerState* state_, TNode<SourceTextModuleInfoEntry> p_o, TNode<Smi> p_v);
TNode<Smi> LoadSourceTextModuleInfoEntryCellIndex_1105(compiler::CodeAssemblerState* state_, TNode<SourceTextModuleInfoEntry> p_o);
void StoreSourceTextModuleInfoEntryCellIndex_1106(compiler::CodeAssemblerState* state_, TNode<SourceTextModuleInfoEntry> p_o, TNode<Smi> p_v);
TNode<Smi> LoadSourceTextModuleInfoEntryBegPos_1107(compiler::CodeAssemblerState* state_, TNode<SourceTextModuleInfoEntry> p_o);
void StoreSourceTextModuleInfoEntryBegPos_1108(compiler::CodeAssemblerState* state_, TNode<SourceTextModuleInfoEntry> p_o, TNode<Smi> p_v);
TNode<Smi> LoadSourceTextModuleInfoEntryEndPos_1109(compiler::CodeAssemblerState* state_, TNode<SourceTextModuleInfoEntry> p_o);
void StoreSourceTextModuleInfoEntryEndPos_1110(compiler::CodeAssemblerState* state_, TNode<SourceTextModuleInfoEntry> p_o, TNode<Smi> p_v);
TNode<HeapObject> LoadPromiseCapabilityPromise_1111(compiler::CodeAssemblerState* state_, TNode<PromiseCapability> p_o);
void StorePromiseCapabilityPromise_1112(compiler::CodeAssemblerState* state_, TNode<PromiseCapability> p_o, TNode<HeapObject> p_v);
TNode<Object> LoadPromiseCapabilityResolve_1113(compiler::CodeAssemblerState* state_, TNode<PromiseCapability> p_o);
void StorePromiseCapabilityResolve_1114(compiler::CodeAssemblerState* state_, TNode<PromiseCapability> p_o, TNode<Object> p_v);
TNode<Object> LoadPromiseCapabilityReject_1115(compiler::CodeAssemblerState* state_, TNode<PromiseCapability> p_o);
void StorePromiseCapabilityReject_1116(compiler::CodeAssemblerState* state_, TNode<PromiseCapability> p_o, TNode<Object> p_v);
TNode<Object> LoadPromiseReactionNext_1117(compiler::CodeAssemblerState* state_, TNode<PromiseReaction> p_o);
void StorePromiseReactionNext_1118(compiler::CodeAssemblerState* state_, TNode<PromiseReaction> p_o, TNode<Object> p_v);
TNode<HeapObject> LoadPromiseReactionRejectHandler_1119(compiler::CodeAssemblerState* state_, TNode<PromiseReaction> p_o);
void StorePromiseReactionRejectHandler_1120(compiler::CodeAssemblerState* state_, TNode<PromiseReaction> p_o, TNode<HeapObject> p_v);
TNode<HeapObject> LoadPromiseReactionFulfillHandler_1121(compiler::CodeAssemblerState* state_, TNode<PromiseReaction> p_o);
void StorePromiseReactionFulfillHandler_1122(compiler::CodeAssemblerState* state_, TNode<PromiseReaction> p_o, TNode<HeapObject> p_v);
TNode<HeapObject> LoadPromiseReactionPromiseOrCapability_1123(compiler::CodeAssemblerState* state_, TNode<PromiseReaction> p_o);
void StorePromiseReactionPromiseOrCapability_1124(compiler::CodeAssemblerState* state_, TNode<PromiseReaction> p_o, TNode<HeapObject> p_v);
TNode<Object> LoadPromiseReactionJobTaskArgument_1125(compiler::CodeAssemblerState* state_, TNode<PromiseReactionJobTask> p_o);
void StorePromiseReactionJobTaskArgument_1126(compiler::CodeAssemblerState* state_, TNode<PromiseReactionJobTask> p_o, TNode<Object> p_v);
TNode<Context> LoadPromiseReactionJobTaskContext_1127(compiler::CodeAssemblerState* state_, TNode<PromiseReactionJobTask> p_o);
void StorePromiseReactionJobTaskContext_1128(compiler::CodeAssemblerState* state_, TNode<PromiseReactionJobTask> p_o, TNode<Context> p_v);
TNode<HeapObject> LoadPromiseReactionJobTaskHandler_1129(compiler::CodeAssemblerState* state_, TNode<PromiseReactionJobTask> p_o);
void StorePromiseReactionJobTaskHandler_1130(compiler::CodeAssemblerState* state_, TNode<PromiseReactionJobTask> p_o, TNode<HeapObject> p_v);
TNode<HeapObject> LoadPromiseReactionJobTaskPromiseOrCapability_1131(compiler::CodeAssemblerState* state_, TNode<PromiseReactionJobTask> p_o);
void StorePromiseReactionJobTaskPromiseOrCapability_1132(compiler::CodeAssemblerState* state_, TNode<PromiseReactionJobTask> p_o, TNode<HeapObject> p_v);
TNode<Context> LoadPromiseResolveThenableJobTaskContext_1133(compiler::CodeAssemblerState* state_, TNode<PromiseResolveThenableJobTask> p_o);
void StorePromiseResolveThenableJobTaskContext_1134(compiler::CodeAssemblerState* state_, TNode<PromiseResolveThenableJobTask> p_o, TNode<Context> p_v);
TNode<JSPromise> LoadPromiseResolveThenableJobTaskPromiseToResolve_1135(compiler::CodeAssemblerState* state_, TNode<PromiseResolveThenableJobTask> p_o);
void StorePromiseResolveThenableJobTaskPromiseToResolve_1136(compiler::CodeAssemblerState* state_, TNode<PromiseResolveThenableJobTask> p_o, TNode<JSPromise> p_v);
TNode<JSReceiver> LoadPromiseResolveThenableJobTaskThen_1137(compiler::CodeAssemblerState* state_, TNode<PromiseResolveThenableJobTask> p_o);
void StorePromiseResolveThenableJobTaskThen_1138(compiler::CodeAssemblerState* state_, TNode<PromiseResolveThenableJobTask> p_o, TNode<JSReceiver> p_v);
TNode<JSReceiver> LoadPromiseResolveThenableJobTaskThenable_1139(compiler::CodeAssemblerState* state_, TNode<PromiseResolveThenableJobTask> p_o);
void StorePromiseResolveThenableJobTaskThenable_1140(compiler::CodeAssemblerState* state_, TNode<PromiseResolveThenableJobTask> p_o, TNode<JSReceiver> p_v);
TNode<HeapObject> LoadJSRegExpData_1141(compiler::CodeAssemblerState* state_, TNode<JSRegExp> p_o);
void StoreJSRegExpData_1142(compiler::CodeAssemblerState* state_, TNode<JSRegExp> p_o, TNode<HeapObject> p_v);
TNode<HeapObject> LoadJSRegExpSource_1143(compiler::CodeAssemblerState* state_, TNode<JSRegExp> p_o);
void StoreJSRegExpSource_1144(compiler::CodeAssemblerState* state_, TNode<JSRegExp> p_o, TNode<HeapObject> p_v);
TNode<Object> LoadJSRegExpFlags_1145(compiler::CodeAssemblerState* state_, TNode<JSRegExp> p_o);
void StoreJSRegExpFlags_1146(compiler::CodeAssemblerState* state_, TNode<JSRegExp> p_o, TNode<Object> p_v);
TNode<Object> LoadJSRegExpResultIndex_1147(compiler::CodeAssemblerState* state_, TNode<JSRegExpResult> p_o);
void StoreJSRegExpResultIndex_1148(compiler::CodeAssemblerState* state_, TNode<JSRegExpResult> p_o, TNode<Object> p_v);
TNode<Object> LoadJSRegExpResultInput_1149(compiler::CodeAssemblerState* state_, TNode<JSRegExpResult> p_o);
void StoreJSRegExpResultInput_1150(compiler::CodeAssemblerState* state_, TNode<JSRegExpResult> p_o, TNode<Object> p_v);
TNode<Object> LoadJSRegExpResultGroups_1151(compiler::CodeAssemblerState* state_, TNode<JSRegExpResult> p_o);
void StoreJSRegExpResultGroups_1152(compiler::CodeAssemblerState* state_, TNode<JSRegExpResult> p_o, TNode<Object> p_v);
TNode<HeapObject> LoadJSRegExpResultCachedIndicesOrMatchInfo_1153(compiler::CodeAssemblerState* state_, TNode<JSRegExpResult> p_o);
void StoreJSRegExpResultCachedIndicesOrMatchInfo_1154(compiler::CodeAssemblerState* state_, TNode<JSRegExpResult> p_o, TNode<HeapObject> p_v);
TNode<HeapObject> LoadJSRegExpResultNames_1155(compiler::CodeAssemblerState* state_, TNode<JSRegExpResult> p_o);
void StoreJSRegExpResultNames_1156(compiler::CodeAssemblerState* state_, TNode<JSRegExpResult> p_o, TNode<HeapObject> p_v);
TNode<Object> LoadJSRegExpResultIndicesGroups_1157(compiler::CodeAssemblerState* state_, TNode<JSRegExpResultIndices> p_o);
void StoreJSRegExpResultIndicesGroups_1158(compiler::CodeAssemblerState* state_, TNode<JSRegExpResultIndices> p_o, TNode<Object> p_v);
TNode<Object> LoadJSRegExpStringIteratorIteratingRegExp_1159(compiler::CodeAssemblerState* state_, TNode<JSRegExpStringIterator> p_o);
void StoreJSRegExpStringIteratorIteratingRegExp_1160(compiler::CodeAssemblerState* state_, TNode<JSRegExpStringIterator> p_o, TNode<Object> p_v);
TNode<String> LoadJSRegExpStringIteratorIteratedString_1161(compiler::CodeAssemblerState* state_, TNode<JSRegExpStringIterator> p_o);
void StoreJSRegExpStringIteratorIteratedString_1162(compiler::CodeAssemblerState* state_, TNode<JSRegExpStringIterator> p_o, TNode<String> p_v);
TNode<Smi> LoadJSRegExpStringIteratorFlags_1163(compiler::CodeAssemblerState* state_, TNode<JSRegExpStringIterator> p_o);
void StoreJSRegExpStringIteratorFlags_1164(compiler::CodeAssemblerState* state_, TNode<JSRegExpStringIterator> p_o, TNode<Smi> p_v);
TNode<Smi> _method_RegExpMatchInfo_GetStartOfCapture(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<RegExpMatchInfo> p_this, int31_t p_captureIndex);
TNode<Smi> _method_RegExpMatchInfo_GetEndOfCapture(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<RegExpMatchInfo> p_this, int31_t p_captureIndex);
TNode<Smi> _method_RegExpMatchInfo_NumberOfCaptures(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<RegExpMatchInfo> p_this);
TNode<Object> LoadAccessorInfoName_1165(compiler::CodeAssemblerState* state_, TNode<AccessorInfo> p_o);
void StoreAccessorInfoName_1166(compiler::CodeAssemblerState* state_, TNode<AccessorInfo> p_o, TNode<Object> p_v);
TNode<Smi> LoadAccessorInfoFlags_1167(compiler::CodeAssemblerState* state_, TNode<AccessorInfo> p_o);
void StoreAccessorInfoFlags_1168(compiler::CodeAssemblerState* state_, TNode<AccessorInfo> p_o, TNode<Smi> p_v);
TNode<Object> LoadAccessorInfoExpectedReceiverType_1169(compiler::CodeAssemblerState* state_, TNode<AccessorInfo> p_o);
void StoreAccessorInfoExpectedReceiverType_1170(compiler::CodeAssemblerState* state_, TNode<AccessorInfo> p_o, TNode<Object> p_v);
TNode<Object> LoadAccessorInfoSetter_1171(compiler::CodeAssemblerState* state_, TNode<AccessorInfo> p_o);
void StoreAccessorInfoSetter_1172(compiler::CodeAssemblerState* state_, TNode<AccessorInfo> p_o, TNode<Object> p_v);
TNode<Object> LoadAccessorInfoGetter_1173(compiler::CodeAssemblerState* state_, TNode<AccessorInfo> p_o);
void StoreAccessorInfoGetter_1174(compiler::CodeAssemblerState* state_, TNode<AccessorInfo> p_o, TNode<Object> p_v);
TNode<Object> LoadAccessorInfoJsGetter_1175(compiler::CodeAssemblerState* state_, TNode<AccessorInfo> p_o);
void StoreAccessorInfoJsGetter_1176(compiler::CodeAssemblerState* state_, TNode<AccessorInfo> p_o, TNode<Object> p_v);
TNode<Object> LoadAccessorInfoData_1177(compiler::CodeAssemblerState* state_, TNode<AccessorInfo> p_o);
void StoreAccessorInfoData_1178(compiler::CodeAssemblerState* state_, TNode<AccessorInfo> p_o, TNode<Object> p_v);
TNode<Object> LoadAccessorPairGetter_1179(compiler::CodeAssemblerState* state_, TNode<AccessorPair> p_o);
void StoreAccessorPairGetter_1180(compiler::CodeAssemblerState* state_, TNode<AccessorPair> p_o, TNode<Object> p_v);
TNode<Object> LoadAccessorPairSetter_1181(compiler::CodeAssemblerState* state_, TNode<AccessorPair> p_o);
void StoreAccessorPairSetter_1182(compiler::CodeAssemblerState* state_, TNode<AccessorPair> p_o, TNode<Object> p_v);
TNode<SharedFunctionInfo> LoadDebugInfoSharedFunctionInfo_1183(compiler::CodeAssemblerState* state_, TNode<DebugInfo> p_o);
void StoreDebugInfoSharedFunctionInfo_1184(compiler::CodeAssemblerState* state_, TNode<DebugInfo> p_o, TNode<SharedFunctionInfo> p_v);
TNode<Smi> LoadDebugInfoDebuggerHints_1185(compiler::CodeAssemblerState* state_, TNode<DebugInfo> p_o);
void StoreDebugInfoDebuggerHints_1186(compiler::CodeAssemblerState* state_, TNode<DebugInfo> p_o, TNode<Smi> p_v);
TNode<HeapObject> LoadDebugInfoScript_1187(compiler::CodeAssemblerState* state_, TNode<DebugInfo> p_o);
void StoreDebugInfoScript_1188(compiler::CodeAssemblerState* state_, TNode<DebugInfo> p_o, TNode<HeapObject> p_v);
TNode<HeapObject> LoadDebugInfoOriginalBytecodeArray_1189(compiler::CodeAssemblerState* state_, TNode<DebugInfo> p_o);
void StoreDebugInfoOriginalBytecodeArray_1190(compiler::CodeAssemblerState* state_, TNode<DebugInfo> p_o, TNode<HeapObject> p_v);
TNode<HeapObject> LoadDebugInfoDebugBytecodeArray_1191(compiler::CodeAssemblerState* state_, TNode<DebugInfo> p_o);
void StoreDebugInfoDebugBytecodeArray_1192(compiler::CodeAssemblerState* state_, TNode<DebugInfo> p_o, TNode<HeapObject> p_v);
TNode<FixedArray> LoadDebugInfoBreakPoints_1193(compiler::CodeAssemblerState* state_, TNode<DebugInfo> p_o);
void StoreDebugInfoBreakPoints_1194(compiler::CodeAssemblerState* state_, TNode<DebugInfo> p_o, TNode<FixedArray> p_v);
TNode<Smi> LoadDebugInfoFlags_1195(compiler::CodeAssemblerState* state_, TNode<DebugInfo> p_o);
void StoreDebugInfoFlags_1196(compiler::CodeAssemblerState* state_, TNode<DebugInfo> p_o, TNode<Smi> p_v);
TNode<HeapObject> LoadDebugInfoCoverageInfo_1197(compiler::CodeAssemblerState* state_, TNode<DebugInfo> p_o);
void StoreDebugInfoCoverageInfo_1198(compiler::CodeAssemblerState* state_, TNode<DebugInfo> p_o, TNode<HeapObject> p_v);
TNode<SharedFunctionInfo> LoadFeedbackVectorSharedFunctionInfo_1199(compiler::CodeAssemblerState* state_, TNode<FeedbackVector> p_o);
void StoreFeedbackVectorSharedFunctionInfo_1200(compiler::CodeAssemblerState* state_, TNode<FeedbackVector> p_o, TNode<SharedFunctionInfo> p_v);
TNode<Object> LoadFeedbackVectorOptimizedCodeWeakOrSmi_1201(compiler::CodeAssemblerState* state_, TNode<FeedbackVector> p_o);
void StoreFeedbackVectorOptimizedCodeWeakOrSmi_1202(compiler::CodeAssemblerState* state_, TNode<FeedbackVector> p_o, TNode<Object> p_v);
TNode<FixedArray> LoadFeedbackVectorClosureFeedbackCellArray_1203(compiler::CodeAssemblerState* state_, TNode<FeedbackVector> p_o);
void StoreFeedbackVectorClosureFeedbackCellArray_1204(compiler::CodeAssemblerState* state_, TNode<FeedbackVector> p_o, TNode<FixedArray> p_v);
TNode<Int32T> LoadFeedbackVectorLength_1205(compiler::CodeAssemblerState* state_, TNode<FeedbackVector> p_o);
void StoreFeedbackVectorLength_1206(compiler::CodeAssemblerState* state_, TNode<FeedbackVector> p_o, TNode<Int32T> p_v);
TNode<Int32T> LoadFeedbackVectorInvocationCount_1207(compiler::CodeAssemblerState* state_, TNode<FeedbackVector> p_o);
void StoreFeedbackVectorInvocationCount_1208(compiler::CodeAssemblerState* state_, TNode<FeedbackVector> p_o, TNode<Int32T> p_v);
TNode<Int32T> LoadFeedbackVectorProfilerTicks_1209(compiler::CodeAssemblerState* state_, TNode<FeedbackVector> p_o);
void StoreFeedbackVectorProfilerTicks_1210(compiler::CodeAssemblerState* state_, TNode<FeedbackVector> p_o, TNode<Int32T> p_v);
TNode<Uint32T> LoadFeedbackVectorPadding_1211(compiler::CodeAssemblerState* state_, TNode<FeedbackVector> p_o);
void StoreFeedbackVectorPadding_1212(compiler::CodeAssemblerState* state_, TNode<FeedbackVector> p_o, TNode<Uint32T> p_v);
TNode<HeapObject> LoadFeedbackCellValue_1213(compiler::CodeAssemblerState* state_, TNode<FeedbackCell> p_o);
void StoreFeedbackCellValue_1214(compiler::CodeAssemblerState* state_, TNode<FeedbackCell> p_o, TNode<HeapObject> p_v);
TNode<Int32T> LoadFeedbackCellInterruptBudget_1215(compiler::CodeAssemblerState* state_, TNode<FeedbackCell> p_o);
void StoreFeedbackCellInterruptBudget_1216(compiler::CodeAssemblerState* state_, TNode<FeedbackCell> p_o, TNode<Int32T> p_v);
TNode<Struct> LoadAllocationMementoAllocationSite_1217(compiler::CodeAssemblerState* state_, TNode<AllocationMemento> p_o);
void StoreAllocationMementoAllocationSite_1218(compiler::CodeAssemblerState* state_, TNode<AllocationMemento> p_o, TNode<Struct> p_v);
TNode<Foreign> LoadWasmModuleObjectNativeModule_1219(compiler::CodeAssemblerState* state_, TNode<WasmModuleObject> p_o);
void StoreWasmModuleObjectNativeModule_1220(compiler::CodeAssemblerState* state_, TNode<WasmModuleObject> p_o, TNode<Foreign> p_v);
TNode<FixedArray> LoadWasmModuleObjectExportWrappers_1221(compiler::CodeAssemblerState* state_, TNode<WasmModuleObject> p_o);
void StoreWasmModuleObjectExportWrappers_1222(compiler::CodeAssemblerState* state_, TNode<WasmModuleObject> p_o, TNode<FixedArray> p_v);
TNode<Script> LoadWasmModuleObjectScript_1223(compiler::CodeAssemblerState* state_, TNode<WasmModuleObject> p_o);
void StoreWasmModuleObjectScript_1224(compiler::CodeAssemblerState* state_, TNode<WasmModuleObject> p_o, TNode<Script> p_v);
TNode<WeakArrayList> LoadWasmModuleObjectWeakInstanceList_1225(compiler::CodeAssemblerState* state_, TNode<WasmModuleObject> p_o);
void StoreWasmModuleObjectWeakInstanceList_1226(compiler::CodeAssemblerState* state_, TNode<WasmModuleObject> p_o, TNode<WeakArrayList> p_v);
TNode<HeapObject> LoadWasmModuleObjectAsmJsOffsetTable_1227(compiler::CodeAssemblerState* state_, TNode<WasmModuleObject> p_o);
void StoreWasmModuleObjectAsmJsOffsetTable_1228(compiler::CodeAssemblerState* state_, TNode<WasmModuleObject> p_o, TNode<HeapObject> p_v);
TNode<HeapObject> LoadWasmModuleObjectBreakPointInfos_1229(compiler::CodeAssemblerState* state_, TNode<WasmModuleObject> p_o);
void StoreWasmModuleObjectBreakPointInfos_1230(compiler::CodeAssemblerState* state_, TNode<WasmModuleObject> p_o, TNode<HeapObject> p_v);
TNode<FixedArray> LoadWasmTableObjectEntries_1231(compiler::CodeAssemblerState* state_, TNode<WasmTableObject> p_o);
void StoreWasmTableObjectEntries_1232(compiler::CodeAssemblerState* state_, TNode<WasmTableObject> p_o, TNode<FixedArray> p_v);
TNode<Object> LoadWasmTableObjectMaximumLength_1233(compiler::CodeAssemblerState* state_, TNode<WasmTableObject> p_o);
void StoreWasmTableObjectMaximumLength_1234(compiler::CodeAssemblerState* state_, TNode<WasmTableObject> p_o, TNode<Object> p_v);
TNode<FixedArray> LoadWasmTableObjectDispatchTables_1235(compiler::CodeAssemblerState* state_, TNode<WasmTableObject> p_o);
void StoreWasmTableObjectDispatchTables_1236(compiler::CodeAssemblerState* state_, TNode<WasmTableObject> p_o, TNode<FixedArray> p_v);
TNode<Smi> LoadWasmTableObjectRawType_1237(compiler::CodeAssemblerState* state_, TNode<WasmTableObject> p_o);
void StoreWasmTableObjectRawType_1238(compiler::CodeAssemblerState* state_, TNode<WasmTableObject> p_o, TNode<Smi> p_v);
TNode<JSArrayBuffer> LoadWasmMemoryObjectArrayBuffer_1239(compiler::CodeAssemblerState* state_, TNode<WasmMemoryObject> p_o);
void StoreWasmMemoryObjectArrayBuffer_1240(compiler::CodeAssemblerState* state_, TNode<WasmMemoryObject> p_o, TNode<JSArrayBuffer> p_v);
TNode<Smi> LoadWasmMemoryObjectMaximumPages_1241(compiler::CodeAssemblerState* state_, TNode<WasmMemoryObject> p_o);
void StoreWasmMemoryObjectMaximumPages_1242(compiler::CodeAssemblerState* state_, TNode<WasmMemoryObject> p_o, TNode<Smi> p_v);
TNode<HeapObject> LoadWasmMemoryObjectInstances_1243(compiler::CodeAssemblerState* state_, TNode<WasmMemoryObject> p_o);
void StoreWasmMemoryObjectInstances_1244(compiler::CodeAssemblerState* state_, TNode<WasmMemoryObject> p_o, TNode<HeapObject> p_v);
TNode<HeapObject> LoadWasmGlobalObjectUntaggedBuffer_1245(compiler::CodeAssemblerState* state_, TNode<WasmGlobalObject> p_o);
void StoreWasmGlobalObjectUntaggedBuffer_1246(compiler::CodeAssemblerState* state_, TNode<WasmGlobalObject> p_o, TNode<HeapObject> p_v);
TNode<HeapObject> LoadWasmGlobalObjectTaggedBuffer_1247(compiler::CodeAssemblerState* state_, TNode<WasmGlobalObject> p_o);
void StoreWasmGlobalObjectTaggedBuffer_1248(compiler::CodeAssemblerState* state_, TNode<WasmGlobalObject> p_o, TNode<HeapObject> p_v);
TNode<Smi> LoadWasmGlobalObjectOffset_1249(compiler::CodeAssemblerState* state_, TNode<WasmGlobalObject> p_o);
void StoreWasmGlobalObjectOffset_1250(compiler::CodeAssemblerState* state_, TNode<WasmGlobalObject> p_o, TNode<Smi> p_v);
TNode<Smi> LoadWasmGlobalObjectFlags_1251(compiler::CodeAssemblerState* state_, TNode<WasmGlobalObject> p_o);
void StoreWasmGlobalObjectFlags_1252(compiler::CodeAssemblerState* state_, TNode<WasmGlobalObject> p_o, TNode<Smi> p_v);
TNode<ByteArray> LoadWasmExceptionObjectSerializedSignature_1253(compiler::CodeAssemblerState* state_, TNode<WasmExceptionObject> p_o);
void StoreWasmExceptionObjectSerializedSignature_1254(compiler::CodeAssemblerState* state_, TNode<WasmExceptionObject> p_o, TNode<ByteArray> p_v);
TNode<HeapObject> LoadWasmExceptionObjectExceptionTag_1255(compiler::CodeAssemblerState* state_, TNode<WasmExceptionObject> p_o);
void StoreWasmExceptionObjectExceptionTag_1256(compiler::CodeAssemblerState* state_, TNode<WasmExceptionObject> p_o, TNode<HeapObject> p_v);
TNode<Foreign> LoadAsmWasmDataManagedNativeModule_1257(compiler::CodeAssemblerState* state_, TNode<AsmWasmData> p_o);
void StoreAsmWasmDataManagedNativeModule_1258(compiler::CodeAssemblerState* state_, TNode<AsmWasmData> p_o, TNode<Foreign> p_v);
TNode<FixedArray> LoadAsmWasmDataExportWrappers_1259(compiler::CodeAssemblerState* state_, TNode<AsmWasmData> p_o);
void StoreAsmWasmDataExportWrappers_1260(compiler::CodeAssemblerState* state_, TNode<AsmWasmData> p_o, TNode<FixedArray> p_v);
TNode<ByteArray> LoadAsmWasmDataAsmJsOffsetTable_1261(compiler::CodeAssemblerState* state_, TNode<AsmWasmData> p_o);
void StoreAsmWasmDataAsmJsOffsetTable_1262(compiler::CodeAssemblerState* state_, TNode<AsmWasmData> p_o, TNode<ByteArray> p_v);
TNode<HeapNumber> LoadAsmWasmDataUsesBitset_1263(compiler::CodeAssemblerState* state_, TNode<AsmWasmData> p_o);
void StoreAsmWasmDataUsesBitset_1264(compiler::CodeAssemblerState* state_, TNode<AsmWasmData> p_o, TNode<HeapNumber> p_v);
TNode<NativeContext> LoadJSFinalizationGroupNativeContext_1265(compiler::CodeAssemblerState* state_, TNode<JSFinalizationGroup> p_o);
void StoreJSFinalizationGroupNativeContext_1266(compiler::CodeAssemblerState* state_, TNode<JSFinalizationGroup> p_o, TNode<NativeContext> p_v);
TNode<Object> LoadJSFinalizationGroupCleanup_1267(compiler::CodeAssemblerState* state_, TNode<JSFinalizationGroup> p_o);
void StoreJSFinalizationGroupCleanup_1268(compiler::CodeAssemblerState* state_, TNode<JSFinalizationGroup> p_o, TNode<Object> p_v);
TNode<HeapObject> LoadJSFinalizationGroupActiveCells_1269(compiler::CodeAssemblerState* state_, TNode<JSFinalizationGroup> p_o);
void StoreJSFinalizationGroupActiveCells_1270(compiler::CodeAssemblerState* state_, TNode<JSFinalizationGroup> p_o, TNode<HeapObject> p_v);
TNode<HeapObject> LoadJSFinalizationGroupClearedCells_1271(compiler::CodeAssemblerState* state_, TNode<JSFinalizationGroup> p_o);
void StoreJSFinalizationGroupClearedCells_1272(compiler::CodeAssemblerState* state_, TNode<JSFinalizationGroup> p_o, TNode<HeapObject> p_v);
TNode<Object> LoadJSFinalizationGroupKeyMap_1273(compiler::CodeAssemblerState* state_, TNode<JSFinalizationGroup> p_o);
void StoreJSFinalizationGroupKeyMap_1274(compiler::CodeAssemblerState* state_, TNode<JSFinalizationGroup> p_o, TNode<Object> p_v);
TNode<HeapObject> LoadJSFinalizationGroupNext_1275(compiler::CodeAssemblerState* state_, TNode<JSFinalizationGroup> p_o);
void StoreJSFinalizationGroupNext_1276(compiler::CodeAssemblerState* state_, TNode<JSFinalizationGroup> p_o, TNode<HeapObject> p_v);
TNode<Smi> LoadJSFinalizationGroupFlags_1277(compiler::CodeAssemblerState* state_, TNode<JSFinalizationGroup> p_o);
void StoreJSFinalizationGroupFlags_1278(compiler::CodeAssemblerState* state_, TNode<JSFinalizationGroup> p_o, TNode<Smi> p_v);
TNode<JSFinalizationGroup> LoadJSFinalizationGroupCleanupIteratorFinalizationGroup_1279(compiler::CodeAssemblerState* state_, TNode<JSFinalizationGroupCleanupIterator> p_o);
void StoreJSFinalizationGroupCleanupIteratorFinalizationGroup_1280(compiler::CodeAssemblerState* state_, TNode<JSFinalizationGroupCleanupIterator> p_o, TNode<JSFinalizationGroup> p_v);
TNode<HeapObject> LoadWeakCellFinalizationGroup_1281(compiler::CodeAssemblerState* state_, TNode<WeakCell> p_o);
void StoreWeakCellFinalizationGroup_1282(compiler::CodeAssemblerState* state_, TNode<WeakCell> p_o, TNode<HeapObject> p_v);
TNode<HeapObject> LoadWeakCellTarget_1283(compiler::CodeAssemblerState* state_, TNode<WeakCell> p_o);
void StoreWeakCellTarget_1284(compiler::CodeAssemblerState* state_, TNode<WeakCell> p_o, TNode<HeapObject> p_v);
TNode<Object> LoadWeakCellHoldings_1285(compiler::CodeAssemblerState* state_, TNode<WeakCell> p_o);
void StoreWeakCellHoldings_1286(compiler::CodeAssemblerState* state_, TNode<WeakCell> p_o, TNode<Object> p_v);
TNode<HeapObject> LoadWeakCellPrev_1287(compiler::CodeAssemblerState* state_, TNode<WeakCell> p_o);
void StoreWeakCellPrev_1288(compiler::CodeAssemblerState* state_, TNode<WeakCell> p_o, TNode<HeapObject> p_v);
TNode<HeapObject> LoadWeakCellNext_1289(compiler::CodeAssemblerState* state_, TNode<WeakCell> p_o);
void StoreWeakCellNext_1290(compiler::CodeAssemblerState* state_, TNode<WeakCell> p_o, TNode<HeapObject> p_v);
TNode<Object> LoadWeakCellKey_1291(compiler::CodeAssemblerState* state_, TNode<WeakCell> p_o);
void StoreWeakCellKey_1292(compiler::CodeAssemblerState* state_, TNode<WeakCell> p_o, TNode<Object> p_v);
TNode<HeapObject> LoadWeakCellKeyListPrev_1293(compiler::CodeAssemblerState* state_, TNode<WeakCell> p_o);
void StoreWeakCellKeyListPrev_1294(compiler::CodeAssemblerState* state_, TNode<WeakCell> p_o, TNode<HeapObject> p_v);
TNode<HeapObject> LoadWeakCellKeyListNext_1295(compiler::CodeAssemblerState* state_, TNode<WeakCell> p_o);
void StoreWeakCellKeyListNext_1296(compiler::CodeAssemblerState* state_, TNode<WeakCell> p_o, TNode<HeapObject> p_v);
TNode<HeapObject> LoadJSWeakRefTarget_1297(compiler::CodeAssemblerState* state_, TNode<JSWeakRef> p_o);
void StoreJSWeakRefTarget_1298(compiler::CodeAssemblerState* state_, TNode<JSWeakRef> p_o, TNode<HeapObject> p_v);
TNode<FixedArray> LoadBytecodeArrayConstantPool_1299(compiler::CodeAssemblerState* state_, TNode<BytecodeArray> p_o);
void StoreBytecodeArrayConstantPool_1300(compiler::CodeAssemblerState* state_, TNode<BytecodeArray> p_o, TNode<FixedArray> p_v);
TNode<ByteArray> LoadBytecodeArrayHandlerTable_1301(compiler::CodeAssemblerState* state_, TNode<BytecodeArray> p_o);
void StoreBytecodeArrayHandlerTable_1302(compiler::CodeAssemblerState* state_, TNode<BytecodeArray> p_o, TNode<ByteArray> p_v);
TNode<HeapObject> LoadBytecodeArraySourcePositionTable_1303(compiler::CodeAssemblerState* state_, TNode<BytecodeArray> p_o);
void StoreBytecodeArraySourcePositionTable_1304(compiler::CodeAssemblerState* state_, TNode<BytecodeArray> p_o, TNode<HeapObject> p_v);
TNode<Int32T> LoadBytecodeArrayFrameSize_1305(compiler::CodeAssemblerState* state_, TNode<BytecodeArray> p_o);
void StoreBytecodeArrayFrameSize_1306(compiler::CodeAssemblerState* state_, TNode<BytecodeArray> p_o, TNode<Int32T> p_v);
TNode<Int32T> LoadBytecodeArrayParameterSize_1307(compiler::CodeAssemblerState* state_, TNode<BytecodeArray> p_o);
void StoreBytecodeArrayParameterSize_1308(compiler::CodeAssemblerState* state_, TNode<BytecodeArray> p_o, TNode<Int32T> p_v);
TNode<Int32T> LoadBytecodeArrayIncomingNewTargetOrGeneratorRegister_1309(compiler::CodeAssemblerState* state_, TNode<BytecodeArray> p_o);
void StoreBytecodeArrayIncomingNewTargetOrGeneratorRegister_1310(compiler::CodeAssemblerState* state_, TNode<BytecodeArray> p_o, TNode<Int32T> p_v);
TNode<Int8T> LoadBytecodeArrayOsrNestingLevel_1311(compiler::CodeAssemblerState* state_, TNode<BytecodeArray> p_o);
void StoreBytecodeArrayOsrNestingLevel_1312(compiler::CodeAssemblerState* state_, TNode<BytecodeArray> p_o, TNode<Int8T> p_v);
TNode<Int8T> LoadBytecodeArrayBytecodeAge_1313(compiler::CodeAssemblerState* state_, TNode<BytecodeArray> p_o);
void StoreBytecodeArrayBytecodeAge_1314(compiler::CodeAssemblerState* state_, TNode<BytecodeArray> p_o, TNode<Int8T> p_v);
TNode<HeapObject> Cast10HeapObject_1470(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
TNode<Uint32T> Convert8ATuint327ATuint8_1471(compiler::CodeAssemblerState* state_, TNode<Uint8T> p_i);
TNode<Uint32T> Convert8ATuint328ATuint16_1472(compiler::CodeAssemblerState* state_, TNode<Uint16T> p_i);
TNode<Uint32T> Convert8ATuint328ATuint31_1473(compiler::CodeAssemblerState* state_, TNode<Uint32T> p_i);
TNode<JSFunction> UnsafeCast10JSFunction_1474(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<Object> p_o);
TNode<JSReceiver> UnsafeCast13ATConstructor_1475(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<Object> p_o);
TNode<Map> UnsafeCast3Map_1476(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<Object> p_o);
TNode<JSReceiver> UnsafeCast71UT19ATCallableApiObject17ATCallableJSProxy15JSBoundFunction10JSFunction_1477(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<Object> p_o);
TNode<JSArray> Cast7JSArray_1478(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
TNode<BoolT> Is13ATFastJSArray20UT5ATSmi10HeapObject_1479(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<Object> p_o);
TNode<BoolT> Is20ATFastJSArrayForRead20UT5ATSmi10HeapObject_1480(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<Object> p_o);
TNode<BoolT> Is34ATFastJSArrayWithNoCustomIteration20UT5ATSmi10HeapObject_1481(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<Object> p_o);
TNode<BoolT> Is41ATFastJSArrayForReadWithNoCustomIteration20UT5ATSmi10HeapObject_1482(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<Object> p_o);
TNode<Float64T> Convert9ATfloat6417ATconstexpr_int31_1483(compiler::CodeAssemblerState* state_, int31_t p_i);
TNode<JSArray> Cast41ATFastJSArrayForReadWithNoCustomIteration_1526(compiler::CodeAssemblerState* state_, TNode<Context> p_context, TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
}  // namespace internal
}  // namespace v8

#endif  // V8_GEN_TORQUE_GENERATED_SRC_BUILTINS_BASE_TQ_H_
